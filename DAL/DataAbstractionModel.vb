' Generated by SOLAR Generation Studio .
' Plugin Version: 1.0.0.0
''' <summary>
''' Class Name   : SQL 
''' Description  : Provides SQL nomenclature.
''' Creation Date: 18/04/2016 10:37:10 a. m.
''' </summary>
''' <remarks></remarks>

Public Class SqlEnums

    Public Enum OperandEnum
        Equal
        NotEqual
        GreaterThan
        GreaterThanOrEqual
        LessThan
        LessThanOrEqual
        [Like]
        NotLike
        IsNull
        IsNotNull
        Between
        [In]
        NotIn
    End Enum
    Public Enum DirEnum
        [ASC]
        [DESC]
    End Enum
    Public Enum ConjunctionEnum
        [AND]
        [OR]
    End Enum
    Public Enum FunctionEnum
        Avg = 1
        Count
        Max
        Min
        StdDev
        Var
        Sum
    End Enum

End Class
Public MustInherit Class WhereParameter
    Private Const _WHERE As String = " WHERE "
    Private Const _BETWEEN As String = " BETWEEN "
    Private Const _EQUAL As String = " = "
    Private Const _GREATER_THAN As String = " > "
    Private Const _GREATER_THAN_OR_EQUAL As String = " >= "
    Private Const _IN_ As String = " IN "
    Private Const _IS_NOT_NULL As String = " IS NOT NULL "
    Private Const _IS_NULL As String = " IS NULL "
    Private Const _LESS_THAN As String = " < "
    Private Const _LESS_THAN_OR_EQUAL As String = " <= "
    Private Const _LIKE_ As String = " LIKE "
    Private Const _NOT_EQUAL As String = " <> "
    Private Const _NOT_IN As String = " NOT IN "
    Private Const _NOT_LIKE As String = " NOT LIKE "

    Protected _whereParams As New List(Of String)

    Friend Function GetSQL() As String
        Dim _buff As String = String.Empty
        Try
            For Each sIterator As String In _whereParams
                _buff &= " " & sIterator & " "
            Next
            If _buff.Length Then
                Return _WHERE & _buff
            Else
                Return Nothing
            End If

        Catch ex As Exception
            Return Nothing
        End Try
    End Function

    Protected Function GetOperand(ByVal Operand As SqlEnums.OperandEnum) As String
        Try
            Select Case Operand
                Case SqlEnums.OperandEnum.Between
                    Return _BETWEEN
                Case SqlEnums.OperandEnum.Equal
                    Return _EQUAL
                Case SqlEnums.OperandEnum.GreaterThan
                    Return _GREATER_THAN
                Case SqlEnums.OperandEnum.GreaterThanOrEqual
                    Return _GREATER_THAN_OR_EQUAL
                Case SqlEnums.OperandEnum.In
                    Return _IN_
                Case SqlEnums.OperandEnum.IsNotNull
                    Return _IS_NOT_NULL
                Case SqlEnums.OperandEnum.IsNull
                    Return _IS_NULL
                Case SqlEnums.OperandEnum.LessThan
                    Return _LESS_THAN
                Case SqlEnums.OperandEnum.LessThanOrEqual
                    Return _LESS_THAN_OR_EQUAL
                Case SqlEnums.OperandEnum.Like
                    Return _LIKE_
                Case SqlEnums.OperandEnum.NotEqual
                    Return _NOT_EQUAL
                Case SqlEnums.OperandEnum.NotIn
                    Return _NOT_IN
                Case SqlEnums.OperandEnum.NotLike
                    Return _NOT_LIKE
            End Select
            Return Nothing
        Catch ex As Exception
            Return Nothing
        End Try
    End Function
    Public Sub Clear()
        _whereParams.Clear()
    End Sub
    Public ReadOnly Property Count()
        Get
            Return _whereParams.Count
        End Get
    End Property

End Class
Public MustInherit Class OrderByParameter
    Private Const _COLON As String = ","
    Private Const _ORDER_BY As String = " ORDER BY "

    Protected _orderByParams As New List(Of String)
    Friend Function GetSQL() As String
        Dim _buff As String = String.Empty
        Try
            For Each param As String In _orderByParams
                _buff &= param & _COLON
            Next
            If _buff <> Nothing AndAlso _buff.Length > 0 Then
                Return _ORDER_BY & _buff.Substring(0, _buff.Length - 1)
            Else
                Return Nothing
            End If
        Catch ex As Exception
            Return Nothing
        End Try
    End Function
    Public Sub Clear()
        _orderByParams.Clear()
    End Sub
    Public ReadOnly Property Count()
        Get
            Return _orderByParams.Count
        End Get
    End Property

End Class
Public MustInherit Class AggregateParameter
    Private Const _AVG As String = " AVG "
    Private Const _COUNT As String = " COUNT "
    Private Const _MAX As String = " MAX "
    Private Const _MIN As String = " MIN "
    Private Const _STDEV As String = " STDEV "
    Private Const _SUM As String = " SUM "
    Private Const _VAR As String = " VAR "
    Private Const _COLON As String = ","

    Protected _aggregateParams As New List(Of String)
    Protected Function GetOperand(ByVal Operand As SqlEnums.FunctionEnum) As String
        Try
            Select Case Operand
                Case SqlEnums.FunctionEnum.Avg
                    Return _AVG
                Case SqlEnums.FunctionEnum.Count
                    Return _COUNT
                Case SqlEnums.FunctionEnum.Max
                    Return _MAX
                Case SqlEnums.FunctionEnum.Min
                    Return _MIN
                Case SqlEnums.FunctionEnum.StdDev
                    Return _STDEV
                Case SqlEnums.FunctionEnum.Sum
                    Return _SUM
                Case SqlEnums.FunctionEnum.Var
                    Return _VAR
            End Select
            Return Nothing
        Catch ex As Exception
            Return Nothing
        End Try
    End Function
    Friend Function GetSQL() As String
        Dim _buff As String = String.Empty
        Try
            For Each param As String In _aggregateParams
                _buff &= param & _COLON
            Next
            If _buff <> Nothing AndAlso _buff.Length > 0 Then
                Return _buff.Substring(0, _buff.Length - 1)
            Else
                Return Nothing
            End If
        Catch ex As Exception
            Return Nothing
        End Try
    End Function
    Public Sub Clear()
        _aggregateParams.Clear()
    End Sub
    Public ReadOnly Property Count()
        Get
            Return _aggregateParams.Count
        End Get
    End Property

End Class
Public Class DataField
        Private _name As String
        Private _value As Object

        Public Sub New(ByVal Name As String, ByVal Value As Object)
            _name = Name : _value = Value
        End Sub
        Public Property Name() As String
            Get
                Return _name
            End Get
            Set(ByVal value As String)
                _name = value
            End Set
        End Property
        Public Property Value() As Object
            Get
                Return _value
            End Get
            Set(ByVal value As Object)
                _value = value
            End Set
        End Property
    End Class


