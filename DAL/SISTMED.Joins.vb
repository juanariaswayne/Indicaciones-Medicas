 ' Generated by SOLAR Generation Studio .
 ' Plugin Version: 1.0.0.0
Imports System.Collections.Generic
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports Solar.DataHelper

Namespace Joins

    Public Class HABITACIONES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            habitacion_id
            descripcion
            sede_id
            baja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.HABITACIONES)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _ExceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _ExceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.HABITACIONES) As Entities.Joins.HABITACIONES

            Try
                _commandText = "_HABITACIONES_ADD"
                Dim VPKhabitacion_id As New SQLParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.habitacion_id)
                Dim Vdescripcion As New SQLParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.descripcion)
                Dim VPKsede_id As New SQLParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sede_id.sede_id)
                Dim Vbaja As New SQLParameter("@baja", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.baja)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SQLParameter = {vPKhabitacion_id, Vdescripcion, VPKsede_id, Vbaja, Verr}
                If _transaction Is Nothing Then
                    result = SQLHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandtext, params)
                Else
                    result = SQLHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandtext, params)
                End If
                If Result Then
                    Item.habitacion_id = vPKhabitacion_id.Value
                    Item.SEDE_ID = VPKsede_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.HABITACIONES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Habitaciones_ITEMS"
                _itemList.Clear
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.habitacion_id = IIf(Convert.IsDBNull(dr("habitacion_id")), Nothing, dr("habitacion_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    Try
                        Dim result As New DAL.Tables.SEDES
                        result.WhereParameter.Add(DAL.Tables.SEDES.ColumnEnum.SEDE_ID, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("sede_id")), Nothing, dr("sede_id")))
                        NewItem.SEDE_ID = CType(result.Items(0), Entities.Tables.SEDES)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.baja = IIf(Convert.IsDBNull(dr("baja")), Nothing, dr("baja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HABITACIONES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HABITACIONES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.HABITACIONES) As Boolean

            Try
                _commandText = "_Habitaciones_REMOVE"
                Dim Vhabitacion_id As New SQLParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.habitacion_id)
                Dim Vsede_id As New SQLParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sede_id.SEDE_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SQLParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Habitaciones_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.HABITACIONES) As Boolean

            Try
                _commandText = "_Habitaciones_UPDATE"

                Dim Vhabitacion_id As New SQLParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.habitacion_id)
                Dim Vdescripcion As New SQLParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.descripcion)
                Dim Vsede_id As New SQLParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.sede_id.sede_id)
                Dim Vbaja As New SQLParameter("@baja", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.baja)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SQLParameter = {Vhabitacion_id, Vdescripcion, Vsede_id, Vbaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.HABITACIONES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _WhereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _WhereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : lunes, 18 de abril de 2016
        ''' </summary>
        ''' <remarks> Represents HABITACIONES single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.HABITACIONES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla HABITACIONES
        ''' Fecha de Creación  : lunes, 18 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla HABITACIONES. </remarks>
        Public Class ColumnNames
            Public Const HABITACION_ID As String = "HABITACION_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const SEDE_ID As String = "SEDE_ID"
            Public Const BAJA As String = "BAJA"
        End Class ' ColumnNames
    End Class ' HABITACIONES

    Public Class EST_LABORATORIOCAB
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            id_solicitud
            paciente_id
            fechaSolicitud
            tipo
            otrosEstudios
            observacionesMed
            observacionesBioq
            estado_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.EST_LABORATORIOCAB)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.EST_LABORATORIOCAB) As Entities.Joins.EST_LABORATORIOCAB

            Try
                _commandText = "_EST_LABORATORIOCAB_ADD"
                Dim VPKid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VfechaSolicitud As New SqlParameter("@fechaSolicitud", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHASOLICITUD = Date.MinValue, Nothing, Item.FECHASOLICITUD))
                Dim Vtipo As New SqlParameter("@tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim VotrosEstudios As New SqlParameter("@otrosEstudios", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OTROSESTUDIOS)
                Dim VobservacionesMed As New SqlParameter("@observacionesMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESMED)
                Dim VobservacionesBioq As New SqlParameter("@observacionesBioq", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESBIOQ)
                Dim VPKestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKid_solicitud, Vpaciente_id, VfechaSolicitud, Vtipo, VotrosEstudios, VobservacionesMed, VobservacionesBioq, VPKestado_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_SOLICITUD = VPKid_solicitud.Value
                    'Item.ESTADO_ID = vFKestado_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.EST_LABORATORIOCAB)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioCab_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    NewItem.ID_SOLICITUD = IIf(Convert.IsDBNull(dr("id_solicitud")), Nothing, dr("id_solicitud"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.FECHASOLICITUD = IIf(Convert.IsDBNull(dr("fechaSolicitud")), Nothing, dr("fechaSolicitud"))
                    NewItem.TIPO = IIf(Convert.IsDBNull(dr("tipo")), Nothing, dr("tipo"))
                    NewItem.OTROSESTUDIOS = IIf(Convert.IsDBNull(dr("otrosEstudios")), Nothing, dr("otrosEstudios"))
                    NewItem.OBSERVACIONESMED = IIf(Convert.IsDBNull(dr("observacionesMed")), Nothing, dr("observacionesMed"))
                    NewItem.OBSERVACIONESBIOQ = IIf(Convert.IsDBNull(dr("observacionesBioq")), Nothing, dr("observacionesBioq"))
                    Try
                        Dim result As New DAL.Tables.EST_LABORATORIOESTADOS
                        result.WhereParameter.Add(DAL.Tables.EST_LABORATORIOESTADOS.ColumnEnum.estado_id, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id")))
                        'NewItem.ESTADO_ID = CType(result.Items(0), Entities.Tables.EST_LABORATORIOESTADOS)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOCAB")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOCAB")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.EST_LABORATORIOCAB) As Boolean

            Try
                _commandText = "_EST_LaboratorioCab_REMOVE"
                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioCab_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.EST_LABORATORIOCAB) As Boolean

            Try
                _commandText = "_EST_LaboratorioCab_UPDATE"

                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VfechaSolicitud As New SqlParameter("@fechaSolicitud", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHASOLICITUD = Date.MinValue, Nothing, Item.FECHASOLICITUD))
                Dim Vtipo As New SqlParameter("@tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim VotrosEstudios As New SqlParameter("@otrosEstudios", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OTROSESTUDIOS)
                Dim VobservacionesMed As New SqlParameter("@observacionesMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESMED)
                Dim VobservacionesBioq As New SqlParameter("@observacionesBioq", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESBIOQ)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vid_solicitud, Vpaciente_id, VfechaSolicitud, Vtipo, VotrosEstudios, VobservacionesMed, VobservacionesBioq, Vestado_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.EST_LABORATORIOCAB)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : martes, 20 de septiembre de 2016
        ''' </summary>
        ''' <remarks> Represents EST_LABORATORIOCAB single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.EST_LABORATORIOCAB
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIOCAB
        ''' Fecha de Creación  : martes, 20 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIOCAB. </remarks>
        Public Class ColumnNames
            Public Const ID_SOLICITUD As String = "ID_SOLICITUD"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const FECHASOLICITUD As String = "FECHASOLICITUD"
            Public Const TIPO As String = "TIPO"
            Public Const OTROSESTUDIOS As String = "OTROSESTUDIOS"
            Public Const OBSERVACIONESMED As String = "OBSERVACIONESMED"
            Public Const OBSERVACIONESBIOQ As String = "OBSERVACIONESBIOQ"
            Public Const ESTADO_ID As String = "ESTADO_ID"
        End Class ' ColumnNames
    End Class ' EST_LABORATORIOCAB


    ''' <summary>
    ''' Class Name   : EST_LABORATORIOITEMS
    ''' Description  :  (Resultset)  
    ''' Creation Date: martes, 20 de septiembre de 2016
    ''' </summary>
    ''' <remarks> Represents EST_LABORATORIOITEMS resultset. </remarks>

    Public Class EST_LABORATORIOITEMS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            id_solicitud
            nroItem
            estudio
            tipoEstudio
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Joins.EST_LABORATORIOITEMS)
        Protected _aggregateItemList As New ArrayList
        Private result As Boolean

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Adds a row in database
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Joins.EST_LABORATORIOITEMS) As Entities.Joins.EST_LABORATORIOITEMS

            Try
                _commandText = "_EST_LABORATORIOITEMS_ADD"
                Dim VPKid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Vestudio As New SqlParameter("@estudio", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTUDIO_ID)
                Dim VtipoEstudio As New SqlParameter("@tipoEstudio", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {VPKid_solicitud, vPKnroItem, Vestudio, VtipoEstudio, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_SOLICITUD = VPKid_solicitud.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Returns a resultset
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Joins.EST_LABORATORIOITEMS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioItems_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New ITEM
                    Try
                        Dim result As New DAL.Joins.EST_LABORATORIOCAB
                        result.WhereParameter.Add(DAL.Joins.EST_LABORATORIOCAB.ColumnEnum.id_solicitud, SqlEnums.OperandEnum.Equal, IIf(Convert.IsDBNull(dr("id_solicitud")), Nothing, dr("id_solicitud")))
                        ' NewItem.ID_SOLICITUD = CType(result.Items(0), Entities.Joins.EST_LABORATORIOCAB)
                    Catch ex As Exception
                        RaiseEvent OnError(ex)
                    End Try
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estudio")), Nothing, dr("estudio"))
                    ' NewItem.NROITEM = IIf(Convert.IsDBNull(dr("tipoEstudio")), Nothing, dr("tipoEstudio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOITEMS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM collection from Datasource
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOITEMS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Removes ITEM single instance form Datasource
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Joins.EST_LABORATORIOITEMS) As Boolean

            Try
                _commandText = "_EST_LaboratorioItems_REMOVE"
                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioItems_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function Update(ByVal Item As Entities.Joins.EST_LABORATORIOITEMS) As Boolean

            Try
                _commandText = "_EST_LaboratorioItems_UPDATE"

                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Vestudio As New SqlParameter("@estudio", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTUDIO_ID)
                Dim VtipoEstudio As New SqlParameter("@tipoEstudio", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vid_solicitud, VnroItem, Vestudio, VtipoEstudio, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        Public ReadOnly Property Resultset() As List(Of Entities.Joins.EST_LABORATORIOITEMS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Tooo much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Too much arguments for query.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Bad Overload")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Converting value")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' Class Name    : ITEM 
        ''' Description   :  (Single instance)  
        ''' Creation Date : martes, 20 de septiembre de 2016
        ''' </summary>
        ''' <remarks> Represents EST_LABORATORIOITEMS single record instance. </remarks>
        Public Class ITEM
            Inherits Entities.Joins.EST_LABORATORIOITEMS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIOITEMS
        ''' Fecha de Creación  : martes, 20 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIOITEMS. </remarks>
        Public Class ColumnNames
            Public Const ID_SOLICITUD As String = "ID_SOLICITUD"
            Public Const NROITEM As String = "NROITEM"
            Public Const ESTUDIO As String = "ESTUDIO"
            Public Const TIPOESTUDIO As String = "TIPOESTUDIO"
        End Class ' ColumnNames
    End Class ' EST_LABORATORIOITEMS

End Namespace 'Joins 
