 ' Generated by SOLAR Generation Studio .
 ' Plugin Version: 1.0.0.0
Imports System.Collections.Generic
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports Solar.DataHelper

Namespace Procedures
    Public Class MED_GET_MEDICAMENTO_BEJERMAN
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_MEDICAMENTO_BEJERMAN)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal medicamento_id As String) As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_BEJERMAN)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_MEDICAMENTO_BEJERMAN"

                Dim VMEDICAMENTO_ID As New SqlParameter("@MEDICAMENTO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, medicamento_id)
                Dim params() As SqlParameter = {VMEDICAMENTO_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_MEDICAMENTO_BEJERMAN
                    NewItem.art_codgen = IIf(Convert.IsDBNull(dr("art_CodGen")), Nothing, dr("art_CodGen"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.artele_desc2 = IIf(Convert.IsDBNull(dr("artele_Desc2")), Nothing, dr("artele_Desc2"))
                    NewItem.artele_desc1 = IIf(Convert.IsDBNull(dr("artele_Desc1")), Nothing, dr("artele_Desc1"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_BEJERMAN)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_MEDICAMENTO_BEJERMAN
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_BEJERMAN
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_BEJERMAN. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTELE_DESC2 As String = "ARTELE_DESC2"
            Public Const ARTELE_DESC1 As String = "ARTELE_DESC1"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_MEDICAMENTO_INDICACION_MEDICA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_MEDICAMENTO_INDICACION_MEDICA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal medicamento_id As String, ByVal inactivo As Boolean) As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_INDICACION_MEDICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_MEDICAMENTO_INDICACION_MEDICA"

                Dim VMEDICAMENTO_ID As New SqlParameter("@MEDICAMENTO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, medicamento_id)
                Dim VINACTIVO As New SqlParameter("@INACTIVO", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, inactivo)
                Dim params() As SqlParameter = {VMEDICAMENTO_ID, VINACTIVO}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_MEDICAMENTO_INDICACION_MEDICA
                    NewItem.medicamento_via_id = IIf(Convert.IsDBNull(dr("medicamento_via_id")), Nothing, dr("medicamento_via_id"))
                    NewItem.medicamento_id = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.medicamento = IIf(Convert.IsDBNull(dr("medicamento")), Nothing, dr("medicamento"))
                    NewItem.presentacion_id = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.presentacion = IIf(Convert.IsDBNull(dr("presentacion")), Nothing, dr("presentacion"))
                    NewItem.unidaddemedida_id = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.unidaddemedida = IIf(Convert.IsDBNull(dr("unidadDeMedida")), Nothing, dr("unidadDeMedida"))
                    NewItem.bejermanalta = IIf(Convert.IsDBNull(dr("bejermanAlta")), Nothing, dr("bejermanAlta"))
                    NewItem.inactivo = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_INDICACION_MEDICA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_MEDICAMENTO_INDICACION_MEDICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_INDICACION_MEDICA
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_INDICACION_MEDICA. </remarks>
        Public Class ColumnNames
            Public Const MEDICAMENTO_VIA_ID As String = "MEDICAMENTO_VIA_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const MEDICAMENTO As String = "MEDICAMENTO"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const UNIDADDEMEDIDA As String = "UNIDADDEMEDIDA"
            Public Const BEJERMANALTA As String = "BEJERMANALTA"
            Public Const INACTIVO As String = "INACTIVO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_MEDICAMENTO_SOLICITADO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_MEDICAMENTO_SOLICITADO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal autoriza As Boolean, ByVal pendiente As Boolean) As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_SOLICITADO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_MEDICAMENTO_SOLICITADO"

                Dim VAUTORIZA As New SqlParameter("@AUTORIZA", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, autoriza)
                Dim VPENDIENTE As New SqlParameter("@PENDIENTE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, pendiente)
                Dim params() As SqlParameter = {VAUTORIZA, VPENDIENTE}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_MEDICAMENTO_SOLICITADO
                    NewItem.medicamento_id = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.bejerman_id = IIf(Convert.IsDBNull(dr("bejerman_id")), Nothing, dr("bejerman_id"))
                    NewItem.medicamento = IIf(Convert.IsDBNull(dr("medicamento")), Nothing, dr("medicamento"))
                    NewItem.presentacion_id = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.presentacion = IIf(Convert.IsDBNull(dr("presentacion")), Nothing, dr("presentacion"))
                    NewItem.unidaddemedida_id = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.unidaddemedida = IIf(Convert.IsDBNull(dr("unidadDeMedida")), Nothing, dr("unidadDeMedida"))
                    NewItem.autoriza = IIf(Convert.IsDBNull(dr("autoriza")), Nothing, dr("autoriza"))
                    NewItem.suministracompra = IIf(Convert.IsDBNull(dr("suministraCompra")), Nothing, dr("suministraCompra"))
                    NewItem.usuariosolicita_id = IIf(Convert.IsDBNull(dr("usuarioSolicita_id")), Nothing, dr("usuarioSolicita_id"))
                    NewItem.usuariosolicita = IIf(Convert.IsDBNull(dr("usuarioSolicita")), Nothing, dr("usuarioSolicita"))
                    NewItem.fechasolicita = IIf(Convert.IsDBNull(dr("fechaSolicita")), Nothing, dr("fechaSolicita"))
                    NewItem.usuarioautoriza_id = IIf(Convert.IsDBNull(dr("usuarioAutoriza_id")), Nothing, dr("usuarioAutoriza_id"))
                    NewItem.usuarioautoriza = IIf(Convert.IsDBNull(dr("usuarioAutoriza")), Nothing, dr("usuarioAutoriza"))
                    NewItem.fechaautoriza = IIf(Convert.IsDBNull(dr("fechaAutoriza")), Nothing, dr("fechaAutoriza"))
                    NewItem.pendiente = IIf(Convert.IsDBNull(dr("pendiente")), Nothing, dr("pendiente"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_SOLICITADO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_MEDICAMENTO_SOLICITADO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_SOLICITADO
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_SOLICITADO. </remarks>
        Public Class ColumnNames
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const BEJERMAN_ID As String = "BEJERMAN_ID"
            Public Const MEDICAMENTO As String = "MEDICAMENTO"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const UNIDADDEMEDIDA As String = "UNIDADDEMEDIDA"
            Public Const AUTORIZA As String = "AUTORIZA"
            Public Const SUMINISTRACOMPRA As String = "SUMINISTRACOMPRA"
            Public Const USUARIOSOLICITA_ID As String = "USUARIOSOLICITA_ID"
            Public Const USUARIOSOLICITA As String = "USUARIOSOLICITA"
            Public Const FECHASOLICITA As String = "FECHASOLICITA"
            Public Const USUARIOAUTORIZA_ID As String = "USUARIOAUTORIZA_ID"
            Public Const USUARIOAUTORIZA As String = "USUARIOAUTORIZA"
            Public Const FECHAAUTORIZA As String = "FECHAAUTORIZA"
            Public Const PENDIENTE As String = "PENDIENTE"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_DIAGNOSTICO_PACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_PACIENTE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32) As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_PACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_DIAGNOSTICO_PACIENTE"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim params() As SqlParameter = {VPACIENTE_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_DIAGNOSTICO_PACIENTE
                    NewItem.diagnostico_id = IIf(Convert.IsDBNull(dr("diagnostico_id")), Nothing, dr("diagnostico_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.principalcapituloingreso_id = IIf(Convert.IsDBNull(dr("principalCapituloIngreso_id")), Nothing, dr("principalCapituloIngreso_id"))
                    NewItem.principalrubroingreso_id = IIf(Convert.IsDBNull(dr("principalRubroIngreso_id")), Nothing, dr("principalRubroIngreso_id"))
                    NewItem.principalsubrubroingreso_id = IIf(Convert.IsDBNull(dr("principalSubRubroIngreso_id")), Nothing, dr("principalSubRubroIngreso_id"))
                    NewItem.principalitemingreso_id = IIf(Convert.IsDBNull(dr("principalItemIngreso_id")), Nothing, dr("principalItemIngreso_id"))
                    NewItem.secundariocapituloingreso_id = IIf(Convert.IsDBNull(dr("secundarioCapituloIngreso_id")), Nothing, dr("secundarioCapituloIngreso_id"))
                    NewItem.secundariorubroingreso_id = IIf(Convert.IsDBNull(dr("secundarioRubroIngreso_id")), Nothing, dr("secundarioRubroIngreso_id"))
                    NewItem.secundariosubrubroingreso_id = IIf(Convert.IsDBNull(dr("secundarioSubRubroIngreso_id")), Nothing, dr("secundarioSubRubroIngreso_id"))
                    NewItem.secundarioitemingreso_id = IIf(Convert.IsDBNull(dr("secundarioItemIngreso_id")), Nothing, dr("secundarioItemIngreso_id"))
                    NewItem.terciariocapituloingreso_id = IIf(Convert.IsDBNull(dr("terciarioCapituloIngreso_id")), Nothing, dr("terciarioCapituloIngreso_id"))
                    NewItem.terciariorubroingreso_id = IIf(Convert.IsDBNull(dr("terciarioRubroIngreso_id")), Nothing, dr("terciarioRubroIngreso_id"))
                    NewItem.terciariosubrubroingreso_id = IIf(Convert.IsDBNull(dr("terciarioSubRubroIngreso_id")), Nothing, dr("terciarioSubRubroIngreso_id"))
                    NewItem.terciarioitemingreso_id = IIf(Convert.IsDBNull(dr("terciarioItemIngreso_id")), Nothing, dr("terciarioItemIngreso_id"))
                    NewItem.principalcapituloegreso_id = IIf(Convert.IsDBNull(dr("principalCapituloEgreso_id")), Nothing, dr("principalCapituloEgreso_id"))
                    NewItem.principalrubroegreso_id = IIf(Convert.IsDBNull(dr("principalRubroEgreso_id")), Nothing, dr("principalRubroEgreso_id"))
                    NewItem.principalsubrubroegreso_id = IIf(Convert.IsDBNull(dr("principalSubRubroEgreso_id")), Nothing, dr("principalSubRubroEgreso_id"))
                    NewItem.principalitemegreso_id = IIf(Convert.IsDBNull(dr("principalItemEgreso_id")), Nothing, dr("principalItemEgreso_id"))
                    NewItem.secundariocapituloegreso_id = IIf(Convert.IsDBNull(dr("secundarioCapituloEgreso_id")), Nothing, dr("secundarioCapituloEgreso_id"))
                    NewItem.secundariorubroegreso_id = IIf(Convert.IsDBNull(dr("secundarioRubroEgreso_id")), Nothing, dr("secundarioRubroEgreso_id"))
                    NewItem.secundariosubrubroegreso_id = IIf(Convert.IsDBNull(dr("secundarioSubRubroEgreso_id")), Nothing, dr("secundarioSubRubroEgreso_id"))
                    NewItem.secundarioitemegreso_id = IIf(Convert.IsDBNull(dr("secundarioItemEgreso_id")), Nothing, dr("secundarioItemEgreso_id"))
                    NewItem.terciariocapituloegreso_id = IIf(Convert.IsDBNull(dr("terciarioCapituloEgreso_id")), Nothing, dr("terciarioCapituloEgreso_id"))
                    NewItem.terciariorubroegreso_id = IIf(Convert.IsDBNull(dr("terciarioRubroEgreso_id")), Nothing, dr("terciarioRubroEgreso_id"))
                    NewItem.terciariosubrubroegreso_id = IIf(Convert.IsDBNull(dr("terciarioSubRubroEgreso_id")), Nothing, dr("terciarioSubRubroEgreso_id"))
                    NewItem.terciarioitemegreso_id = IIf(Convert.IsDBNull(dr("terciarioItemEgreso_id")), Nothing, dr("terciarioItemEgreso_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_PACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_DIAGNOSTICO_PACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_PACIENTE
        ''' Fecha de Creación  : miércoles, 21 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_PACIENTE. </remarks>
        Public Class ColumnNames
            Public Const DIAGNOSTICO_ID As String = "DIAGNOSTICO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PRINCIPALCAPITULOINGRESO_ID As String = "PRINCIPALCAPITULOINGRESO_ID"
            Public Const PRINCIPALRUBROINGRESO_ID As String = "PRINCIPALRUBROINGRESO_ID"
            Public Const PRINCIPALSUBRUBROINGRESO_ID As String = "PRINCIPALSUBRUBROINGRESO_ID"
            Public Const PRINCIPALITEMINGRESO_ID As String = "PRINCIPALITEMINGRESO_ID"
            Public Const SECUNDARIOCAPITULOINGRESO_ID As String = "SECUNDARIOCAPITULOINGRESO_ID"
            Public Const SECUNDARIORUBROINGRESO_ID As String = "SECUNDARIORUBROINGRESO_ID"
            Public Const SECUNDARIOSUBRUBROINGRESO_ID As String = "SECUNDARIOSUBRUBROINGRESO_ID"
            Public Const SECUNDARIOITEMINGRESO_ID As String = "SECUNDARIOITEMINGRESO_ID"
            Public Const TERCIARIOCAPITULOINGRESO_ID As String = "TERCIARIOCAPITULOINGRESO_ID"
            Public Const TERCIARIORUBROINGRESO_ID As String = "TERCIARIORUBROINGRESO_ID"
            Public Const TERCIARIOSUBRUBROINGRESO_ID As String = "TERCIARIOSUBRUBROINGRESO_ID"
            Public Const TERCIARIOITEMINGRESO_ID As String = "TERCIARIOITEMINGRESO_ID"
            Public Const PRINCIPALCAPITULOEGRESO_ID As String = "PRINCIPALCAPITULOEGRESO_ID"
            Public Const PRINCIPALRUBROEGRESO_ID As String = "PRINCIPALRUBROEGRESO_ID"
            Public Const PRINCIPALSUBRUBROEGRESO_ID As String = "PRINCIPALSUBRUBROEGRESO_ID"
            Public Const PRINCIPALITEMEGRESO_ID As String = "PRINCIPALITEMEGRESO_ID"
            Public Const SECUNDARIOCAPITULOEGRESO_ID As String = "SECUNDARIOCAPITULOEGRESO_ID"
            Public Const SECUNDARIORUBROEGRESO_ID As String = "SECUNDARIORUBROEGRESO_ID"
            Public Const SECUNDARIOSUBRUBROEGRESO_ID As String = "SECUNDARIOSUBRUBROEGRESO_ID"
            Public Const SECUNDARIOITEMEGRESO_ID As String = "SECUNDARIOITEMEGRESO_ID"
            Public Const TERCIARIOCAPITULOEGRESO_ID As String = "TERCIARIOCAPITULOEGRESO_ID"
            Public Const TERCIARIORUBROEGRESO_ID As String = "TERCIARIORUBROEGRESO_ID"
            Public Const TERCIARIOSUBRUBROEGRESO_ID As String = "TERCIARIOSUBRUBROEGRESO_ID"
            Public Const TERCIARIOITEMEGRESO_ID As String = "TERCIARIOITEMEGRESO_ID"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_PHP
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_PHP)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal php_id As Int32) As List(Of Entities.Procedures.PRO_GET_PHP)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_PHP"

                Dim VPHP_ID As New SqlParameter("@PHP_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, php_id)
                Dim params() As SqlParameter = {VPHP_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_PHP
                    NewItem.php_id = IIf(Convert.IsDBNull(dr("php_id")), Nothing, dr("php_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.ml_100 = IIf(Convert.IsDBNull(dr("ml_100")), Nothing, dr("ml_100"))
                    NewItem.ml_250 = IIf(Convert.IsDBNull(dr("ml_250")), Nothing, dr("ml_250"))
                    NewItem.ml_500 = IIf(Convert.IsDBNull(dr("ml_500")), Nothing, dr("ml_500"))
                    NewItem.ml_1000 = IIf(Convert.IsDBNull(dr("ml_1000")), Nothing, dr("ml_1000"))
                    NewItem.bic = IIf(Convert.IsDBNull(dr("bic")), Nothing, dr("bic"))
                    NewItem.gotahora_id = IIf(Convert.IsDBNull(dr("gotaHora_id")), Nothing, dr("gotaHora_id"))
                    NewItem.gota = IIf(Convert.IsDBNull(dr("gota")), Nothing, dr("gota"))
                    NewItem.mlhora = IIf(Convert.IsDBNull(dr("mlHora")), Nothing, dr("mlHora"))
                    NewItem.mldia = IIf(Convert.IsDBNull(dr("mlDia")), Nothing, dr("mlDia"))
                    NewItem.frascouno_id = IIf(Convert.IsDBNull(dr("frascoUno_id")), Nothing, dr("frascoUno_id"))
                    NewItem.frascouno = IIf(Convert.IsDBNull(dr("FrascoUno")), Nothing, dr("FrascoUno"))
                    NewItem.aditivouno_id = IIf(Convert.IsDBNull(dr("aditivoUno_id")), Nothing, dr("aditivoUno_id"))
                    NewItem.aditivouno = IIf(Convert.IsDBNull(dr("aditivoUno")), Nothing, dr("aditivoUno"))
                    NewItem.frascodos_id = IIf(Convert.IsDBNull(dr("frascoDos_id")), Nothing, dr("frascoDos_id"))
                    NewItem.frascodos = IIf(Convert.IsDBNull(dr("FrascoDos")), Nothing, dr("FrascoDos"))
                    NewItem.aditivodos_id = IIf(Convert.IsDBNull(dr("aditivoDos_id")), Nothing, dr("aditivoDos_id"))
                    NewItem.aditivodos = IIf(Convert.IsDBNull(dr("aditivoDos")), Nothing, dr("aditivoDos"))
                    NewItem.frascotres_id = IIf(Convert.IsDBNull(dr("frascoTres_id")), Nothing, dr("frascoTres_id"))
                    NewItem.frascotres = IIf(Convert.IsDBNull(dr("FrascoTres")), Nothing, dr("FrascoTres"))
                    NewItem.aditivotres_id = IIf(Convert.IsDBNull(dr("aditivoTres_id")), Nothing, dr("aditivoTres_id"))
                    NewItem.aditivotres = IIf(Convert.IsDBNull(dr("aditivoTres")), Nothing, dr("aditivoTres"))
                    NewItem.frascocuatro_id = IIf(Convert.IsDBNull(dr("frascoCuatro_id")), Nothing, dr("frascoCuatro_id"))
                    NewItem.frascocuatro = IIf(Convert.IsDBNull(dr("FrascoCuatro")), Nothing, dr("FrascoCuatro"))
                    NewItem.aditivocuatro_id = IIf(Convert.IsDBNull(dr("aditivoCuatro_id")), Nothing, dr("aditivoCuatro_id"))
                    NewItem.aditivocuatro = IIf(Convert.IsDBNull(dr("aditivoCuatro")), Nothing, dr("aditivoCuatro"))
                    NewItem.frascocinco_id = IIf(Convert.IsDBNull(dr("frascoCinco_id")), Nothing, dr("frascoCinco_id"))
                    NewItem.frascocinco = IIf(Convert.IsDBNull(dr("FrascoCinco")), Nothing, dr("FrascoCinco"))
                    NewItem.aditivocinco_id = IIf(Convert.IsDBNull(dr("aditivoCinco_id")), Nothing, dr("aditivoCinco_id"))
                    NewItem.aditivocinco = IIf(Convert.IsDBNull(dr("aditivoCinco")), Nothing, dr("aditivoCinco"))
                    NewItem.frascoseis_id = IIf(Convert.IsDBNull(dr("frascoSeis_id")), Nothing, dr("frascoSeis_id"))
                    NewItem.frascoseis = IIf(Convert.IsDBNull(dr("FrascoSeis")), Nothing, dr("FrascoSeis"))
                    NewItem.aditivoseis_id = IIf(Convert.IsDBNull(dr("aditivoSeis_id")), Nothing, dr("aditivoSeis_id"))
                    NewItem.aditivoseis = IIf(Convert.IsDBNull(dr("aditivoSeis")), Nothing, dr("aditivoSeis"))
                    NewItem.frascosiete_id = IIf(Convert.IsDBNull(dr("frascoSiete_id")), Nothing, dr("frascoSiete_id"))
                    NewItem.frascosiete = IIf(Convert.IsDBNull(dr("FrascoSiete")), Nothing, dr("FrascoSiete"))
                    NewItem.aditivosiete_id = IIf(Convert.IsDBNull(dr("aditivoSiete_id")), Nothing, dr("aditivoSiete_id"))
                    NewItem.aditivosiete = IIf(Convert.IsDBNull(dr("aditivoSiete")), Nothing, dr("aditivoSiete"))
                    NewItem.frascoocho_id = IIf(Convert.IsDBNull(dr("frascoOcho_id")), Nothing, dr("frascoOcho_id"))
                    NewItem.frascoocho = IIf(Convert.IsDBNull(dr("FrascoOcho")), Nothing, dr("FrascoOcho"))
                    NewItem.aditivoocho_id = IIf(Convert.IsDBNull(dr("aditivoOcho_id")), Nothing, dr("aditivoOcho_id"))
                    NewItem.aditivoocho = IIf(Convert.IsDBNull(dr("aditivoOcho")), Nothing, dr("aditivoOcho"))
                    NewItem.frasconueve_id = IIf(Convert.IsDBNull(dr("frascoNueve_id")), Nothing, dr("frascoNueve_id"))
                    NewItem.frasconuevo = IIf(Convert.IsDBNull(dr("FrascoNuevo")), Nothing, dr("FrascoNuevo"))
                    NewItem.aditivonueve_id = IIf(Convert.IsDBNull(dr("aditivoNueve_id")), Nothing, dr("aditivoNueve_id"))
                    NewItem.aditivonueve = IIf(Convert.IsDBNull(dr("aditivoNueve")), Nothing, dr("aditivoNueve"))
                    NewItem.frascodiez_id = IIf(Convert.IsDBNull(dr("frascoDiez_id")), Nothing, dr("frascoDiez_id"))
                    NewItem.frascodiez = IIf(Convert.IsDBNull(dr("FrascoDiez")), Nothing, dr("FrascoDiez"))
                    NewItem.aditivodiez_id = IIf(Convert.IsDBNull(dr("aditivoDiez_id")), Nothing, dr("aditivoDiez_id"))
                    NewItem.aditivodiez = IIf(Convert.IsDBNull(dr("aditivoDiez")), Nothing, dr("aditivoDiez"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_PHP)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_PHP
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_PHP
        ''' Fecha de Creación  : viernes, 16 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_PHP. </remarks>
        Public Class ColumnNames
            Public Const PHP_ID As String = "PHP_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const ML_100 As String = "ML_100"
            Public Const ML_250 As String = "ML_250"
            Public Const ML_500 As String = "ML_500"
            Public Const ML_1000 As String = "ML_1000"
            Public Const BIC As String = "BIC"
            Public Const GOTAHORA_ID As String = "GOTAHORA_ID"
            Public Const GOTA As String = "GOTA"
            Public Const MLHORA As String = "MLHORA"
            Public Const MLDIA As String = "MLDIA"
            Public Const FRASCOUNO_ID As String = "FRASCOUNO_ID"
            Public Const FRASCOUNO As String = "FRASCOUNO"
            Public Const ADITIVOUNO_ID As String = "ADITIVOUNO_ID"
            Public Const ADITIVOUNO As String = "ADITIVOUNO"
            Public Const FRASCODOS_ID As String = "FRASCODOS_ID"
            Public Const FRASCODOS As String = "FRASCODOS"
            Public Const ADITIVODOS_ID As String = "ADITIVODOS_ID"
            Public Const ADITIVODOS As String = "ADITIVODOS"
            Public Const FRASCOTRES_ID As String = "FRASCOTRES_ID"
            Public Const FRASCOTRES As String = "FRASCOTRES"
            Public Const ADITIVOTRES_ID As String = "ADITIVOTRES_ID"
            Public Const ADITIVOTRES As String = "ADITIVOTRES"
            Public Const FRASCOCUATRO_ID As String = "FRASCOCUATRO_ID"
            Public Const FRASCOCUATRO As String = "FRASCOCUATRO"
            Public Const ADITIVOCUATRO_ID As String = "ADITIVOCUATRO_ID"
            Public Const ADITIVOCUATRO As String = "ADITIVOCUATRO"
            Public Const FRASCOCINCO_ID As String = "FRASCOCINCO_ID"
            Public Const FRASCOCINCO As String = "FRASCOCINCO"
            Public Const ADITIVOCINCO_ID As String = "ADITIVOCINCO_ID"
            Public Const ADITIVOCINCO As String = "ADITIVOCINCO"
            Public Const FRASCOSEIS_ID As String = "FRASCOSEIS_ID"
            Public Const FRASCOSEIS As String = "FRASCOSEIS"
            Public Const ADITIVOSEIS_ID As String = "ADITIVOSEIS_ID"
            Public Const ADITIVOSEIS As String = "ADITIVOSEIS"
            Public Const FRASCOSIETE_ID As String = "FRASCOSIETE_ID"
            Public Const FRASCOSIETE As String = "FRASCOSIETE"
            Public Const ADITIVOSIETE_ID As String = "ADITIVOSIETE_ID"
            Public Const ADITIVOSIETE As String = "ADITIVOSIETE"
            Public Const FRASCOOCHO_ID As String = "FRASCOOCHO_ID"
            Public Const FRASCOOCHO As String = "FRASCOOCHO"
            Public Const ADITIVOOCHO_ID As String = "ADITIVOOCHO_ID"
            Public Const ADITIVOOCHO As String = "ADITIVOOCHO"
            Public Const FRASCONUEVE_ID As String = "FRASCONUEVE_ID"
            Public Const FRASCONUEVO As String = "FRASCONUEVO"
            Public Const ADITIVONUEVE_ID As String = "ADITIVONUEVE_ID"
            Public Const ADITIVONUEVE As String = "ADITIVONUEVE"
            Public Const FRASCODIEZ_ID As String = "FRASCODIEZ_ID"
            Public Const FRASCODIEZ As String = "FRASCODIEZ"
            Public Const ADITIVODIEZ_ID As String = "ADITIVODIEZ_ID"
            Public Const ADITIVODIEZ As String = "ADITIVODIEZ"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_PHP_ADITIVO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_PHP_ADITIVO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.PRO_GET_PHP_ADITIVO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_PHP_ADITIVO"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_PHP_ADITIVO
                    NewItem.art_codgen = IIf(Convert.IsDBNull(dr("art_CodGen")), Nothing, dr("art_CodGen"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.artele_desc1 = IIf(Convert.IsDBNull(dr("artele_Desc1")), Nothing, dr("artele_Desc1"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_PHP_ADITIVO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_PHP_ADITIVO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_PHP_ADITIVO
        ''' Fecha de Creación  : jueves, 15 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_PHP_ADITIVO. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTELE_DESC1 As String = "ARTELE_DESC1"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_MEDICAMENTO_VIA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_MEDICAMENTO_VIA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal medicamento_id As String, ByVal inactivo As Boolean) As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_VIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_MEDICAMENTO_VIA"

                Dim VMEDICAMENTO_ID As New SqlParameter("@MEDICAMENTO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, medicamento_id)
                Dim VINACTIVO As New SqlParameter("@INACTIVO", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, inactivo)
                Dim params() As SqlParameter = {VMEDICAMENTO_ID, VINACTIVO}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_MEDICAMENTO_VIA
                    NewItem.medicamento_via_id = IIf(Convert.IsDBNull(dr("medicamento_via_id")), Nothing, dr("medicamento_via_id"))
                    NewItem.medicamento_id = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.medicamentobejerman = IIf(Convert.IsDBNull(dr("medicamentoBejerman")), Nothing, dr("medicamentoBejerman"))
                    NewItem.via_id = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.inactivo = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_MEDICAMENTO_VIA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_MEDICAMENTO_VIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_VIA
        ''' Fecha de Creación  : martes, 27 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_MEDICAMENTO_VIA. </remarks>
        Public Class ColumnNames
            Public Const MEDICAMENTO_VIA_ID As String = "MEDICAMENTO_VIA_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const MEDICAMENTOBEJERMAN As String = "MEDICAMENTOBEJERMAN"
            Public Const VIA_ID As String = "VIA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const INACTIVO As String = "INACTIVO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_VIA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_VIA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal inactivo As String) As List(Of Entities.Procedures.MED_GET_VIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_VIA"

                Dim VINACTIVO As New SqlParameter("@INACTIVO", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, inactivo)
                Dim params() As SqlParameter = {VINACTIVO}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_VIA
                    NewItem.via_id = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.inactivo = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_VIA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_VIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_VIA
        ''' Fecha de Creación  : miércoles, 28 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_VIA. </remarks>
        Public Class ColumnNames
            Public Const VIA_ID As String = "VIA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const INACTIVO As String = "INACTIVO"
        End Class ' ColumnNames
    End Class
    Public Class MAP_GET_HORARIO_MEDICAMENTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MAP_GET_HORARIO_MEDICAMENTO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32, ByVal hs As String) As List(Of Entities.Procedures.MAP_GET_HORARIO_MEDICAMENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MAP_GET_HORARIO_MEDICAMENTO"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim VHS As New SqlParameter("@HS", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs)
                Dim params() As SqlParameter = {VPACIENTE_ID, VHS}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MAP_GET_HORARIO_MEDICAMENTO
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.nombre = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.apellido = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.medicamento_id = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.droga = IIf(Convert.IsDBNull(dr("Droga")), Nothing, dr("Droga"))
                    NewItem.presentacion = IIf(Convert.IsDBNull(dr("presentacion")), Nothing, dr("presentacion"))
                    NewItem.dosis = IIf(Convert.IsDBNull(dr("Dosis")), Nothing, dr("Dosis"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.hs_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.hs_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.hs_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.hs_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.hs_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.hs_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.hs_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.hs_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.hs_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.hs_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.hs_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.hs_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.hs_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.hs_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.hs_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.hs_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.hs_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.hs_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.hs_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.hs_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.hs_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.hs_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.hs_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.hs_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.hs_sh = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MAP_GET_HORARIO_MEDICAMENTO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MAP_GET_HORARIO_MEDICAMENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MAP_GET_HORARIO_MEDICAMENTO
        ''' Fecha de Creación  : jueves, 8 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MAP_GET_HORARIO_MEDICAMENTO. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const DROGA As String = "DROGA"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const DOSIS As String = "DOSIS"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
        End Class ' ColumnNames
    End Class
    Public Class GET_PACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.GET_PACIENTE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32) As List(Of Entities.Procedures.GET_PACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "GET_PACIENTE"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim params() As SqlParameter = {VPACIENTE_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.GET_PACIENTE
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.numerohistoriaclinica = IIf(Convert.IsDBNull(dr("numeroHistoriaClinica")), Nothing, dr("numeroHistoriaClinica"))
                    NewItem.numerointernacion = IIf(Convert.IsDBNull(dr("numeroInternacion")), Nothing, dr("numeroInternacion"))
                    NewItem.sede_id = IIf(Convert.IsDBNull(dr("sede_id")), Nothing, dr("sede_id"))
                    NewItem.sede = IIf(Convert.IsDBNull(dr("sede")), Nothing, dr("sede"))
                    NewItem.empresa_id = IIf(Convert.IsDBNull(dr("empresa_id")), Nothing, dr("empresa_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.habitacion_id = IIf(Convert.IsDBNull(dr("habitacion_id")), Nothing, dr("habitacion_id"))
                    NewItem.habitacion = IIf(Convert.IsDBNull(dr("habitacion")), Nothing, dr("habitacion"))
                    NewItem.apellido = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.nombre = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.genero = IIf(Convert.IsDBNull(dr("genero")), Nothing, dr("genero"))
                    NewItem.fechanacimiento = IIf(Convert.IsDBNull(dr("fechaNacimiento")), Nothing, dr("fechaNacimiento"))
                    NewItem.tipodocumento_id = IIf(Convert.IsDBNull(dr("tipoDocumento_id")), Nothing, dr("tipoDocumento_id"))
                    NewItem.documento = IIf(Convert.IsDBNull(dr("documento")), Nothing, dr("documento"))
                    NewItem.numerodocumento = IIf(Convert.IsDBNull(dr("numeroDocumento")), Nothing, dr("numeroDocumento"))
                    NewItem.diagnostico_id = IIf(Convert.IsDBNull(dr("diagnostico_id")), Nothing, dr("diagnostico_id"))
                    NewItem.fechaingreso = IIf(Convert.IsDBNull(dr("fechaIngreso")), Nothing, dr("fechaIngreso"))
                    NewItem.acompaniante = IIf(Convert.IsDBNull(dr("acompaniante")), Nothing, dr("acompaniante"))
                    NewItem.itempendiente = IIf(Convert.IsDBNull(dr("itemPendiente")), Nothing, dr("itemPendiente"))
                    NewItem.prealta = IIf(Convert.IsDBNull(dr("preAlta")), Nothing, dr("preAlta"))
                    NewItem.solicitudestudio = IIf(Convert.IsDBNull(dr("solicitudEstudio")), Nothing, dr("solicitudEstudio"))
                    NewItem.solicitudtraslado = IIf(Convert.IsDBNull(dr("solicitudTraslado")), Nothing, dr("solicitudTraslado"))
                    NewItem.interconsultapendiente = IIf(Convert.IsDBNull(dr("interconsultaPendiente")), Nothing, dr("interconsultaPendiente"))
                    NewItem.altaautorizada = IIf(Convert.IsDBNull(dr("altaAutorizada")), Nothing, dr("altaAutorizada"))
                    NewItem.obrasocial_id = IIf(Convert.IsDBNull(dr("obraSocial_id")), Nothing, dr("obraSocial_id"))
                    NewItem.obrasocial = IIf(Convert.IsDBNull(dr("obraSocial")), Nothing, dr("obraSocial"))
                    NewItem.numeroobrasocial = IIf(Convert.IsDBNull(dr("numeroObraSocial")), Nothing, dr("numeroObraSocial"))
                    NewItem.fechaegreso = IIf(Convert.IsDBNull(dr("fechaEgreso")), Nothing, dr("fechaEgreso"))
                    NewItem.respira = IIf(Convert.IsDBNull(dr("respira")), Nothing, dr("respira"))
                    NewItem.contacto = IIf(Convert.IsDBNull(dr("contacto")), Nothing, dr("contacto"))
                    NewItem.tqt = IIf(Convert.IsDBNull(dr("tqt")), Nothing, dr("tqt"))
                    NewItem.arm = IIf(Convert.IsDBNull(dr("arm")), Nothing, dr("arm"))
                    NewItem.oxigeno = IIf(Convert.IsDBNull(dr("oxigeno")), Nothing, dr("oxigeno"))
                    NewItem.vo = IIf(Convert.IsDBNull(dr("vo")), Nothing, dr("vo"))
                    NewItem.sng = IIf(Convert.IsDBNull(dr("sng")), Nothing, dr("sng"))
                    NewItem.gastro = IIf(Convert.IsDBNull(dr("gastro")), Nothing, dr("gastro"))
                    NewItem.sv = IIf(Convert.IsDBNull(dr("sv")), Nothing, dr("sv"))
                    NewItem.cat = IIf(Convert.IsDBNull(dr("cat")), Nothing, dr("cat"))
                    NewItem.talla = IIf(Convert.IsDBNull(dr("talla")), Nothing, dr("talla"))
                    NewItem.talon = IIf(Convert.IsDBNull(dr("talon")), Nothing, dr("talon"))
                    NewItem.sac = IIf(Convert.IsDBNull(dr("sac")), Nothing, dr("sac"))
                    NewItem.isq = IIf(Convert.IsDBNull(dr("isq")), Nothing, dr("isq"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.paciente_traumatico = IIf(Convert.IsDBNull(dr("paciente_traumatico")), Nothing, dr("paciente_traumatico"))
                    NewItem.txtpactraumatico = IIf(Convert.IsDBNull(dr("txtPacTraumatico")), Nothing, dr("txtPacTraumatico"))
                    NewItem.paciente_judicializado = IIf(Convert.IsDBNull(dr("paciente_judicializado")), Nothing, dr("paciente_judicializado"))
                    NewItem.txtpacjudicializado = IIf(Convert.IsDBNull(dr("txtPacJudicializado")), Nothing, dr("txtPacJudicializado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.GET_PACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.GET_PACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla GET_PACIENTE
        ''' Fecha de Creación  : viernes, 13 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla GET_PACIENTE. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NUMEROHISTORIACLINICA As String = "NUMEROHISTORIACLINICA"
            Public Const NUMEROINTERNACION As String = "NUMEROINTERNACION"
            Public Const SEDE_ID As String = "SEDE_ID"
            Public Const SEDE As String = "SEDE"
            Public Const EMPRESA_ID As String = "EMPRESA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const HABITACION_ID As String = "HABITACION_ID"
            Public Const HABITACION As String = "HABITACION"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const GENERO As String = "GENERO"
            Public Const FECHANACIMIENTO As String = "FECHANACIMIENTO"
            Public Const TIPODOCUMENTO_ID As String = "TIPODOCUMENTO_ID"
            Public Const DOCUMENTO As String = "DOCUMENTO"
            Public Const NUMERODOCUMENTO As String = "NUMERODOCUMENTO"
            Public Const DIAGNOSTICO_ID As String = "DIAGNOSTICO_ID"
            Public Const FECHAINGRESO As String = "FECHAINGRESO"
            Public Const ACOMPANIANTE As String = "ACOMPANIANTE"
            Public Const ITEMPENDIENTE As String = "ITEMPENDIENTE"
            Public Const PREALTA As String = "PREALTA"
            Public Const SOLICITUDESTUDIO As String = "SOLICITUDESTUDIO"
            Public Const SOLICITUDTRASLADO As String = "SOLICITUDTRASLADO"
            Public Const INTERCONSULTAPENDIENTE As String = "INTERCONSULTAPENDIENTE"
            Public Const ALTAAUTORIZADA As String = "ALTAAUTORIZADA"
            Public Const OBRASOCIAL_ID As String = "OBRASOCIAL_ID"
            Public Const OBRASOCIAL As String = "OBRASOCIAL"
            Public Const NUMEROOBRASOCIAL As String = "NUMEROOBRASOCIAL"
            Public Const FECHAEGRESO As String = "FECHAEGRESO"
            Public Const RESPIRA As String = "RESPIRA"
            Public Const CONTACTO As String = "CONTACTO"
            Public Const TQT As String = "TQT"
            Public Const ARM As String = "ARM"
            Public Const OXIGENO As String = "OXIGENO"
            Public Const VO As String = "VO"
            Public Const SNG As String = "SNG"
            Public Const GASTRO As String = "GASTRO"
            Public Const SV As String = "SV"
            Public Const CAT As String = "CAT"
            Public Const TALLA As String = "TALLA"
            Public Const TALON As String = "TALON"
            Public Const SAC As String = "SAC"
            Public Const ISQ As String = "ISQ"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const PACIENTE_TRAUMATICO As String = "PACIENTE_TRAUMATICO"
            Public Const TXTPACTRAUMATICO As String = "TXTPACTRAUMATICO"
            Public Const PACIENTE_JUDICIALIZADO As String = "PACIENTE_JUDICIALIZADO"
            Public Const TXTPACJUDICIALIZADO As String = "TXTPACJUDICIALIZADO"
        End Class ' ColumnNames
    End Class
    Public Class GET_PACIENTE_POR_SEDE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.GET_PACIENTE_POR_SEDE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sede_id As Int32, ByVal piso_id As Int32) As List(Of Entities.Procedures.GET_PACIENTE_POR_SEDE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "GET_PACIENTE_POR_SEDE"

                Dim VSEDE_ID As New SqlParameter("@SEDE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sede_id)
                Dim VPISO_ID As New SqlParameter("@PISO_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, piso_id)
                Dim params() As SqlParameter = {VSEDE_ID, VPISO_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.GET_PACIENTE_POR_SEDE
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.numerointernacion = IIf(Convert.IsDBNull(dr("numeroInternacion")), Nothing, dr("numeroInternacion"))
                    NewItem.sede_id = IIf(Convert.IsDBNull(dr("sede_id")), Nothing, dr("sede_id"))
                    NewItem.sede = IIf(Convert.IsDBNull(dr("sede")), Nothing, dr("sede"))
                    NewItem.empresa_id = IIf(Convert.IsDBNull(dr("empresa_id")), Nothing, dr("empresa_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.habitacion_id = IIf(Convert.IsDBNull(dr("habitacion_id")), Nothing, dr("habitacion_id"))
                    NewItem.habitacion = IIf(Convert.IsDBNull(dr("habitacion")), Nothing, dr("habitacion"))
                    NewItem.piso_id = IIf(Convert.IsDBNull(dr("piso_id")), Nothing, dr("piso_id"))
                    NewItem.piso = IIf(Convert.IsDBNull(dr("piso")), Nothing, dr("piso"))
                    NewItem.nombre = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.apellido = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.genero = IIf(Convert.IsDBNull(dr("genero")), Nothing, dr("genero"))
                    NewItem.fechanacimiento = IIf(Convert.IsDBNull(dr("fechaNacimiento")), Nothing, dr("fechaNacimiento"))
                    NewItem.tipodocumento_id = IIf(Convert.IsDBNull(dr("tipoDocumento_id")), Nothing, dr("tipoDocumento_id"))
                    NewItem.tipodocumento = IIf(Convert.IsDBNull(dr("tipoDocumento")), Nothing, dr("tipoDocumento"))
                    NewItem.numerodocumento = IIf(Convert.IsDBNull(dr("numeroDocumento")), Nothing, dr("numeroDocumento"))
                    NewItem.diagnostico_id = IIf(Convert.IsDBNull(dr("diagnostico_id")), Nothing, dr("diagnostico_id"))
                    NewItem.fechaingreso = IIf(Convert.IsDBNull(dr("fechaIngreso")), Nothing, dr("fechaIngreso"))
                    NewItem.obrasocial_id = IIf(Convert.IsDBNull(dr("obraSocial_id")), Nothing, dr("obraSocial_id"))
                    NewItem.obrasocial = IIf(Convert.IsDBNull(dr("obraSocial")), Nothing, dr("obraSocial"))
                    NewItem.numeroobrasocial = IIf(Convert.IsDBNull(dr("numeroObraSocial")), Nothing, dr("numeroObraSocial"))
                    NewItem.fechaegreso = IIf(Convert.IsDBNull(dr("fechaEgreso")), Nothing, dr("fechaEgreso"))
                    NewItem.motivoegreso_id = IIf(Convert.IsDBNull(dr("motivoEgreso_id")), Nothing, dr("motivoEgreso_id"))
                    NewItem.motivoegreso = IIf(Convert.IsDBNull(dr("motivoEgreso")), Nothing, dr("motivoEgreso"))
                    NewItem.acompaniante = IIf(Convert.IsDBNull(dr("acompaniante")), Nothing, dr("acompaniante"))
                    NewItem.itempendiente = IIf(Convert.IsDBNull(dr("itemPendiente")), Nothing, dr("itemPendiente"))
                    NewItem.prealta = IIf(Convert.IsDBNull(dr("preAlta")), Nothing, dr("preAlta"))
                    NewItem.solicitudestudio = IIf(Convert.IsDBNull(dr("solicitudEstudio")), Nothing, dr("solicitudEstudio"))
                    NewItem.solicitudtraslado = IIf(Convert.IsDBNull(dr("solicitudTraslado")), Nothing, dr("solicitudTraslado"))
                    NewItem.interconsultapendiente = IIf(Convert.IsDBNull(dr("interconsultaPendiente")), Nothing, dr("interconsultaPendiente"))
                    NewItem.altaautorizada = IIf(Convert.IsDBNull(dr("altaAutorizada")), Nothing, dr("altaAutorizada"))
                    NewItem.hs_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.hs_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.hs_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.hs_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.hs_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.hs_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.hs_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.hs_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.hs_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.hs_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.hs_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.hs_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.hs_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.hs_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.hs_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.hs_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.hs_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.hs_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.hs_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.hs_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.hs_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.hs_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.hs_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.hs_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.hs_sh = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechamodificacion")), Nothing, dr("fechamodificacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.GET_PACIENTE_POR_SEDE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.GET_PACIENTE_POR_SEDE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla GET_PACIENTE_POR_SEDE
        ''' Fecha de Creación  : martes, 20 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla GET_PACIENTE_POR_SEDE. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NUMEROINTERNACION As String = "NUMEROINTERNACION"
            Public Const SEDE_ID As String = "SEDE_ID"
            Public Const SEDE As String = "SEDE"
            Public Const EMPRESA_ID As String = "EMPRESA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const HABITACION_ID As String = "HABITACION_ID"
            Public Const HABITACION As String = "HABITACION"
            Public Const PISO_ID As String = "PISO_ID"
            Public Const PISO As String = "PISO"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const GENERO As String = "GENERO"
            Public Const FECHANACIMIENTO As String = "FECHANACIMIENTO"
            Public Const TIPODOCUMENTO_ID As String = "TIPODOCUMENTO_ID"
            Public Const TIPODOCUMENTO As String = "TIPODOCUMENTO"
            Public Const NUMERODOCUMENTO As String = "NUMERODOCUMENTO"
            Public Const DIAGNOSTICO_ID As String = "DIAGNOSTICO_ID"
            Public Const FECHAINGRESO As String = "FECHAINGRESO"
            Public Const OBRASOCIAL_ID As String = "OBRASOCIAL_ID"
            Public Const OBRASOCIAL As String = "OBRASOCIAL"
            Public Const NUMEROOBRASOCIAL As String = "NUMEROOBRASOCIAL"
            Public Const FECHAEGRESO As String = "FECHAEGRESO"
            Public Const MOTIVOEGRESO_ID As String = "MOTIVOEGRESO_ID"
            Public Const MOTIVOEGRESO As String = "MOTIVOEGRESO"
            Public Const ACOMPANIANTE As String = "ACOMPANIANTE"
            Public Const ITEMPENDIENTE As String = "ITEMPENDIENTE"
            Public Const PREALTA As String = "PREALTA"
            Public Const SOLICITUDESTUDIO As String = "SOLICITUDESTUDIO"
            Public Const SOLICITUDTRASLADO As String = "SOLICITUDTRASLADO"
            Public Const INTERCONSULTAPENDIENTE As String = "INTERCONSULTAPENDIENTE"
            Public Const ALTAAUTORIZADA As String = "ALTAAUTORIZADA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
        End Class ' ColumnNames
    End Class
    Public Class OBTIENEULTIMAHISTORIACLINICA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.OBTIENEULTIMAHISTORIACLINICA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal empresa_id As Int32) As List(Of Entities.Procedures.OBTIENEULTIMAHISTORIACLINICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "OBTIENEULTIMAHISTORIACLINICA"

                Dim VEMPRESA_ID As New SqlParameter("@EMPRESA_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, empresa_id)
                Dim params() As SqlParameter = {VEMPRESA_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.OBTIENEULTIMAHISTORIACLINICA
                    NewItem.ultimahistoriaclinica = IIf(Convert.IsDBNull(dr("ultimaHistoriaClinica")), Nothing, dr("ultimaHistoriaClinica"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.OBTIENEULTIMAHISTORIACLINICA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.OBTIENEULTIMAHISTORIACLINICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla OBTIENEULTIMAHISTORIACLINICA
        ''' Fecha de Creación  : jueves, 25 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla OBTIENEULTIMAHISTORIACLINICA. </remarks>
        Public Class ColumnNames
            Public Const ULTIMAHISTORIACLINICA As String = "ULTIMAHISTORIACLINICA"
        End Class ' ColumnNames
    End Class
    Public Class TRAEOBRASSOCIALES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEOBRASSOCIALES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.TRAEOBRASSOCIALES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEOBRASSOCIALES"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEOBRASSOCIALES
                    NewItem.cli_cod = IIf(Convert.IsDBNull(dr("cli_Cod")), Nothing, dr("cli_Cod"))
                    NewItem.cli_razsoc = IIf(Convert.IsDBNull(dr("cli_RazSoc")), Nothing, dr("cli_RazSoc"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEOBRASSOCIALES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEOBRASSOCIALES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEOBRASSOCIALES
        ''' Fecha de Creación  : miércoles, 20 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEOBRASSOCIALES. </remarks>
        Public Class ColumnNames
            Public Const CLI_COD As String = "CLI_COD"
            Public Const CLI_RAZSOC As String = "CLI_RAZSOC"
        End Class ' ColumnNames
    End Class
    Public Class TRAEHABITACIONESLIBRES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEHABITACIONESLIBRES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sede As Int32, ByVal actualiza As Int32, ByVal habid As Int32) As List(Of Entities.Procedures.TRAEHABITACIONESLIBRES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEHABITACIONESLIBRES"

                Dim VSede As New SqlParameter("@Sede", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sede)
                Dim VActualiza As New SqlParameter("@Actualiza", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, actualiza)
                Dim VHabID As New SqlParameter("@HabID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, habid)
                Dim params() As SqlParameter = {VSede, VActualiza, VHabID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEHABITACIONESLIBRES
                    NewItem.habitacion_id = IIf(Convert.IsDBNull(dr("habitacion_id")), Nothing, dr("habitacion_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEHABITACIONESLIBRES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEHABITACIONESLIBRES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEHABITACIONESLIBRES
        ''' Fecha de Creación  : martes, 26 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEHABITACIONESLIBRES. </remarks>
        Public Class ColumnNames
            Public Const HABITACION_ID As String = "HABITACION_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class
    Public Class TRAEMEDICAMENTOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEMEDICAMENTOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal medicamento_id As String) As List(Of Entities.Procedures.TRAEMEDICAMENTOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEMEDICAMENTOS"

                Dim VMedicamento_id As New SqlParameter("@Medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, medicamento_id)
                Dim params() As SqlParameter = {VMedicamento_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEMEDICAMENTOS
                    NewItem.art_codgen = IIf(Convert.IsDBNull(dr("art_CodGen")), Nothing, dr("art_CodGen"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.artele_desc2 = IIf(Convert.IsDBNull(dr("artele_Desc2")), Nothing, dr("artele_Desc2"))
                    NewItem.artele_desc1 = IIf(Convert.IsDBNull(dr("artele_Desc1")), Nothing, dr("artele_Desc1"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEMEDICAMENTOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEMEDICAMENTOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEMEDICAMENTOS
        ''' Fecha de Creación  : miércoles, 27 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEMEDICAMENTOS. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTELE_DESC2 As String = "ARTELE_DESC2"
            Public Const ARTELE_DESC1 As String = "ARTELE_DESC1"
        End Class ' ColumnNames
    End Class
    Public Class TRAEMEDICACIONPACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEMEDICACIONPACIENTE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente As Int32) As List(Of Entities.Procedures.TRAEMEDICACIONPACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEMEDICACIONPACIENTE"

                Dim VPaciente As New SqlParameter("@Paciente", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente)
                Dim params() As SqlParameter = {VPaciente}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEMEDICACIONPACIENTE
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.articulo_id = IIf(Convert.IsDBNull(dr("articulo_id")), Nothing, dr("articulo_id"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.dosis = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.horario = IIf(Convert.IsDBNull(dr("horario")), Nothing, dr("horario"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fbaja = IIf(Convert.IsDBNull(dr("fBaja")), Nothing, dr("fBaja"))
                    NewItem.fcambio = IIf(Convert.IsDBNull(dr("fCambio")), Nothing, dr("fCambio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEMEDICACIONPACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEMEDICACIONPACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEMEDICACIONPACIENTE
        ''' Fecha de Creación  : lunes, 2 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEMEDICACIONPACIENTE. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const ARTICULO_ID As String = "ARTICULO_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const DOSIS As String = "DOSIS"
            Public Const HORARIO As String = "HORARIO"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FBAJA As String = "FBAJA"
            Public Const FCAMBIO As String = "FCAMBIO"
        End Class ' ColumnNames
    End Class
    Public Class _BUSCARPERFILESPERMISOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._BUSCARPERFILESPERMISOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal vsql As String) As List(Of Entities.Procedures._BUSCARPERFILESPERMISOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_BUSCARPERFILESPERMISOS"

                Dim VVsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, vsql)
                Dim params() As SqlParameter = {VVsql}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._BUSCARPERFILESPERMISOS
                    NewItem.id_menu = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.id_menupadre = IIf(Convert.IsDBNull(dr("Id_MenuPadre")), Nothing, dr("Id_MenuPadre"))
                    NewItem.descripcionmenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.posicionmenu = IIf(Convert.IsDBNull(dr("PosicionMenu")), Nothing, dr("PosicionMenu"))
                    NewItem.habilitadomenu = IIf(Convert.IsDBNull(dr("HabilitadoMenu")), Nothing, dr("HabilitadoMenu"))
                    NewItem.urlmenu = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    NewItem.formularioasociado = IIf(Convert.IsDBNull(dr("FormularioAsociado")), Nothing, dr("FormularioAsociado"))
                    NewItem.id_perfil = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._BUSCARPERFILESPERMISOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._BUSCARPERFILESPERMISOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _BUSCARPERFILESPERMISOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _BUSCARPERFILESPERMISOS. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const ID_MENUPADRE As String = "ID_MENUPADRE"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const POSICIONMENU As String = "POSICIONMENU"
            Public Const HABILITADOMENU As String = "HABILITADOMENU"
            Public Const URLMENU As String = "URLMENU"
            Public Const FORMULARIOASOCIADO As String = "FORMULARIOASOCIADO"
            Public Const ID_PERFIL As String = "ID_PERFIL"
        End Class ' ColumnNames
    End Class
    Public Class _MENUES_HIJOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._MENUES_HIJOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal padre As Int32) As List(Of Entities.Procedures._MENUES_HIJOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_MENUES_HIJOS"

                Dim VPadre As New SqlParameter("@Padre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, padre)
                Dim params() As SqlParameter = {VPadre}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._MENUES_HIJOS
                    NewItem.id_menu = IIf(Convert.IsDBNull(dr("id_Menu")), Nothing, dr("id_Menu"))
                    NewItem.descripcionmenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.urlmenu = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._MENUES_HIJOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._MENUES_HIJOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _MENUES_HIJOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _MENUES_HIJOS. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const URLMENU As String = "URLMENU"
        End Class ' ColumnNames
    End Class
    Public Class _MENUES_PADRES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._MENUES_PADRES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures._MENUES_PADRES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_MENUES_PADRES"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._MENUES_PADRES
                    NewItem.id_menu = IIf(Convert.IsDBNull(dr("id_Menu")), Nothing, dr("id_Menu"))
                    NewItem.descripcionmenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._MENUES_PADRES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._MENUES_PADRES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _MENUES_PADRES
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _MENUES_PADRES. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
        End Class ' ColumnNames
    End Class
    Public Class _MENUES_PADRES_E_HIJOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._MENUES_PADRES_E_HIJOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal padre As Int32, ByVal perfil As Int32) As List(Of Entities.Procedures._MENUES_PADRES_E_HIJOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_MENUES_PADRES_E_HIJOS"

                Dim VPadre As New SqlParameter("@Padre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, padre)
                Dim VPerfil As New SqlParameter("@Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, perfil)
                Dim params() As SqlParameter = {VPadre, VPerfil}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._MENUES_PADRES_E_HIJOS
                    NewItem.descripcionmenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.formularioasociado = IIf(Convert.IsDBNull(dr("FormularioAsociado")), Nothing, dr("FormularioAsociado"))
                    NewItem.id_menu = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.id_menupadre = IIf(Convert.IsDBNull(dr("Id_MenuPadre")), Nothing, dr("Id_MenuPadre"))
                    NewItem.posicionmenu = IIf(Convert.IsDBNull(dr("PosicionMenu")), Nothing, dr("PosicionMenu"))
                    NewItem.habilitadomenu = IIf(Convert.IsDBNull(dr("HabilitadoMenu")), Nothing, dr("HabilitadoMenu"))
                    NewItem.urlmenu = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    NewItem.id_perfil = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.lectura = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.escritura = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.eliminacion = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._MENUES_PADRES_E_HIJOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._MENUES_PADRES_E_HIJOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _MENUES_PADRES_E_HIJOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _MENUES_PADRES_E_HIJOS. </remarks>
        Public Class ColumnNames
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const FORMULARIOASOCIADO As String = "FORMULARIOASOCIADO"
            Public Const ID_MENU As String = "ID_MENU"
            Public Const ID_MENUPADRE As String = "ID_MENUPADRE"
            Public Const POSICIONMENU As String = "POSICIONMENU"
            Public Const HABILITADOMENU As String = "HABILITADOMENU"
            Public Const URLMENU As String = "URLMENU"
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class
    Public Class _OBTENERPERMISOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._OBTENERPERMISOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal perfil As Int32, ByVal idmenu As Int32) As List(Of Entities.Procedures._OBTENERPERMISOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_OBTENERPERMISOS"

                Dim Vperfil As New SqlParameter("@perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, perfil)
                Dim Vidmenu As New SqlParameter("@idmenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idmenu)
                Dim params() As SqlParameter = {Vperfil, Vidmenu}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._OBTENERPERMISOS
                    NewItem.lectura = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.escritura = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.eliminacion = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._OBTENERPERMISOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._OBTENERPERMISOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _OBTENERPERMISOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _OBTENERPERMISOS. </remarks>
        Public Class ColumnNames
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class
    Public Class _OBTENERPERMISOS_PORMODULO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._OBTENERPERMISOS_PORMODULO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal perfil As Int32, ByVal idmenu As Int32) As List(Of Entities.Procedures._OBTENERPERMISOS_PORMODULO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_OBTENERPERMISOS_PORMODULO"

                Dim Vperfil As New SqlParameter("@perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, perfil)
                Dim Vidmenu As New SqlParameter("@idmenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, idmenu)
                Dim params() As SqlParameter = {Vperfil, Vidmenu}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._OBTENERPERMISOS_PORMODULO
                    NewItem.id_menu = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.descripcionmenu = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.lectura = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.escritura = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.eliminacion = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._OBTENERPERMISOS_PORMODULO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._OBTENERPERMISOS_PORMODULO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _OBTENERPERMISOS_PORMODULO
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _OBTENERPERMISOS_PORMODULO. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class
    Public Class _TBL_USUARIOS_UPDATE_SIN_CLAVE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function ActualizaSinClave(ByVal id_usuario As Int32, ByVal id_perfil As Int32, ByVal identificadorusuario As String, ByVal nombreusuario As String, ByVal inactivo As Boolean, ByVal sector As Integer) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_TBL_USUARIOS_UPDATE_SIN_CLAVE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_usuario)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_perfil)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, identificadorusuario)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nombreusuario)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, inactivo)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector)
                Dim params() As SqlParameter = {VId_Usuario, VId_Perfil, VIdentificadorUsuario, VNombreUsuario, VInactivo, VSector_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._TBL_USUARIOS_UPDATE_SIN_CLAVE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _TBL_USUARIOS_UPDATE_SIN_CLAVE
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _TBL_USUARIOS_UPDATE_SIN_CLAVE. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class _VALIDACREDENCIAL
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures._VALIDACREDENCIAL)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal nombreusuario As String, ByVal contrasenia As String) As List(Of Entities.Procedures._VALIDACREDENCIAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_VALIDACREDENCIAL"

                Dim VnombreUsuario As New SqlParameter("@nombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, nombreusuario)
                Dim Vcontrasenia As New SqlParameter("@contrasenia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, contrasenia)
                Dim params() As SqlParameter = {VnombreUsuario, Vcontrasenia}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures._VALIDACREDENCIAL
                    NewItem.idusuario = IIf(Convert.IsDBNull(dr("IdUsuario")), Nothing, dr("IdUsuario"))
                    NewItem.perfil = IIf(Convert.IsDBNull(dr("Perfil")), Nothing, dr("Perfil"))
                    NewItem.Sector_id = IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures._VALIDACREDENCIAL)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._VALIDACREDENCIAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _VALIDACREDENCIAL
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla _VALIDACREDENCIAL. </remarks>
        Public Class ColumnNames
            Public Const IDUSUARIO As String = "IDUSUARIO"
            Public Const PERFIL As String = "PERFIL"
            'Public Const SECTOR_ID As String = "SECTOR_ID"
        End Class ' ColumnNames
    End Class
    Public Class ULTIMA_POSICION_MENU
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.ULTIMA_POSICION_MENU)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal menuapadre As Int32) As List(Of Entities.Procedures.ULTIMA_POSICION_MENU)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ULTIMA_POSICION_MENU"

                Dim VMenuaPadre As New SqlParameter("@MenuaPadre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, menuapadre)
                Dim params() As SqlParameter = {VMenuaPadre}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.ULTIMA_POSICION_MENU
                    NewItem.ultimomenu = IIf(Convert.IsDBNull(dr("UltimoMenu")), Nothing, dr("UltimoMenu"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.ULTIMA_POSICION_MENU)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ULTIMA_POSICION_MENU
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ULTIMA_POSICION_MENU
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla ULTIMA_POSICION_MENU. </remarks>
        Public Class ColumnNames
            Public Const ULTIMOMENU As String = "ULTIMOMENU"
        End Class ' ColumnNames
    End Class
    Public Class TRAECONTACTOSPACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAECONTACTOSPACIENTE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente As Int32) As List(Of Entities.Procedures.TRAECONTACTOSPACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAECONTACTOSPACIENTE"

                Dim VPaciente As New SqlParameter("@Paciente", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente)
                Dim params() As SqlParameter = {VPaciente}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAECONTACTOSPACIENTE
                    NewItem.contacto_id = IIf(Convert.IsDBNull(dr("contacto_id")), Nothing, dr("contacto_id"))
                    NewItem.nombre = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.apellido = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.tel1 = IIf(Convert.IsDBNull(dr("tel1")), Nothing, dr("tel1"))
                    NewItem.tel2 = IIf(Convert.IsDBNull(dr("tel2")), Nothing, dr("tel2"))
                    NewItem.tel3 = IIf(Convert.IsDBNull(dr("tel3")), Nothing, dr("tel3"))
                    NewItem.relacion = IIf(Convert.IsDBNull(dr("relacion")), Nothing, dr("relacion"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAECONTACTOSPACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAECONTACTOSPACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAECONTACTOSPACIENTE
        ''' Fecha de Creación  : jueves, 7 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAECONTACTOSPACIENTE. </remarks>
        Public Class ColumnNames
            Public Const CONTACTO_ID As String = "CONTACTO_ID"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const TEL1 As String = "TEL1"
            Public Const TEL2 As String = "TEL2"
            Public Const TEL3 As String = "TEL3"
            Public Const RELACION As String = "RELACION"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
        End Class ' ColumnNames
    End Class
    Public Class TRAEPACIENTESDEALTA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEPACIENTESDEALTA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.TRAEPACIENTESDEALTA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEPACIENTESDEALTA"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEPACIENTESDEALTA
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.nombre = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.apellido = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.fegreso = IIf(Convert.IsDBNull(dr("fEgreso")), Nothing, dr("fEgreso"))
                    NewItem.supervisorenf = IIf(Convert.IsDBNull(dr("supervisorEnf")), Nothing, dr("supervisorEnf"))
                    NewItem.gobernante = IIf(Convert.IsDBNull(dr("gobernante")), Nothing, dr("gobernante"))
                    NewItem.cantbolsasdeposito = IIf(Convert.IsDBNull(dr("cantBolsasDeposito")), Nothing, dr("cantBolsasDeposito"))
                    NewItem.obsdeposito = IIf(Convert.IsDBNull(dr("obsDeposito")), Nothing, dr("obsDeposito"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEPACIENTESDEALTA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEPACIENTESDEALTA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEPACIENTESDEALTA
        ''' Fecha de Creación  : jueves, 7 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEPACIENTESDEALTA. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const FEGRESO As String = "FEGRESO"
            Public Const SUPERVISORENF As String = "SUPERVISORENF"
            Public Const GOBERNANTE As String = "GOBERNANTE"
            Public Const CANTBOLSASDEPOSITO As String = "CANTBOLSASDEPOSITO"
            Public Const OBSDEPOSITO As String = "OBSDEPOSITO"
        End Class ' ColumnNames
    End Class
    Public Class TRAECANTIDADLLAMADOSPACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAECANTIDADLLAMADOSPACIENTE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente As Int32) As List(Of Entities.Procedures.TRAECANTIDADLLAMADOSPACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAECANTIDADLLAMADOSPACIENTE"

                Dim VPaciente As New SqlParameter("@Paciente", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente)
                Dim params() As SqlParameter = {VPaciente}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAECANTIDADLLAMADOSPACIENTE
                    NewItem.cantllamados = IIf(Convert.IsDBNull(dr("cantLlamados")), Nothing, dr("cantLlamados"))
                    NewItem.id = IIf(Convert.IsDBNull(dr("id")), Nothing, dr("id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.motivoalta_id = IIf(Convert.IsDBNull(dr("motivoAlta_id")), Nothing, dr("motivoAlta_id"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.estado = IIf(Convert.IsDBNull(dr("Estado")), Nothing, dr("Estado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAECANTIDADLLAMADOSPACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAECANTIDADLLAMADOSPACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAECANTIDADLLAMADOSPACIENTE
        ''' Fecha de Creación  : lunes, 11 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAECANTIDADLLAMADOSPACIENTE. </remarks>
        Public Class ColumnNames
            Public Const CANTLLAMADOS As String = "CANTLLAMADOS"
            Public Const ID As String = "ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MOTIVOALTA_ID As String = "MOTIVOALTA_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const ESTADO As String = "ESTADO"
        End Class ' ColumnNames
    End Class
    Public Class ACTUALIZACANTLLAMADOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id As Int32, ByVal cantbolsasdeposito As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "ACTUALIZACANTLLAMADOS"

                Dim Vid As New SqlParameter("@id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id)
                Dim VcantBolsasDeposito As New SqlParameter("@cantBolsasDeposito", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cantbolsasdeposito)
                Dim params() As SqlParameter = {Vid, VcantBolsasDeposito}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.ACTUALIZACANTLLAMADOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ACTUALIZACANTLLAMADOS
        ''' Fecha de Creación  : lunes, 11 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ACTUALIZACANTLLAMADOS. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class UPDATEFECHABAJAPACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal fegreso As DateTime, ByVal paciente_id As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "UPDATEFECHABAJAPACIENTE"

                Dim VfEgreso As New SqlParameter("@fEgreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fegreso)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim params() As SqlParameter = {VfEgreso, Vpaciente_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.UPDATEFECHABAJAPACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla UPDATEFECHABAJAPACIENTE
        ''' Fecha de Creación  : lunes, 11 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla UPDATEFECHABAJAPACIENTE. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class TRAEPACIENTESPERTENECIA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEPACIENTESPERTENECIA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.TRAEPACIENTESPERTENECIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEPACIENTESPERTENECIA"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEPACIENTESPERTENECIA
                    NewItem.id = IIf(Convert.IsDBNull(dr("id")), Nothing, dr("id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.nombrepaciente = IIf(Convert.IsDBNull(dr("nombrePaciente")), Nothing, dr("nombrePaciente"))
                    NewItem.fechaalta = IIf(Convert.IsDBNull(dr("fechaAlta")), Nothing, dr("fechaAlta"))
                    NewItem.motivoalta_id = IIf(Convert.IsDBNull(dr("motivoAlta_id")), Nothing, dr("motivoAlta_id"))
                    NewItem.supenfermeria = IIf(Convert.IsDBNull(dr("supEnfermeria")), Nothing, dr("supEnfermeria"))
                    NewItem.gobernante = IIf(Convert.IsDBNull(dr("gobernante")), Nothing, dr("gobernante"))
                    NewItem.cantbolsas = IIf(Convert.IsDBNull(dr("cantBolsas")), Nothing, dr("cantBolsas"))
                    NewItem.obssede = IIf(Convert.IsDBNull(dr("obsSede")), Nothing, dr("obsSede"))
                    NewItem.fechadeposito = IIf(Convert.IsDBNull(dr("fechaDeposito")), Nothing, dr("fechaDeposito"))
                    NewItem.fechalegales = IIf(Convert.IsDBNull(dr("fechaLegales")), Nothing, dr("fechaLegales"))
                    NewItem.fecharetiro = IIf(Convert.IsDBNull(dr("fechaRetiro")), Nothing, dr("fechaRetiro"))
                    NewItem.respretiro = IIf(Convert.IsDBNull(dr("respRetiro")), Nothing, dr("respRetiro"))
                    NewItem.obsretiro = IIf(Convert.IsDBNull(dr("obsRetiro")), Nothing, dr("obsRetiro"))
                    NewItem.cantllamados = IIf(Convert.IsDBNull(dr("cantLlamados")), Nothing, dr("cantLlamados"))
                    NewItem.fechalimite = IIf(Convert.IsDBNull(dr("fechaLimite")), Nothing, dr("fechaLimite"))
                    NewItem.mailsalertas = IIf(Convert.IsDBNull(dr("mailsAlertas")), Nothing, dr("mailsAlertas"))
                    NewItem.sede = IIf(Convert.IsDBNull(dr("sede")), Nothing, dr("sede"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEPACIENTESPERTENECIA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEPACIENTESPERTENECIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEPACIENTESPERTENECIA
        ''' Fecha de Creación  : lunes, 18 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEPACIENTESPERTENECIA. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NOMBREPACIENTE As String = "NOMBREPACIENTE"
            Public Const FECHAALTA As String = "FECHAALTA"
            Public Const MOTIVOALTA_ID As String = "MOTIVOALTA_ID"
            Public Const SUPENFERMERIA As String = "SUPENFERMERIA"
            Public Const GOBERNANTE As String = "GOBERNANTE"
            Public Const CANTBOLSAS As String = "CANTBOLSAS"
            Public Const OBSSEDE As String = "OBSSEDE"
            Public Const FECHADEPOSITO As String = "FECHADEPOSITO"
            Public Const FECHALEGALES As String = "FECHALEGALES"
            Public Const FECHARETIRO As String = "FECHARETIRO"
            Public Const RESPRETIRO As String = "RESPRETIRO"
            Public Const OBSRETIRO As String = "OBSRETIRO"
            Public Const CANTLLAMADOS As String = "CANTLLAMADOS"
            Public Const FECHALIMITE As String = "FECHALIMITE"
            Public Const MAILSALERTAS As String = "MAILSALERTAS"
            Public Const SEDE As String = "SEDE"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class
    Public Class OBTIENEULTIMOID
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.OBTIENEULTIMOID)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal tabla As String) As List(Of Entities.Procedures.OBTIENEULTIMOID)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "OBTIENEULTIMOID"

                Dim VTABLA As New SqlParameter("@TABLA", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tabla)
                Dim params() As SqlParameter = {VTABLA}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.OBTIENEULTIMOID
                    NewItem.id = IIf(Convert.IsDBNull(dr("ID")), Nothing, dr("ID"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.OBTIENEULTIMOID)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.OBTIENEULTIMOID
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla OBTIENEULTIMOID
        ''' Fecha de Creación  : martes, 26 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla OBTIENEULTIMOID. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_HISTORIAL_SUMINISTRO_MEDICACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_HISTORIAL_SUMINISTRO_MEDICACION)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal suministro_medicacion_id As Int32, ByVal paciente_id As Int32, ByVal medicamento_id As String, ByVal tipoget As String) As List(Of Entities.Procedures.MED_GET_HISTORIAL_SUMINISTRO_MEDICACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_HISTORIAL_SUMINISTRO_MEDICACION"

                Dim VSUMINISTRO_MEDICACION_ID As New SqlParameter("@SUMINISTRO_MEDICACION_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, suministro_medicacion_id)
                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim VMEDICAMENTO_ID As New SqlParameter("@MEDICAMENTO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, medicamento_id)
                Dim VTIPOGET As New SqlParameter("@TIPOGET", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipoget)
                Dim params() As SqlParameter = {VSUMINISTRO_MEDICACION_ID, VPACIENTE_ID, VMEDICAMENTO_ID, VTIPOGET}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_HISTORIAL_SUMINISTRO_MEDICACION
                    NewItem.suministrodemedicacion_id = IIf(Convert.IsDBNull(dr("suministroDeMedicacion_id")), Nothing, dr("suministroDeMedicacion_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.medicamento_id = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.droga = IIf(Convert.IsDBNull(dr("Droga")), Nothing, dr("Droga"))
                    NewItem.presentacionart = IIf(Convert.IsDBNull(dr("PresentacionArt")), Nothing, dr("PresentacionArt"))
                    NewItem.potenciaart = IIf(Convert.IsDBNull(dr("PotenciaArt")), Nothing, dr("PotenciaArt"))
                    NewItem.fechainicio = IIf(Convert.IsDBNull(dr("fechaInicio")), Nothing, dr("fechaInicio"))
                    NewItem.dosis = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.presentacion_id = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.potencia = IIf(Convert.IsDBNull(dr("potencia")), Nothing, dr("potencia"))
                    NewItem.dosismaximapordia = IIf(Convert.IsDBNull(dr("dosisMaximaPorDia")), Nothing, dr("dosisMaximaPorDia"))
                    NewItem.via_id = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.viatieneotro = IIf(Convert.IsDBNull(dr("viaTieneOtro")), Nothing, dr("viaTieneOtro"))
                    NewItem.viaotro = IIf(Convert.IsDBNull(dr("viaOtro")), Nothing, dr("viaOtro"))
                    NewItem.diluyente_id = IIf(Convert.IsDBNull(dr("diluyente_id")), Nothing, dr("diluyente_id"))
                    NewItem.ml = IIf(Convert.IsDBNull(dr("ml")), Nothing, dr("ml"))
                    NewItem.durante_id = IIf(Convert.IsDBNull(dr("durante_id")), Nothing, dr("durante_id"))
                    NewItem.periodo_id = IIf(Convert.IsDBNull(dr("periodo_id")), Nothing, dr("periodo_id"))
                    NewItem.lapsodetiempo = IIf(Convert.IsDBNull(dr("lapsoDeTiempo")), Nothing, dr("lapsoDeTiempo"))
                    NewItem.lapsodetiempohasta = IIf(Convert.IsDBNull(dr("lapsoDeTiempoHasta")), Nothing, dr("lapsoDeTiempoHasta"))
                    NewItem.horariodesuministro_id = IIf(Convert.IsDBNull(dr("horarioDeSuministro_id")), Nothing, dr("horarioDeSuministro_id"))
                    NewItem.hs_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.hs_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.hs_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.hs_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.hs_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.hs_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.hs_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.hs_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.hs_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.hs_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.hs_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.hs_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.hs_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.hs_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.hs_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.hs_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.hs_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.hs_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.hs_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.hs_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.hs_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.hs_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.hs_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.hs_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.hs_sh = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.horarioevento = IIf(Convert.IsDBNull(dr("horarioEvento")), Nothing, dr("horarioEvento"))
                    NewItem.evento = IIf(Convert.IsDBNull(dr("evento")), Nothing, dr("evento"))
                    NewItem.horariootro = IIf(Convert.IsDBNull(dr("horarioOtro")), Nothing, dr("horarioOtro"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.fechaaltasistema = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.motivobaja = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    NewItem.presentacion = IIf(Convert.IsDBNull(dr("Presentacion")), Nothing, dr("Presentacion"))
                    NewItem.unidaddemedida_id = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.via = IIf(Convert.IsDBNull(dr("Via")), Nothing, dr("Via"))
                    NewItem.diluyente = IIf(Convert.IsDBNull(dr("Diluyente")), Nothing, dr("Diluyente"))
                    NewItem.durante = IIf(Convert.IsDBNull(dr("Durante")), Nothing, dr("Durante"))
                    NewItem.periodo = IIf(Convert.IsDBNull(dr("Periodo")), Nothing, dr("Periodo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_HISTORIAL_SUMINISTRO_MEDICACION)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_HISTORIAL_SUMINISTRO_MEDICACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_HISTORIAL_SUMINISTRO_MEDICACION
        ''' Fecha de Creación  : martes, 16 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_HISTORIAL_SUMINISTRO_MEDICACION. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEMEDICACION_ID As String = "SUMINISTRODEMEDICACION_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const DROGA As String = "DROGA"
            Public Const PRESENTACIONART As String = "PRESENTACIONART"
            Public Const POTENCIAART As String = "POTENCIAART"
            Public Const FECHAINICIO As String = "FECHAINICIO"
            Public Const DOSIS As String = "DOSIS"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const POTENCIA As String = "POTENCIA"
            Public Const DOSISMAXIMAPORDIA As String = "DOSISMAXIMAPORDIA"
            Public Const VIA_ID As String = "VIA_ID"
            Public Const VIATIENEOTRO As String = "VIATIENEOTRO"
            Public Const VIAOTRO As String = "VIAOTRO"
            Public Const DILUYENTE_ID As String = "DILUYENTE_ID"
            Public Const ML As String = "ML"
            Public Const DURANTE_ID As String = "DURANTE_ID"
            Public Const PERIODO_ID As String = "PERIODO_ID"
            Public Const LAPSODETIEMPO As String = "LAPSODETIEMPO"
            Public Const LAPSODETIEMPOHASTA As String = "LAPSODETIEMPOHASTA"
            Public Const HORARIODESUMINISTRO_ID As String = "HORARIODESUMINISTRO_ID"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const HORARIOEVENTO As String = "HORARIOEVENTO"
            Public Const EVENTO As String = "EVENTO"
            Public Const HORARIOOTRO As String = "HORARIOOTRO"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const VIA As String = "VIA"
            Public Const DILUYENTE As String = "DILUYENTE"
            Public Const DURANTE As String = "DURANTE"
            Public Const PERIODO As String = "PERIODO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_SUMINISTRO_MEDICACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal suministro_medicacion_id As Int32, ByVal paciente_id As Int32, ByVal medicamento_id As String, ByVal tipoget As String) As List(Of Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_SUMINISTRO_MEDICACION"

                Dim VSUMINISTRO_MEDICACION_ID As New SqlParameter("@SUMINISTRO_MEDICACION_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, suministro_medicacion_id)
                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim VMEDICAMENTO_ID As New SqlParameter("@MEDICAMENTO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, medicamento_id)
                Dim VTIPOGET As New SqlParameter("@TIPOGET", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipoget)
                Dim params() As SqlParameter = {VSUMINISTRO_MEDICACION_ID, VPACIENTE_ID, VMEDICAMENTO_ID, VTIPOGET}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION
                    NewItem.suministrodemedicacion_id = IIf(Convert.IsDBNull(dr("suministroDeMedicacion_id")), Nothing, dr("suministroDeMedicacion_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.medicamento_id = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.droga = IIf(Convert.IsDBNull(dr("Droga")), Nothing, dr("Droga"))
                    NewItem.presentacionart = IIf(Convert.IsDBNull(dr("PresentacionArt")), Nothing, dr("PresentacionArt"))
                    NewItem.potenciaart = IIf(Convert.IsDBNull(dr("PotenciaArt")), Nothing, dr("PotenciaArt"))
                    NewItem.fechainicio = IIf(Convert.IsDBNull(dr("fechaInicio")), Nothing, dr("fechaInicio"))
                    NewItem.dosis = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.presentacion_id = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.potencia = IIf(Convert.IsDBNull(dr("potencia")), Nothing, dr("potencia"))
                    NewItem.via_id = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.viatieneotro = IIf(Convert.IsDBNull(dr("viaTieneOtro")), Nothing, dr("viaTieneOtro"))
                    NewItem.viaotro = IIf(Convert.IsDBNull(dr("viaOtro")), Nothing, dr("viaOtro"))
                    NewItem.diluyente_id = IIf(Convert.IsDBNull(dr("diluyente_id")), Nothing, dr("diluyente_id"))
                    NewItem.ml = IIf(Convert.IsDBNull(dr("ml")), Nothing, dr("ml"))
                    NewItem.durante_id = IIf(Convert.IsDBNull(dr("durante_id")), Nothing, dr("durante_id"))
                    NewItem.periodo_id = IIf(Convert.IsDBNull(dr("periodo_id")), Nothing, dr("periodo_id"))
                    NewItem.lapsodetiempo = IIf(Convert.IsDBNull(dr("lapsoDeTiempo")), Nothing, dr("lapsoDeTiempo"))
                    NewItem.lapsodetiempohasta = IIf(Convert.IsDBNull(dr("lapsoDeTiempoHasta")), Nothing, dr("lapsoDeTiempoHasta"))
                    NewItem.horariodesuministro_id = IIf(Convert.IsDBNull(dr("horarioDeSuministro_id")), Nothing, dr("horarioDeSuministro_id"))
                    NewItem.hs_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.hs_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.hs_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.hs_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.hs_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.hs_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.hs_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.hs_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.hs_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.hs_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.hs_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.hs_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.hs_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.hs_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.hs_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.hs_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.hs_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.hs_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.hs_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.hs_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.hs_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.hs_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.hs_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.hs_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.hs_sh = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.l = IIf(Convert.IsDBNull(dr("L")), Nothing, dr("L"))
                    NewItem.m = IIf(Convert.IsDBNull(dr("M")), Nothing, dr("M"))
                    NewItem.x = IIf(Convert.IsDBNull(dr("X")), Nothing, dr("X"))
                    NewItem.j = IIf(Convert.IsDBNull(dr("J")), Nothing, dr("J"))
                    NewItem.v = IIf(Convert.IsDBNull(dr("V")), Nothing, dr("V"))
                    NewItem.s = IIf(Convert.IsDBNull(dr("S")), Nothing, dr("S"))
                    NewItem.d = IIf(Convert.IsDBNull(dr("D")), Nothing, dr("D"))
                    NewItem.horarioevento = IIf(Convert.IsDBNull(dr("horarioEvento")), Nothing, dr("horarioEvento"))
                    NewItem.evento = IIf(Convert.IsDBNull(dr("evento")), Nothing, dr("evento"))
                    NewItem.horariootro = IIf(Convert.IsDBNull(dr("horarioOtro")), Nothing, dr("horarioOtro"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.nombreusuario = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    NewItem.fechaaltasistema = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.motivobaja = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    NewItem.presentacion = IIf(Convert.IsDBNull(dr("Presentacion")), Nothing, dr("Presentacion"))
                    NewItem.unidaddemedida_id = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.via = IIf(Convert.IsDBNull(dr("Via")), Nothing, dr("Via"))
                    NewItem.diluyente = IIf(Convert.IsDBNull(dr("Diluyente")), Nothing, dr("Diluyente"))
                    NewItem.durante = IIf(Convert.IsDBNull(dr("Durante")), Nothing, dr("Durante"))
                    NewItem.periodo = IIf(Convert.IsDBNull(dr("Periodo")), Nothing, dr("Periodo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_SUMINISTRO_MEDICACION
        ''' Fecha de Creación  : miércoles, 25 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_SUMINISTRO_MEDICACION. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEMEDICACION_ID As String = "SUMINISTRODEMEDICACION_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const DROGA As String = "DROGA"
            Public Const PRESENTACIONART As String = "PRESENTACIONART"
            Public Const POTENCIAART As String = "POTENCIAART"
            Public Const FECHAINICIO As String = "FECHAINICIO"
            Public Const DOSIS As String = "DOSIS"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const POTENCIA As String = "POTENCIA"
            Public Const VIA_ID As String = "VIA_ID"
            Public Const VIATIENEOTRO As String = "VIATIENEOTRO"
            Public Const VIAOTRO As String = "VIAOTRO"
            Public Const DILUYENTE_ID As String = "DILUYENTE_ID"
            Public Const ML As String = "ML"
            Public Const DURANTE_ID As String = "DURANTE_ID"
            Public Const PERIODO_ID As String = "PERIODO_ID"
            Public Const LAPSODETIEMPO As String = "LAPSODETIEMPO"
            Public Const LAPSODETIEMPOHASTA As String = "LAPSODETIEMPOHASTA"
            Public Const HORARIODESUMINISTRO_ID As String = "HORARIODESUMINISTRO_ID"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const L As String = "L"
            Public Const M As String = "M"
            Public Const X As String = "X"
            Public Const J As String = "J"
            Public Const V As String = "V"
            Public Const S As String = "S"
            Public Const D As String = "D"
            Public Const HORARIOEVENTO As String = "HORARIOEVENTO"
            Public Const EVENTO As String = "EVENTO"
            Public Const HORARIOOTRO As String = "HORARIOOTRO"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const VIA As String = "VIA"
            Public Const DILUYENTE As String = "DILUYENTE"
            Public Const DURANTE As String = "DURANTE"
            Public Const PERIODO As String = "PERIODO"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_PROCEDIMIENTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal procedimiento As String) As List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_PROCEDIMIENTO"

                Dim VPROCEDIMIENTO As New SqlParameter("@PROCEDIMIENTO", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, procedimiento)
                Dim params() As SqlParameter = {VPROCEDIMIENTO}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_PROCEDIMIENTO
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.tipoprocedimiento_id = IIf(Convert.IsDBNull(dr("tipoProcedimiento_id")), Nothing, dr("tipoProcedimiento_id"))
                    NewItem.descripciontipo = IIf(Convert.IsDBNull(dr("descripcionTipo")), Nothing, dr("descripcionTipo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_PROCEDIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_PROCEDIMIENTO
        ''' Fecha de Creación  : lunes, 22 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_PROCEDIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const TIPOPROCEDIMIENTO_ID As String = "TIPOPROCEDIMIENTO_ID"
            Public Const DESCRIPCIONTIPO As String = "DESCRIPCIONTIPO"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_PROCEDIMIENTO_PACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTO_PACIENTE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32) As List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTO_PACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_PROCEDIMIENTO_PACIENTE"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim params() As SqlParameter = {VPACIENTE_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_PROCEDIMIENTO_PACIENTE
                    NewItem.suministrodeprocedimiento_id = IIf(Convert.IsDBNull(dr("suministroDeProcedimiento_id")), Nothing, dr("suministroDeProcedimiento_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.paciente = IIf(Convert.IsDBNull(dr("Paciente")), Nothing, dr("Paciente"))
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.procedimiento = IIf(Convert.IsDBNull(dr("procedimiento")), Nothing, dr("procedimiento"))
                    NewItem.tipoprocedimiento_id = IIf(Convert.IsDBNull(dr("tipoProcedimiento_id")), Nothing, dr("tipoProcedimiento_id"))
                    NewItem.tipoprocedimiento = IIf(Convert.IsDBNull(dr("tipoProcedimiento")), Nothing, dr("tipoProcedimiento"))
                    NewItem.enfermeria_id = IIf(Convert.IsDBNull(dr("enfermeria_id")), Nothing, dr("enfermeria_id"))
                    NewItem.posologia_id = IIf(Convert.IsDBNull(dr("posologia_id")), Nothing, dr("posologia_id"))
                    NewItem.generico_id = IIf(Convert.IsDBNull(dr("generico_id")), Nothing, dr("generico_id"))
                    NewItem.colocacionviaperiferica_id = IIf(Convert.IsDBNull(dr("colocacionViaPeriferica_id")), Nothing, dr("colocacionViaPeriferica_id"))
                    NewItem.cuidadooral_id = IIf(Convert.IsDBNull(dr("cuidadoOral_id")), Nothing, dr("cuidadoOral_id"))
                    NewItem.cuidadopostural_id = IIf(Convert.IsDBNull(dr("cuidadoPostural_id")), Nothing, dr("cuidadoPostural_id"))
                    NewItem.proteccionfisica_id = IIf(Convert.IsDBNull(dr("proteccionFisica_id")), Nothing, dr("proteccionFisica_id"))
                    NewItem.php_id = IIf(Convert.IsDBNull(dr("php_id")), Nothing, dr("php_id"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTO_PACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_PROCEDIMIENTO_PACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_PROCEDIMIENTO_PACIENTE
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_PROCEDIMIENTO_PACIENTE. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEPROCEDIMIENTO_ID As String = "SUMINISTRODEPROCEDIMIENTO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PACIENTE As String = "PACIENTE"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const PROCEDIMIENTO As String = "PROCEDIMIENTO"
            Public Const TIPOPROCEDIMIENTO_ID As String = "TIPOPROCEDIMIENTO_ID"
            Public Const TIPOPROCEDIMIENTO As String = "TIPOPROCEDIMIENTO"
            Public Const ENFERMERIA_ID As String = "ENFERMERIA_ID"
            Public Const POSOLOGIA_ID As String = "POSOLOGIA_ID"
            Public Const GENERICO_ID As String = "GENERICO_ID"
            Public Const COLOCACIONVIAPERIFERICA_ID As String = "COLOCACIONVIAPERIFERICA_ID"
            Public Const CUIDADOORAL_ID As String = "CUIDADOORAL_ID"
            Public Const CUIDADOPOSTURAL_ID As String = "CUIDADOPOSTURAL_ID"
            Public Const PROTECCIONFISICA_ID As String = "PROTECCIONFISICA_ID"
            Public Const PHP_ID As String = "PHP_ID"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_ENFERMERIA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_ENFERMERIA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal enfermeria_id As Int32) As List(Of Entities.Procedures.PRO_GET_ENFERMERIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_ENFERMERIA"

                Dim VENFERMERIA_ID As New SqlParameter("@ENFERMERIA_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, enfermeria_id)
                Dim params() As SqlParameter = {VENFERMERIA_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_ENFERMERIA
                    NewItem.enfermeria_id = IIf(Convert.IsDBNull(dr("enfermeria_id")), Nothing, dr("enfermeria_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.paciente = IIf(Convert.IsDBNull(dr("Paciente")), Nothing, dr("Paciente"))
                    NewItem.controlvital = IIf(Convert.IsDBNull(dr("controlVital")), Nothing, dr("controlVital"))
                    NewItem.frecuenciacardiaca = IIf(Convert.IsDBNull(dr("frecuenciaCardiaca")), Nothing, dr("frecuenciaCardiaca"))
                    NewItem.frecuenciarespiratoria = IIf(Convert.IsDBNull(dr("frecuenciaRespiratoria")), Nothing, dr("frecuenciaRespiratoria"))
                    NewItem.temperaturaaxilar = IIf(Convert.IsDBNull(dr("temperaturaAxilar")), Nothing, dr("temperaturaAxilar"))
                    NewItem.diuresis = IIf(Convert.IsDBNull(dr("diuresis")), Nothing, dr("diuresis"))
                    NewItem.glucemiacapilar = IIf(Convert.IsDBNull(dr("glucemiaCapilar")), Nothing, dr("glucemiaCapilar"))
                    NewItem.multistickorina = IIf(Convert.IsDBNull(dr("multistickOrina")), Nothing, dr("multistickOrina"))
                    NewItem.controlsaturacion = IIf(Convert.IsDBNull(dr("controlSaturacion")), Nothing, dr("controlSaturacion"))
                    NewItem.medicionresiduosgastrico = IIf(Convert.IsDBNull(dr("medicionResiduosGastrico")), Nothing, dr("medicionResiduosGastrico"))
                    NewItem.ecg = IIf(Convert.IsDBNull(dr("ecg")), Nothing, dr("ecg"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_ENFERMERIA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_ENFERMERIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_ENFERMERIA
        ''' Fecha de Creación  : martes, 9 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_ENFERMERIA. </remarks>
        Public Class ColumnNames
            Public Const ENFERMERIA_ID As String = "ENFERMERIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PACIENTE As String = "PACIENTE"
            Public Const CONTROLVITAL As String = "CONTROLVITAL"
            Public Const FRECUENCIACARDIACA As String = "FRECUENCIACARDIACA"
            Public Const FRECUENCIARESPIRATORIA As String = "FRECUENCIARESPIRATORIA"
            Public Const TEMPERATURAAXILAR As String = "TEMPERATURAAXILAR"
            Public Const DIURESIS As String = "DIURESIS"
            Public Const GLUCEMIACAPILAR As String = "GLUCEMIACAPILAR"
            Public Const MULTISTICKORINA As String = "MULTISTICKORINA"
            Public Const CONTROLSATURACION As String = "CONTROLSATURACION"
            Public Const MEDICIONRESIDUOSGASTRICO As String = "MEDICIONRESIDUOSGASTRICO"
            Public Const ECG As String = "ECG"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_GENERICO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_GENERICO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal generico_id As Int32) As List(Of Entities.Procedures.PRO_GET_GENERICO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_GENERICO"

                Dim VGENERICO_ID As New SqlParameter("@GENERICO_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, generico_id)
                Dim params() As SqlParameter = {VGENERICO_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_GENERICO
                    NewItem.generico_id = IIf(Convert.IsDBNull(dr("generico_id")), Nothing, dr("generico_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.paciente = IIf(Convert.IsDBNull(dr("Paciente")), Nothing, dr("Paciente"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_GENERICO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_GENERICO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_GENERICO
        ''' Fecha de Creación  : martes, 9 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_GENERICO. </remarks>
        Public Class ColumnNames
            Public Const GENERICO_ID As String = "GENERICO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PACIENTE As String = "PACIENTE"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_POSOLOGIA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_POSOLOGIA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal posologia_id As Int32) As List(Of Entities.Procedures.PRO_GET_POSOLOGIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_POSOLOGIA"

                Dim VPOSOLOGIA_ID As New SqlParameter("@POSOLOGIA_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, posologia_id)
                Dim params() As SqlParameter = {VPOSOLOGIA_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_POSOLOGIA
                    NewItem.posologia_id = IIf(Convert.IsDBNull(dr("posologia_id")), Nothing, dr("posologia_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.paciente = IIf(Convert.IsDBNull(dr("Paciente")), Nothing, dr("Paciente"))
                    NewItem.picado = IIf(Convert.IsDBNull(dr("Picado")), Nothing, dr("Picado"))
                    NewItem.hiposodica = IIf(Convert.IsDBNull(dr("hiposodica")), Nothing, dr("hiposodica"))
                    NewItem.supcontrol = IIf(Convert.IsDBNull(dr("SupControl")), Nothing, dr("SupControl"))
                    NewItem.sinliquidos = IIf(Convert.IsDBNull(dr("SinLiquidos")), Nothing, dr("SinLiquidos"))
                    NewItem.planoral = IIf(Convert.IsDBNull(dr("PlanOral")), Nothing, dr("PlanOral"))
                    NewItem.liquidosfinos = IIf(Convert.IsDBNull(dr("LiquidosFinos")), Nothing, dr("LiquidosFinos"))
                    NewItem.liquidosespesos = IIf(Convert.IsDBNull(dr("LiquidosEspesos")), Nothing, dr("LiquidosEspesos"))
                    NewItem.liquidosaligerados = IIf(Convert.IsDBNull(dr("LiquidosAligerados")), Nothing, dr("LiquidosAligerados"))
                    NewItem.cortado = IIf(Convert.IsDBNull(dr("Cortado")), Nothing, dr("Cortado"))
                    NewItem.asistencia = IIf(Convert.IsDBNull(dr("Asistencia")), Nothing, dr("Asistencia"))
                    NewItem.hipograsa = IIf(Convert.IsDBNull(dr("hipograsa")), Nothing, dr("hipograsa"))
                    NewItem.alimento_id = IIf(Convert.IsDBNull(dr("alimento_id")), Nothing, dr("alimento_id"))
                    NewItem.alimento = IIf(Convert.IsDBNull(dr("Alimento")), Nothing, dr("Alimento"))
                    NewItem.alimentovelocidad = IIf(Convert.IsDBNull(dr("alimentoVelocidad")), Nothing, dr("alimentoVelocidad"))
                    NewItem.gavageintervalo_id = IIf(Convert.IsDBNull(dr("gavageIntervalo_id")), Nothing, dr("gavageIntervalo_id"))
                    NewItem.gavage = IIf(Convert.IsDBNull(dr("Gavage")), Nothing, dr("Gavage"))
                    NewItem.gavagecantidad = IIf(Convert.IsDBNull(dr("gavageCantidad")), Nothing, dr("gavageCantidad"))
                    NewItem.preparado_id = IIf(Convert.IsDBNull(dr("preparado_id")), Nothing, dr("preparado_id"))
                    NewItem.preparado = IIf(Convert.IsDBNull(dr("Preparado")), Nothing, dr("Preparado"))
                    NewItem.preparadovelocidad = IIf(Convert.IsDBNull(dr("preparadoVelocidad")), Nothing, dr("preparadoVelocidad"))
                    NewItem.ayunofecha = IIf(Convert.IsDBNull(dr("ayunoFecha")), Nothing, dr("ayunoFecha"))
                    NewItem.ayunohora = IIf(Convert.IsDBNull(dr("ayunoHora")), Nothing, dr("ayunoHora"))
                    NewItem.liquidofecha = IIf(Convert.IsDBNull(dr("liquidoFecha")), Nothing, dr("liquidoFecha"))
                    NewItem.liquidohora = IIf(Convert.IsDBNull(dr("liquidoHora")), Nothing, dr("liquidoHora"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_POSOLOGIA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_POSOLOGIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_POSOLOGIA
        ''' Fecha de Creación  : miércoles, 30 de noviembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_POSOLOGIA. </remarks>
        Public Class ColumnNames
            Public Const POSOLOGIA_ID As String = "POSOLOGIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PACIENTE As String = "PACIENTE"
            Public Const PICADO As String = "PICADO"
            Public Const HIPOSODICA As String = "HIPOSODICA"
            Public Const SUPCONTROL As String = "SUPCONTROL"
            Public Const SINLIQUIDOS As String = "SINLIQUIDOS"
            Public Const PLANORAL As String = "PLANORAL"
            Public Const LIQUIDOSFINOS As String = "LIQUIDOSFINOS"
            Public Const LIQUIDOSESPESOS As String = "LIQUIDOSESPESOS"
            Public Const LIQUIDOSALIGERADOS As String = "LIQUIDOSALIGERADOS"
            Public Const CORTADO As String = "CORTADO"
            Public Const ASISTENCIA As String = "ASISTENCIA"
            Public Const HIPOGRASA As String = "HIPOGRASA"
            Public Const ALIMENTO_ID As String = "ALIMENTO_ID"
            Public Const ALIMENTO As String = "ALIMENTO"
            Public Const ALIMENTOVELOCIDAD As String = "ALIMENTOVELOCIDAD"
            Public Const GAVAGEINTERVALO_ID As String = "GAVAGEINTERVALO_ID"
            Public Const GAVAGE As String = "GAVAGE"
            Public Const GAVAGECANTIDAD As String = "GAVAGECANTIDAD"
            Public Const PREPARADO_ID As String = "PREPARADO_ID"
            Public Const PREPARADO As String = "PREPARADO"
            Public Const PREPARADOVELOCIDAD As String = "PREPARADOVELOCIDAD"
            Public Const AYUNOFECHA As String = "AYUNOFECHA"
            Public Const AYUNOHORA As String = "AYUNOHORA"
            Public Const LIQUIDOFECHA As String = "LIQUIDOFECHA"
            Public Const LIQUIDOHORA As String = "LIQUIDOHORA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_ABOCATH_NUMERO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_ABOCATH_NUMERO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.PRO_GET_ABOCATH_NUMERO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_ABOCATH_NUMERO"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_ABOCATH_NUMERO
                    NewItem.art_codgen = IIf(Convert.IsDBNull(dr("art_CodGen")), Nothing, dr("art_CodGen"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_ABOCATH_NUMERO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_ABOCATH_NUMERO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_ABOCATH_NUMERO
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_ABOCATH_NUMERO. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_COLOCACION_VIA_PERIFERICA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_COLOCACION_VIA_PERIFERICA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal colocacion_via_periferica_id As Int32) As List(Of Entities.Procedures.PRO_GET_COLOCACION_VIA_PERIFERICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_COLOCACION_VIA_PERIFERICA"

                Dim VCOLOCACION_VIA_PERIFERICA_ID As New SqlParameter("@COLOCACION_VIA_PERIFERICA_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, colocacion_via_periferica_id)
                Dim params() As SqlParameter = {VCOLOCACION_VIA_PERIFERICA_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_COLOCACION_VIA_PERIFERICA
                    NewItem.colocacionviaperiferica_id = IIf(Convert.IsDBNull(dr("colocacionViaPeriferica_id")), Nothing, dr("colocacionViaPeriferica_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.abocathnumero_id = IIf(Convert.IsDBNull(dr("abocathNumero_id")), Nothing, dr("abocathNumero_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.parchetegaderm = IIf(Convert.IsDBNull(dr("parcheTegaderm")), Nothing, dr("parcheTegaderm"))
                    NewItem.infusion = IIf(Convert.IsDBNull(dr("infusion")), Nothing, dr("infusion"))
                    NewItem.via = IIf(Convert.IsDBNull(dr("via")), Nothing, dr("via"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_COLOCACION_VIA_PERIFERICA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_COLOCACION_VIA_PERIFERICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_COLOCACION_VIA_PERIFERICA
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_COLOCACION_VIA_PERIFERICA. </remarks>
        Public Class ColumnNames
            Public Const COLOCACIONVIAPERIFERICA_ID As String = "COLOCACIONVIAPERIFERICA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const ABOCATHNUMERO_ID As String = "ABOCATHNUMERO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const PARCHETEGADERM As String = "PARCHETEGADERM"
            Public Const INFUSION As String = "INFUSION"
            Public Const VIA As String = "VIA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_CUIDADO_ORAL
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_CUIDADO_ORAL)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal cuidado_oral_id As Int32) As List(Of Entities.Procedures.PRO_GET_CUIDADO_ORAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_CUIDADO_ORAL"

                Dim VCUIDADO_ORAL_ID As New SqlParameter("@CUIDADO_ORAL_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cuidado_oral_id)
                Dim params() As SqlParameter = {VCUIDADO_ORAL_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_CUIDADO_ORAL
                    NewItem.cuidadooral_id = IIf(Convert.IsDBNull(dr("cuidadoOral_id")), Nothing, dr("cuidadoOral_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.placadescanso = IIf(Convert.IsDBNull(dr("placaDescanso")), Nothing, dr("placaDescanso"))
                    NewItem.mordillo = IIf(Convert.IsDBNull(dr("mordillo")), Nothing, dr("mordillo"))
                    NewItem.clorhexidina = IIf(Convert.IsDBNull(dr("clorhexidina")), Nothing, dr("clorhexidina"))
                    NewItem.hs_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.hs_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.hs_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.hs_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.hs_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.hs_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.hs_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.hs_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.hs_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.hs_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.hs_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.hs_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.hs_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.hs_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.hs_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.hs_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.hs_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.hs_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.hs_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.hs_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.hs_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.hs_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.hs_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.hs_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_CUIDADO_ORAL)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_CUIDADO_ORAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_CUIDADO_ORAL
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_CUIDADO_ORAL. </remarks>
        Public Class ColumnNames
            Public Const CUIDADOORAL_ID As String = "CUIDADOORAL_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const PLACADESCANSO As String = "PLACADESCANSO"
            Public Const MORDILLO As String = "MORDILLO"
            Public Const CLORHEXIDINA As String = "CLORHEXIDINA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_CUIDADO_POSTURAL
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_CUIDADO_POSTURAL)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal cuidado_postural_id As Int32) As List(Of Entities.Procedures.PRO_GET_CUIDADO_POSTURAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_CUIDADO_POSTURAL"

                Dim VCUIDADO_POSTURAL_ID As New SqlParameter("@CUIDADO_POSTURAL_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, cuidado_postural_id)
                Dim params() As SqlParameter = {VCUIDADO_POSTURAL_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_CUIDADO_POSTURAL
                    NewItem.cuidadopostural_id = IIf(Convert.IsDBNull(dr("cuidadoPostural_id")), Nothing, dr("cuidadoPostural_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.cabecera = IIf(Convert.IsDBNull(dr("cabecera")), Nothing, dr("cabecera"))
                    NewItem.rotar = IIf(Convert.IsDBNull(dr("rotar")), Nothing, dr("rotar"))
                    NewItem.movilizacionenbloque = IIf(Convert.IsDBNull(dr("movilizacionEnBloque")), Nothing, dr("movilizacionEnBloque"))
                    NewItem.almohadon = IIf(Convert.IsDBNull(dr("almohadon")), Nothing, dr("almohadon"))
                    NewItem.elevadorinodoros = IIf(Convert.IsDBNull(dr("elevadorInodoros")), Nothing, dr("elevadorInodoros"))
                    NewItem.trianguloseparadorentrepierna = IIf(Convert.IsDBNull(dr("trianguloSeparadorEntrePierna")), Nothing, dr("trianguloSeparadorEntrePierna"))
                    NewItem.evitaapoyotalon = IIf(Convert.IsDBNull(dr("evitaApoyoTalon")), Nothing, dr("evitaApoyoTalon"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_CUIDADO_POSTURAL)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_CUIDADO_POSTURAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_CUIDADO_POSTURAL
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_CUIDADO_POSTURAL. </remarks>
        Public Class ColumnNames
            Public Const CUIDADOPOSTURAL_ID As String = "CUIDADOPOSTURAL_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CABECERA As String = "CABECERA"
            Public Const ROTAR As String = "ROTAR"
            Public Const MOVILIZACIONENBLOQUE As String = "MOVILIZACIONENBLOQUE"
            Public Const ALMOHADON As String = "ALMOHADON"
            Public Const ELEVADORINODOROS As String = "ELEVADORINODOROS"
            Public Const TRIANGULOSEPARADORENTREPIERNA As String = "TRIANGULOSEPARADORENTREPIERNA"
            Public Const EVITAAPOYOTALON As String = "EVITAAPOYOTALON"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_PROTECCION_FISICA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_PROTECCION_FISICA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal proteccion_fisica_id As Int32) As List(Of Entities.Procedures.PRO_GET_PROTECCION_FISICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_PROTECCION_FISICA"

                Dim VPROTECCION_FISICA_ID As New SqlParameter("@PROTECCION_FISICA_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, proteccion_fisica_id)
                Dim params() As SqlParameter = {VPROTECCION_FISICA_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_PROTECCION_FISICA
                    NewItem.proteccionfisica_id = IIf(Convert.IsDBNull(dr("proteccionFisica_id")), Nothing, dr("proteccionFisica_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.contencionfisica = IIf(Convert.IsDBNull(dr("contencionFisica")), Nothing, dr("contencionFisica"))
                    NewItem.colchonaire = IIf(Convert.IsDBNull(dr("colchonAire")), Nothing, dr("colchonAire"))
                    NewItem.barandascama = IIf(Convert.IsDBNull(dr("barandasCama")), Nothing, dr("barandasCama"))
                    NewItem.cascoproteccion = IIf(Convert.IsDBNull(dr("cascoProteccion")), Nothing, dr("cascoProteccion"))
                    NewItem.chiripasilla = IIf(Convert.IsDBNull(dr("chiripaSilla")), Nothing, dr("chiripaSilla"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_PROTECCION_FISICA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_PROTECCION_FISICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_PROTECCION_FISICA
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_PROTECCION_FISICA. </remarks>
        Public Class ColumnNames
            Public Const PROTECCIONFISICA_ID As String = "PROTECCIONFISICA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CONTENCIONFISICA As String = "CONTENCIONFISICA"
            Public Const COLCHONAIRE As String = "COLCHONAIRE"
            Public Const BARANDASCAMA As String = "BARANDASCAMA"
            Public Const CASCOPROTECCION As String = "CASCOPROTECCION"
            Public Const CHIRIPASILLA As String = "CHIRIPASILLA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const FECHABAJA As String = "FECHABAJA"
        End Class ' ColumnNames
    End Class
    Public Class PRORROGACABECERAGET
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRORROGACABECERAGET)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32) As List(Of Entities.Procedures.PRORROGACABECERAGET)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRORROGACABECERAGET"

                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim params() As SqlParameter = {Vpaciente_id}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRORROGACABECERAGET
                    NewItem.prorroga_id = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.fechaprorroga = IIf(Convert.IsDBNull(dr("fechaProrroga")), Nothing, dr("fechaProrroga"))
                    NewItem.antecedentes = IIf(Convert.IsDBNull(dr("antecedentes")), Nothing, dr("antecedentes"))
                    NewItem.estadoalingreso = IIf(Convert.IsDBNull(dr("estadoAlIngreso")), Nothing, dr("estadoAlIngreso"))
                    NewItem.estadoprorroga = IIf(Convert.IsDBNull(dr("estadoProrroga")), Nothing, dr("estadoProrroga"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.nombreusuario = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRORROGACABECERAGET)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRORROGACABECERAGET
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGACABECERAGET
        ''' Fecha de Creación  : jueves, 25 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGACABECERAGET. </remarks>
        Public Class ColumnNames
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const FECHAPRORROGA As String = "FECHAPRORROGA"
            Public Const ANTECEDENTES As String = "ANTECEDENTES"
            Public Const ESTADOALINGRESO As String = "ESTADOALINGRESO"
            Public Const ESTADOPRORROGA As String = "ESTADOPRORROGA"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
        End Class ' ColumnNames
    End Class
    Public Class PRORROGADETALLEGET
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRORROGADETALLEGET)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal prorroga_id As Int32, ByVal tipo As String, ByVal informe As String, ByVal prorrogaitemid As Int32) As List(Of Entities.Procedures.PRORROGADETALLEGET)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRORROGADETALLEGET"

                Dim Vprorroga_id As New SqlParameter("@prorroga_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, prorroga_id)
                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim VInforme As New SqlParameter("@Informe", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, informe)
                Dim VProrrogaItemID As New SqlParameter("@ProrrogaItemID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, prorrogaitemid)
                Dim params() As SqlParameter = {Vprorroga_id, VTipo, VInforme, VProrrogaItemID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRORROGADETALLEGET
                    NewItem.id = IIf(Convert.IsDBNull(dr("id")), Nothing, dr("id"))
                    NewItem.prorroga_id = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.evolucion = IIf(Convert.IsDBNull(dr("evolucion")), Nothing, dr("evolucion"))
                    NewItem.kinesiomuscular = IIf(Convert.IsDBNull(dr("kinesioMuscular")), Nothing, dr("kinesioMuscular"))
                    NewItem.kinesiomusculartxt = IIf(Convert.IsDBNull(dr("kinesioMuscularTxt")), Nothing, dr("kinesioMuscularTxt"))
                    NewItem.fono = IIf(Convert.IsDBNull(dr("fono")), Nothing, dr("fono"))
                    NewItem.fonotxt = IIf(Convert.IsDBNull(dr("fonoTxt")), Nothing, dr("fonoTxt"))
                    NewItem.terapiaocup = IIf(Convert.IsDBNull(dr("terapiaOcup")), Nothing, dr("terapiaOcup"))
                    NewItem.terapiaocuptxt = IIf(Convert.IsDBNull(dr("terapiaOcupTxt")), Nothing, dr("terapiaOcupTxt"))
                    NewItem.psicologia = IIf(Convert.IsDBNull(dr("psicologia")), Nothing, dr("psicologia"))
                    NewItem.psicologiatxt = IIf(Convert.IsDBNull(dr("psicologiaTxt")), Nothing, dr("psicologiaTxt"))
                    NewItem.nutricion = IIf(Convert.IsDBNull(dr("nutricion")), Nothing, dr("nutricion"))
                    NewItem.nutriciontxt = IIf(Convert.IsDBNull(dr("nutricionTxt")), Nothing, dr("nutricionTxt"))
                    NewItem.musicoterapia = IIf(Convert.IsDBNull(dr("musicoterapia")), Nothing, dr("musicoterapia"))
                    NewItem.musicoterapiatxt = IIf(Convert.IsDBNull(dr("musicoterapiaTxt")), Nothing, dr("musicoterapiaTxt"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.usuariomodifica = IIf(Convert.IsDBNull(dr("usuarioModifica")), Nothing, dr("usuarioModifica"))
                    NewItem.tipo = IIf(Convert.IsDBNull(dr("Tipo")), Nothing, dr("Tipo"))
                    NewItem.nombreusuario = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRORROGADETALLEGET)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRORROGADETALLEGET
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGADETALLEGET
        ''' Fecha de Creación  : viernes, 26 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGADETALLEGET. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const EVOLUCION As String = "EVOLUCION"
            Public Const KINESIOMUSCULAR As String = "KINESIOMUSCULAR"
            Public Const KINESIOMUSCULARTXT As String = "KINESIOMUSCULARTXT"
            Public Const FONO As String = "FONO"
            Public Const FONOTXT As String = "FONOTXT"
            Public Const TERAPIAOCUP As String = "TERAPIAOCUP"
            Public Const TERAPIAOCUPTXT As String = "TERAPIAOCUPTXT"
            Public Const PSICOLOGIA As String = "PSICOLOGIA"
            Public Const PSICOLOGIATXT As String = "PSICOLOGIATXT"
            Public Const NUTRICION As String = "NUTRICION"
            Public Const NUTRICIONTXT As String = "NUTRICIONTXT"
            Public Const MUSICOTERAPIA As String = "MUSICOTERAPIA"
            Public Const MUSICOTERAPIATXT As String = "MUSICOTERAPIATXT"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const USUARIOMODIFICA As String = "USUARIOMODIFICA"
            Public Const TIPO As String = "TIPO"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
        End Class ' ColumnNames
    End Class
    Public Class PRORROGADETALLE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRORROGADETALLE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_prorroga As Int32) As List(Of Entities.Procedures.PRORROGADETALLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRORROGADETALLE"

                Dim VId_Prorroga As New SqlParameter("@Id_Prorroga", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_prorroga)
                Dim params() As SqlParameter = {VId_Prorroga}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRORROGADETALLE
                    NewItem.prorroga_id = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.fechaprorroga = IIf(Convert.IsDBNull(dr("fechaProrroga")), Nothing, dr("fechaProrroga"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.antecedentes = IIf(Convert.IsDBNull(dr("antecedentes")), Nothing, dr("antecedentes"))
                    NewItem.estadoalingreso = IIf(Convert.IsDBNull(dr("estadoAlIngreso")), Nothing, dr("estadoAlIngreso"))
                    NewItem.estadoprorroga = IIf(Convert.IsDBNull(dr("estadoProrroga")), Nothing, dr("estadoProrroga"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRORROGADETALLE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRORROGADETALLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGADETALLE
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGADETALLE. </remarks>
        Public Class ColumnNames
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const FECHAPRORROGA As String = "FECHAPRORROGA"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const ANTECEDENTES As String = "ANTECEDENTES"
            Public Const ESTADOALINGRESO As String = "ESTADOALINGRESO"
            Public Const ESTADOPRORROGA As String = "ESTADOPRORROGA"
        End Class ' ColumnNames
    End Class
    Public Class PRORROGAEVOLUCIONDETALLE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRORROGAEVOLUCIONDETALLE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_prorrogaitem As Int32) As List(Of Entities.Procedures.PRORROGAEVOLUCIONDETALLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRORROGAEVOLUCIONDETALLE"

                Dim VId_ProrrogaItem As New SqlParameter("@Id_ProrrogaItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_prorrogaitem)
                Dim params() As SqlParameter = {VId_ProrrogaItem}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRORROGAEVOLUCIONDETALLE
                    NewItem.id = IIf(Convert.IsDBNull(dr("id")), Nothing, dr("id"))
                    NewItem.prorroga_id = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.evolucion = IIf(Convert.IsDBNull(dr("evolucion")), Nothing, dr("evolucion"))
                    NewItem.kinesiomuscular = IIf(Convert.IsDBNull(dr("kinesioMuscular")), Nothing, dr("kinesioMuscular"))
                    NewItem.kinesiomusculartxt = IIf(Convert.IsDBNull(dr("kinesioMuscularTxt")), Nothing, dr("kinesioMuscularTxt"))
                    NewItem.fono = IIf(Convert.IsDBNull(dr("fono")), Nothing, dr("fono"))
                    NewItem.fonotxt = IIf(Convert.IsDBNull(dr("fonoTxt")), Nothing, dr("fonoTxt"))
                    NewItem.terapiaocup = IIf(Convert.IsDBNull(dr("terapiaOcup")), Nothing, dr("terapiaOcup"))
                    NewItem.terapiaocuptxt = IIf(Convert.IsDBNull(dr("terapiaOcupTxt")), Nothing, dr("terapiaOcupTxt"))
                    NewItem.psicologia = IIf(Convert.IsDBNull(dr("psicologia")), Nothing, dr("psicologia"))
                    NewItem.psicologiatxt = IIf(Convert.IsDBNull(dr("psicologiaTxt")), Nothing, dr("psicologiaTxt"))
                    NewItem.nutricion = IIf(Convert.IsDBNull(dr("nutricion")), Nothing, dr("nutricion"))
                    NewItem.nutriciontxt = IIf(Convert.IsDBNull(dr("nutricionTxt")), Nothing, dr("nutricionTxt"))
                    NewItem.musicoterapia = IIf(Convert.IsDBNull(dr("musicoterapia")), Nothing, dr("musicoterapia"))
                    NewItem.musicoterapiatxt = IIf(Convert.IsDBNull(dr("musicoterapiaTxt")), Nothing, dr("musicoterapiaTxt"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.usuariomodifica = IIf(Convert.IsDBNull(dr("usuarioModifica")), Nothing, dr("usuarioModifica"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRORROGAEVOLUCIONDETALLE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRORROGAEVOLUCIONDETALLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGAEVOLUCIONDETALLE
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGAEVOLUCIONDETALLE. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const EVOLUCION As String = "EVOLUCION"
            Public Const KINESIOMUSCULAR As String = "KINESIOMUSCULAR"
            Public Const KINESIOMUSCULARTXT As String = "KINESIOMUSCULARTXT"
            Public Const FONO As String = "FONO"
            Public Const FONOTXT As String = "FONOTXT"
            Public Const TERAPIAOCUP As String = "TERAPIAOCUP"
            Public Const TERAPIAOCUPTXT As String = "TERAPIAOCUPTXT"
            Public Const PSICOLOGIA As String = "PSICOLOGIA"
            Public Const PSICOLOGIATXT As String = "PSICOLOGIATXT"
            Public Const NUTRICION As String = "NUTRICION"
            Public Const NUTRICIONTXT As String = "NUTRICIONTXT"
            Public Const MUSICOTERAPIA As String = "MUSICOTERAPIA"
            Public Const MUSICOTERAPIATXT As String = "MUSICOTERAPIATXT"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const USUARIOMODIFICA As String = "USUARIOMODIFICA"
        End Class ' ColumnNames
    End Class
    Public Class PRORROGASULTIMAMODIFICACION
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRORROGASULTIMAMODIFICACION)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal prorroga_id As Int32, ByVal tipo As String) As List(Of Entities.Procedures.PRORROGASULTIMAMODIFICACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRORROGASULTIMAMODIFICACION"

                Dim Vprorroga_id As New SqlParameter("@prorroga_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, prorroga_id)
                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim params() As SqlParameter = {Vprorroga_id, VTipo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRORROGASULTIMAMODIFICACION
                    NewItem.id = IIf(Convert.IsDBNull(dr("id")), Nothing, dr("id"))
                    NewItem.prorroga_id = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.evolucion = IIf(Convert.IsDBNull(dr("evolucion")), Nothing, dr("evolucion"))
                    NewItem.kinesiomuscular = IIf(Convert.IsDBNull(dr("kinesioMuscular")), Nothing, dr("kinesioMuscular"))
                    NewItem.kinesiomusculartxt = IIf(Convert.IsDBNull(dr("kinesioMuscularTxt")), Nothing, dr("kinesioMuscularTxt"))
                    NewItem.fono = IIf(Convert.IsDBNull(dr("fono")), Nothing, dr("fono"))
                    NewItem.fonotxt = IIf(Convert.IsDBNull(dr("fonoTxt")), Nothing, dr("fonoTxt"))
                    NewItem.terapiaocup = IIf(Convert.IsDBNull(dr("terapiaOcup")), Nothing, dr("terapiaOcup"))
                    NewItem.terapiaocuptxt = IIf(Convert.IsDBNull(dr("terapiaOcupTxt")), Nothing, dr("terapiaOcupTxt"))
                    NewItem.psicologia = IIf(Convert.IsDBNull(dr("psicologia")), Nothing, dr("psicologia"))
                    NewItem.psicologiatxt = IIf(Convert.IsDBNull(dr("psicologiaTxt")), Nothing, dr("psicologiaTxt"))
                    NewItem.nutricion = IIf(Convert.IsDBNull(dr("nutricion")), Nothing, dr("nutricion"))
                    NewItem.nutriciontxt = IIf(Convert.IsDBNull(dr("nutricionTxt")), Nothing, dr("nutricionTxt"))
                    NewItem.musicoterapia = IIf(Convert.IsDBNull(dr("musicoterapia")), Nothing, dr("musicoterapia"))
                    NewItem.musicoterapiatxt = IIf(Convert.IsDBNull(dr("musicoterapiaTxt")), Nothing, dr("musicoterapiaTxt"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.usuariomodifica = IIf(Convert.IsDBNull(dr("usuarioModifica")), Nothing, dr("usuarioModifica"))
                    NewItem.tipo = IIf(Convert.IsDBNull(dr("Tipo")), Nothing, dr("Tipo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRORROGASULTIMAMODIFICACION)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRORROGASULTIMAMODIFICACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGASULTIMAMODIFICACION
        ''' Fecha de Creación  : viernes, 26 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGASULTIMAMODIFICACION. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const EVOLUCION As String = "EVOLUCION"
            Public Const KINESIOMUSCULAR As String = "KINESIOMUSCULAR"
            Public Const KINESIOMUSCULARTXT As String = "KINESIOMUSCULARTXT"
            Public Const FONO As String = "FONO"
            Public Const FONOTXT As String = "FONOTXT"
            Public Const TERAPIAOCUP As String = "TERAPIAOCUP"
            Public Const TERAPIAOCUPTXT As String = "TERAPIAOCUPTXT"
            Public Const PSICOLOGIA As String = "PSICOLOGIA"
            Public Const PSICOLOGIATXT As String = "PSICOLOGIATXT"
            Public Const NUTRICION As String = "NUTRICION"
            Public Const NUTRICIONTXT As String = "NUTRICIONTXT"
            Public Const MUSICOTERAPIA As String = "MUSICOTERAPIA"
            Public Const MUSICOTERAPIATXT As String = "MUSICOTERAPIATXT"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const USUARIOMODIFICA As String = "USUARIOMODIFICA"
            Public Const TIPO As String = "TIPO"
        End Class ' ColumnNames
    End Class
    Public Class GET_PISO_POR_SEDE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.GET_PISO_POR_SEDE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal sede_id As Int32) As List(Of Entities.Procedures.GET_PISO_POR_SEDE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "GET_PISO_POR_SEDE"

                Dim VSEDE_ID As New SqlParameter("@SEDE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sede_id)
                Dim params() As SqlParameter = {VSEDE_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.GET_PISO_POR_SEDE
                    NewItem.piso_id = IIf(Convert.IsDBNull(dr("piso_id")), Nothing, dr("piso_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.GET_PISO_POR_SEDE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.GET_PISO_POR_SEDE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla GET_PISO_POR_SEDE
        ''' Fecha de Creación  : viernes, 26 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla GET_PISO_POR_SEDE. </remarks>
        Public Class ColumnNames
            Public Const PISO_ID As String = "PISO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class
    Public Class PRORROGAULTIMODETALLE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRORROGAULTIMODETALLE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_prorroga As Int32) As List(Of Entities.Procedures.PRORROGAULTIMODETALLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRORROGAULTIMODETALLE"

                Dim VId_Prorroga As New SqlParameter("@Id_Prorroga", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_prorroga)
                Dim params() As SqlParameter = {VId_Prorroga}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRORROGAULTIMODETALLE
                    NewItem.prorroga_id = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.fechaprorroga = IIf(Convert.IsDBNull(dr("fechaProrroga")), Nothing, dr("fechaProrroga"))
                    NewItem.estadoprorroga = IIf(Convert.IsDBNull(dr("estadoProrroga")), Nothing, dr("estadoProrroga"))
                    NewItem.estadoalingreso = IIf(Convert.IsDBNull(dr("estadoAlIngreso")), Nothing, dr("estadoAlIngreso"))
                    NewItem.antecedentes = IIf(Convert.IsDBNull(dr("antecedentes")), Nothing, dr("antecedentes"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRORROGAULTIMODETALLE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRORROGAULTIMODETALLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGAULTIMODETALLE
        ''' Fecha de Creación  : viernes, 26 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGAULTIMODETALLE. </remarks>
        Public Class ColumnNames
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const FECHAPRORROGA As String = "FECHAPRORROGA"
            Public Const ESTADOPRORROGA As String = "ESTADOPRORROGA"
            Public Const ESTADOALINGRESO As String = "ESTADOALINGRESO"
            Public Const ANTECEDENTES As String = "ANTECEDENTES"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_HORARIOS_PACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_HORARIOS_PACIENTE)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32) As List(Of Entities.Procedures.MED_GET_HORARIOS_PACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_HORARIOS_PACIENTE"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim params() As SqlParameter = {VPACIENTE_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_HORARIOS_PACIENTE
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.hs_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.hs_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.hs_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.hs_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.hs_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.hs_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.hs_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.hs_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.hs_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.hs_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.hs_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.hs_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.hs_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.hs_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.hs_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.hs_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.hs_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.hs_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.hs_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.hs_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.hs_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.hs_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.hs_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.hs_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.hs_sh = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_HORARIOS_PACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_HORARIOS_PACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_HORARIOS_PACIENTE
        ''' Fecha de Creación  : jueves, 1 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_HORARIOS_PACIENTE. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
        End Class ' ColumnNames
    End Class
    Public Class MED_UP_HORARIOS_PACIENTE
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32, ByVal hs_08 As Int32, ByVal hs_09 As Int32, ByVal hs_10 As Int32, ByVal hs_11 As Int32, ByVal hs_12 As Int32, ByVal hs_13 As Int32, ByVal hs_14 As Int32, ByVal hs_15 As Int32, ByVal hs_16 As Int32, ByVal hs_17 As Int32, ByVal hs_18 As Int32, ByVal hs_19 As Int32, ByVal hs_20 As Int32, ByVal hs_21 As Int32, ByVal hs_22 As Int32, ByVal hs_23 As Int32, ByVal hs_24 As Int32, ByVal hs_01 As Int32, ByVal hs_02 As Int32, ByVal hs_03 As Int32, ByVal hs_04 As Int32, ByVal hs_05 As Int32, ByVal hs_06 As Int32, ByVal hs_07 As Int32, ByVal hs_sh As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_UP_HORARIOS_PACIENTE"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, hs_sh)
                Dim params() As SqlParameter = {VPACIENTE_ID, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_UP_HORARIOS_PACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_UP_HORARIOS_PACIENTE
        ''' Fecha de Creación  : lunes, 5 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_UP_HORARIOS_PACIENTE. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class HC_TRAEDATOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.HC_TRAEDATOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32, ByVal tipo As String) As List(Of Entities.Procedures.HC_TRAEDATOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "HC_TRAEDATOS"

                Dim VPaciente_id As New SqlParameter("@Paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim params() As SqlParameter = {VPaciente_id, VTipo}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.HC_TRAEDATOS
                    NewItem.hc_id = IIf(Convert.IsDBNull(dr("HC_id")), Nothing, dr("HC_id"))
                    NewItem.fecha = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.texto = IIf(Convert.IsDBNull(dr("texto")), Nothing, dr("texto"))
                    NewItem.tipo = IIf(Convert.IsDBNull(dr("tipo")), Nothing, dr("tipo"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.nombreusuario = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    NewItem.sector_id = IIf(Convert.IsDBNull(dr("sector_id")), Nothing, dr("sector_id"))
                    NewItem.sector = IIf(Convert.IsDBNull(dr("Sector")), Nothing, dr("Sector"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.HC_TRAEDATOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.HC_TRAEDATOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla HC_TRAEDATOS
        ''' Fecha de Creación  : martes, 6 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla HC_TRAEDATOS. </remarks>
        Public Class ColumnNames
            Public Const HC_ID As String = "HC_ID"
            Public Const FECHA As String = "FECHA"
            Public Const TEXTO As String = "TEXTO"
            Public Const TIPO As String = "TIPO"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const SECTOR As String = "SECTOR"
        End Class ' ColumnNames
    End Class
    Public Class TRAEDESCARTABLES
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEDESCARTABLES)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal descartable As String) As List(Of Entities.Procedures.TRAEDESCARTABLES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEDESCARTABLES"

                Dim VDescartable As New SqlParameter("@Descartable", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, descartable)
                Dim params() As SqlParameter = {VDescartable}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEDESCARTABLES
                    NewItem.art_codgen = IIf(Convert.IsDBNull(dr("art_CodGen")), Nothing, dr("art_CodGen"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.artele_desc2 = IIf(Convert.IsDBNull(dr("artele_Desc2")), Nothing, dr("artele_Desc2"))
                    NewItem.artele_desc1 = IIf(Convert.IsDBNull(dr("artele_Desc1")), Nothing, dr("artele_Desc1"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEDESCARTABLES)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEDESCARTABLES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEDESCARTABLES
        ''' Fecha de Creación  : jueves, 8 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEDESCARTABLES. </remarks>
        Public Class ColumnNames
            Public Const ART_CODGEN As String = "ART_CODGEN"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const ARTELE_DESC2 As String = "ARTELE_DESC2"
            Public Const ARTELE_DESC1 As String = "ARTELE_DESC1"
        End Class ' ColumnNames
    End Class
    Public Class TRAEDESCARTABLESPROCEDIMIENTO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.TRAEDESCARTABLESPROCEDIMIENTO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal procedimiento As Int32) As List(Of Entities.Procedures.TRAEDESCARTABLESPROCEDIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "TRAEDESCARTABLESPROCEDIMIENTO"

                Dim VProcedimiento As New SqlParameter("@Procedimiento", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, procedimiento)
                Dim params() As SqlParameter = {VProcedimiento}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.TRAEDESCARTABLESPROCEDIMIENTO
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.descartable_id = IIf(Convert.IsDBNull(dr("descartable_id")), Nothing, dr("descartable_id"))
                    NewItem.art_descgen = IIf(Convert.IsDBNull(dr("art_DescGen")), Nothing, dr("art_DescGen"))
                    NewItem.imprimible = IIf(Convert.IsDBNull(dr("imprimible")), Nothing, dr("imprimible"))
                    NewItem.cantidad = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.TRAEDESCARTABLESPROCEDIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.TRAEDESCARTABLESPROCEDIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TRAEDESCARTABLESPROCEDIMIENTO
        ''' Fecha de Creación  : jueves, 8 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TRAEDESCARTABLESPROCEDIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const DESCARTABLE_ID As String = "DESCARTABLE_ID"
            Public Const ART_DESCGEN As String = "ART_DESCGEN"
            Public Const IMPRIMIBLE As String = "IMPRIMIBLE"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class
    Public Class _PRO_BORRARDESCARTABLESPROC
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New ArrayList
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal procid As Int32) As Object
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "_PRO_BORRARDESCARTABLESPROC"

                Dim VProcID As New SqlParameter("@ProcID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, procid)
                Dim params() As SqlParameter = {VProcID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _itemList.Add(_rowsItemList)

                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As ArrayList
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures._PRO_BORRARDESCARTABLESPROC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla _PRO_BORRARDESCARTABLESPROC
        ''' Fecha de Creación  : jueves, 8 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla _PRO_BORRARDESCARTABLESPROC. </remarks>
        Public Class ColumnNames
        End Class ' ColumnNames
    End Class
    Public Class PRO_GET_PROCEDIMIENTOTODOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTOTODOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal procedimiento As String) As List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTOTODOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "PRO_GET_PROCEDIMIENTOTODOS"

                Dim VPROCEDIMIENTO As New SqlParameter("@PROCEDIMIENTO", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, procedimiento)
                Dim params() As SqlParameter = {VPROCEDIMIENTO}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.PRO_GET_PROCEDIMIENTOTODOS
                    NewItem.procedimiento_id = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.tipoprocedimiento_id = IIf(Convert.IsDBNull(dr("tipoProcedimiento_id")), Nothing, dr("tipoProcedimiento_id"))
                    NewItem.descripciontipo = IIf(Convert.IsDBNull(dr("descripcionTipo")), Nothing, dr("descripcionTipo"))
                    NewItem.inactivo = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.PRO_GET_PROCEDIMIENTOTODOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.PRO_GET_PROCEDIMIENTOTODOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GET_PROCEDIMIENTOTODOS
        ''' Fecha de Creación  : viernes, 9 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GET_PROCEDIMIENTOTODOS. </remarks>
        Public Class ColumnNames
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const TIPOPROCEDIMIENTO_ID As String = "TIPOPROCEDIMIENTO_ID"
            Public Const DESCRIPCIONTIPO As String = "DESCRIPCIONTIPO"
            Public Const INACTIVO As String = "INACTIVO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_SUMINISTRO_MEDICACION_HISTORICO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION_HISTORICO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32) As List(Of Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION_HISTORICO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_SUMINISTRO_MEDICACION_HISTORICO"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim params() As SqlParameter = {VPACIENTE_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION_HISTORICO
                    NewItem.suministrodemedicacion_id = IIf(Convert.IsDBNull(dr("suministroDeMedicacion_id")), Nothing, dr("suministroDeMedicacion_id"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.medicamento_id = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.droga = IIf(Convert.IsDBNull(dr("Droga")), Nothing, dr("Droga"))
                    NewItem.presentacionart = IIf(Convert.IsDBNull(dr("PresentacionArt")), Nothing, dr("PresentacionArt"))
                    NewItem.potenciaart = IIf(Convert.IsDBNull(dr("PotenciaArt")), Nothing, dr("PotenciaArt"))
                    NewItem.fechainicio = IIf(Convert.IsDBNull(dr("fechaInicio")), Nothing, dr("fechaInicio"))
                    NewItem.dosis = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.presentacion_id = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.potencia = IIf(Convert.IsDBNull(dr("potencia")), Nothing, dr("potencia"))
                    NewItem.via_id = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.viatieneotro = IIf(Convert.IsDBNull(dr("viaTieneOtro")), Nothing, dr("viaTieneOtro"))
                    NewItem.viaotro = IIf(Convert.IsDBNull(dr("viaOtro")), Nothing, dr("viaOtro"))
                    NewItem.diluyente_id = IIf(Convert.IsDBNull(dr("diluyente_id")), Nothing, dr("diluyente_id"))
                    NewItem.ml = IIf(Convert.IsDBNull(dr("ml")), Nothing, dr("ml"))
                    NewItem.durante_id = IIf(Convert.IsDBNull(dr("durante_id")), Nothing, dr("durante_id"))
                    NewItem.periodo_id = IIf(Convert.IsDBNull(dr("periodo_id")), Nothing, dr("periodo_id"))
                    NewItem.lapsodetiempo = IIf(Convert.IsDBNull(dr("lapsoDeTiempo")), Nothing, dr("lapsoDeTiempo"))
                    NewItem.lapsodetiempohasta = IIf(Convert.IsDBNull(dr("lapsoDeTiempoHasta")), Nothing, dr("lapsoDeTiempoHasta"))
                    NewItem.horariodesuministro_id = IIf(Convert.IsDBNull(dr("horarioDeSuministro_id")), Nothing, dr("horarioDeSuministro_id"))
                    NewItem.hs_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.hs_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.hs_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.hs_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.hs_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.hs_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.hs_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.hs_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.hs_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.hs_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.hs_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.hs_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.hs_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.hs_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.hs_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.hs_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.hs_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.hs_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.hs_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.hs_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.hs_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.hs_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.hs_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.hs_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.hs_sh = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.horarioevento = IIf(Convert.IsDBNull(dr("horarioEvento")), Nothing, dr("horarioEvento"))
                    NewItem.evento = IIf(Convert.IsDBNull(dr("evento")), Nothing, dr("evento"))
                    NewItem.horariootro = IIf(Convert.IsDBNull(dr("horarioOtro")), Nothing, dr("horarioOtro"))
                    NewItem.observacion = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.usuario_id = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.fechaaltasistema = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.fechamodificacion = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.fechabaja = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.motivobaja = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    NewItem.presentacion = IIf(Convert.IsDBNull(dr("Presentacion")), Nothing, dr("Presentacion"))
                    NewItem.unidaddemedida_id = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.unimed = IIf(Convert.IsDBNull(dr("UniMed")), Nothing, dr("UniMed"))
                    NewItem.via = IIf(Convert.IsDBNull(dr("Via")), Nothing, dr("Via"))
                    NewItem.diluyente = IIf(Convert.IsDBNull(dr("Diluyente")), Nothing, dr("Diluyente"))
                    NewItem.durante = IIf(Convert.IsDBNull(dr("Durante")), Nothing, dr("Durante"))
                    NewItem.periodo = IIf(Convert.IsDBNull(dr("Periodo")), Nothing, dr("Periodo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION_HISTORICO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_SUMINISTRO_MEDICACION_HISTORICO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_SUMINISTRO_MEDICACION_HISTORICO
        ''' Fecha de Creación  : jueves, 15 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_SUMINISTRO_MEDICACION_HISTORICO. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEMEDICACION_ID As String = "SUMINISTRODEMEDICACION_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const DROGA As String = "DROGA"
            Public Const PRESENTACIONART As String = "PRESENTACIONART"
            Public Const POTENCIAART As String = "POTENCIAART"
            Public Const FECHAINICIO As String = "FECHAINICIO"
            Public Const DOSIS As String = "DOSIS"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const POTENCIA As String = "POTENCIA"
            Public Const VIA_ID As String = "VIA_ID"
            Public Const VIATIENEOTRO As String = "VIATIENEOTRO"
            Public Const VIAOTRO As String = "VIAOTRO"
            Public Const DILUYENTE_ID As String = "DILUYENTE_ID"
            Public Const ML As String = "ML"
            Public Const DURANTE_ID As String = "DURANTE_ID"
            Public Const PERIODO_ID As String = "PERIODO_ID"
            Public Const LAPSODETIEMPO As String = "LAPSODETIEMPO"
            Public Const LAPSODETIEMPOHASTA As String = "LAPSODETIEMPOHASTA"
            Public Const HORARIODESUMINISTRO_ID As String = "HORARIODESUMINISTRO_ID"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const HORARIOEVENTO As String = "HORARIOEVENTO"
            Public Const EVENTO As String = "EVENTO"
            Public Const HORARIOOTRO As String = "HORARIOOTRO"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
            Public Const PRESENTACION As String = "PRESENTACION"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const UNIMED As String = "UNIMED"
            Public Const VIA As String = "VIA"
            Public Const DILUYENTE As String = "DILUYENTE"
            Public Const DURANTE As String = "DURANTE"
            Public Const PERIODO As String = "PERIODO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_DIAGNOSTICO_CAPITULO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_CAPITULO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_CAPITULO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_DIAGNOSTICO_CAPITULO"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_DIAGNOSTICO_CAPITULO
                    NewItem.capitulo = IIf(Convert.IsDBNull(dr("capitulo")), Nothing, dr("capitulo"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.grupo = IIf(Convert.IsDBNull(dr("grupo")), Nothing, dr("grupo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_CAPITULO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_DIAGNOSTICO_CAPITULO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_CAPITULO
        ''' Fecha de Creación  : miércoles, 21 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_CAPITULO. </remarks>
        Public Class ColumnNames
            Public Const CAPITULO As String = "CAPITULO"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const GRUPO As String = "GRUPO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_DIAGNOSTICO_RUBRO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_RUBRO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal grupo_id As String) As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_RUBRO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_DIAGNOSTICO_RUBRO"

                Dim VGRUPO_ID As New SqlParameter("@GRUPO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, grupo_id)
                Dim params() As SqlParameter = {VGRUPO_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_DIAGNOSTICO_RUBRO
                    NewItem.capitulo = IIf(Convert.IsDBNull(dr("capitulo")), Nothing, dr("capitulo"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.grupo = IIf(Convert.IsDBNull(dr("grupo")), Nothing, dr("grupo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_RUBRO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_DIAGNOSTICO_RUBRO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_RUBRO
        ''' Fecha de Creación  : miércoles, 21 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_RUBRO. </remarks>
        Public Class ColumnNames
            Public Const CAPITULO As String = "CAPITULO"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const GRUPO As String = "GRUPO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_DIAGNOSTICO_SUBRUBRO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_SUBRUBRO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal grupo_id As String) As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_SUBRUBRO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_DIAGNOSTICO_SUBRUBRO"

                Dim VGRUPO_ID As New SqlParameter("@GRUPO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, grupo_id)
                Dim params() As SqlParameter = {VGRUPO_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_DIAGNOSTICO_SUBRUBRO
                    NewItem.capitulo = IIf(Convert.IsDBNull(dr("capitulo")), Nothing, dr("capitulo"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.grupo = IIf(Convert.IsDBNull(dr("grupo")), Nothing, dr("grupo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_SUBRUBRO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_DIAGNOSTICO_SUBRUBRO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_SUBRUBRO
        ''' Fecha de Creación  : miércoles, 21 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_SUBRUBRO. </remarks>
        Public Class ColumnNames
            Public Const CAPITULO As String = "CAPITULO"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const GRUPO As String = "GRUPO"
        End Class ' ColumnNames
    End Class
    Public Class MED_GET_DIAGNOSTICO_ITEM
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_ITEM)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal capitulo_id As String) As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_ITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "MED_GET_DIAGNOSTICO_ITEM"

                Dim VCAPITULO_ID As New SqlParameter("@CAPITULO_ID", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, capitulo_id)
                Dim params() As SqlParameter = {VCAPITULO_ID}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.MED_GET_DIAGNOSTICO_ITEM
                    NewItem.capitulo = IIf(Convert.IsDBNull(dr("capitulo")), Nothing, dr("capitulo"))
                    NewItem.descripcion = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.grupo = IIf(Convert.IsDBNull(dr("grupo")), Nothing, dr("grupo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.MED_GET_DIAGNOSTICO_ITEM)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.MED_GET_DIAGNOSTICO_ITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_ITEM
        ''' Fecha de Creación  : miércoles, 21 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_GET_DIAGNOSTICO_ITEM. </remarks>
        Public Class ColumnNames
            Public Const CAPITULO As String = "CAPITULO"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const GRUPO As String = "GRUPO"
        End Class ' ColumnNames
    End Class
    Public Class EST_MAXIDLABORATORIO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EST_MAXIDLABORATORIO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.EST_MAXIDLABORATORIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EST_MAXIDLABORATORIO"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EST_MAXIDLABORATORIO
                    NewItem.id_solicitud = IIf(Convert.IsDBNull(dr("id_solicitud")), Nothing, dr("id_solicitud"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EST_MAXIDLABORATORIO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EST_MAXIDLABORATORIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_MAXIDLABORATORIO
        ''' Fecha de Creación  : miércoles, 21 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_MAXIDLABORATORIO. </remarks>
        Public Class ColumnNames
            Public Const ID_SOLICITUD As String = "ID_SOLICITUD"
        End Class ' ColumnNames
    End Class
    Public Class EST_LABORATORIO_TRAEPEDIDOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EST_LABORATORIO_TRAEPEDIDOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal paciente_id As Int32, ByVal estado As Int32, ByVal tipo As Int32, ByVal sector As String, ByVal fecha As DateTime, ByVal fecha_hasta As DateTime, ByVal inf As String) As List(Of Entities.Procedures.EST_LABORATORIO_TRAEPEDIDOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EST_LABORATORIO_TRAEPEDIDOS"

                Dim VPACIENTE_ID As New SqlParameter("@PACIENTE_ID", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, paciente_id)
                Dim VESTADO As New SqlParameter("@ESTADO", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, estado)
                Dim VTIPO As New SqlParameter("@TIPO", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, tipo)
                Dim VSECTOR As New SqlParameter("@SECTOR", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, sector)
                Dim VFECHA As New SqlParameter("@FECHA", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fecha)
                Dim VFECHA_HASTA As New SqlParameter("@FECHA_HASTA", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, fecha_hasta)
                Dim VINF As New SqlParameter("@INF", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, inf)
                Dim params() As SqlParameter = {VPACIENTE_ID, VESTADO, VTIPO, VSECTOR, VFECHA, VFECHA_HASTA, VINF}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EST_LABORATORIO_TRAEPEDIDOS
                    NewItem.id_solicitud = IIf(Convert.IsDBNull(dr("id_solicitud")), Nothing, dr("id_solicitud"))
                    NewItem.fechasolicitud = IIf(Convert.IsDBNull(dr("fechaSolicitud")), Nothing, dr("fechaSolicitud"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.nombre = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.apellido = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.hab = IIf(Convert.IsDBNull(dr("Hab")), Nothing, dr("Hab"))
                    NewItem.tipo = IIf(Convert.IsDBNull(dr("tipo")), Nothing, dr("tipo"))
                    NewItem.otrosestudios = IIf(Convert.IsDBNull(dr("otrosEstudios")), Nothing, dr("otrosEstudios"))
                    NewItem.observacionesmed = IIf(Convert.IsDBNull(dr("observacionesMed")), Nothing, dr("observacionesMed"))
                    NewItem.observacionesbioq = IIf(Convert.IsDBNull(dr("observacionesBioq")), Nothing, dr("observacionesBioq"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.descripcionestado = IIf(Convert.IsDBNull(dr("descripcionEstado")), Nothing, dr("descripcionEstado"))
                    NewItem.tipo_id = IIf(Convert.IsDBNull(dr("tipo_id")), Nothing, dr("tipo_id"))
                    NewItem.tipodescripcion = IIf(Convert.IsDBNull(dr("tipoDescripcion")), Nothing, dr("tipoDescripcion"))
                    NewItem.nombreusuario = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    NewItem.id_usuario = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEPEDIDOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EST_LABORATORIO_TRAEPEDIDOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIO_TRAEPEDIDOS
        ''' Fecha de Creación  : jueves, 22 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIO_TRAEPEDIDOS. </remarks>
        Public Class ColumnNames
            Public Const ID_SOLICITUD As String = "ID_SOLICITUD"
            Public Const FECHASOLICITUD As String = "FECHASOLICITUD"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const HAB As String = "HAB"
            Public Const TIPO As String = "TIPO"
            Public Const OTROSESTUDIOS As String = "OTROSESTUDIOS"
            Public Const OBSERVACIONESMED As String = "OBSERVACIONESMED"
            Public Const OBSERVACIONESBIOQ As String = "OBSERVACIONESBIOQ"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const DESCRIPCIONESTADO As String = "DESCRIPCIONESTADO"
            Public Const TIPO_ID As String = "TIPO_ID"
            Public Const TIPODESCRIPCION As String = "TIPODESCRIPCION"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
            Public Const ID_USUARIO As String = "ID_USUARIO"
        End Class ' ColumnNames
    End Class
    Public Class EST_LABORATORIO_TRAEUNPEDIDO
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EST_LABORATORIO_TRAEUNPEDIDO)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items(ByVal id_solicitud As Int32) As List(Of Entities.Procedures.EST_LABORATORIO_TRAEUNPEDIDO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EST_LABORATORIO_TRAEUNPEDIDO"

                Dim VID_SOLICITUD As New SqlParameter("@ID_SOLICITUD", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, id_solicitud)
                Dim params() As SqlParameter = {VID_SOLICITUD}
                SqlHelper.CommandTimeout = _commandTimeOut

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EST_LABORATORIO_TRAEUNPEDIDO
                    NewItem.id_solicitud = IIf(Convert.IsDBNull(dr("id_solicitud")), Nothing, dr("id_solicitud"))
                    NewItem.fechasolicitud = IIf(Convert.IsDBNull(dr("fechaSolicitud")), Nothing, dr("fechaSolicitud"))
                    NewItem.paciente_id = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.tipo = IIf(Convert.IsDBNull(dr("tipo")), Nothing, dr("tipo"))
                    NewItem.otrosestudios = IIf(Convert.IsDBNull(dr("otrosEstudios")), Nothing, dr("otrosEstudios"))
                    NewItem.observacionesmed = IIf(Convert.IsDBNull(dr("observacionesMed")), Nothing, dr("observacionesMed"))
                    NewItem.observacionesbioq = IIf(Convert.IsDBNull(dr("observacionesBioq")), Nothing, dr("observacionesBioq"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.descripcionestado = IIf(Convert.IsDBNull(dr("descripcionEstado")), Nothing, dr("descripcionEstado"))
                    NewItem.estudio_id = IIf(Convert.IsDBNull(dr("estudio_id")), Nothing, dr("estudio_id"))
                    NewItem.descestudio = IIf(Convert.IsDBNull(dr("descEstudio")), Nothing, dr("descEstudio"))
                    NewItem.tipoestudio_id = IIf(Convert.IsDBNull(dr("tipoEstudio_id")), Nothing, dr("tipoEstudio_id"))
                    NewItem.descripciontipoest = IIf(Convert.IsDBNull(dr("descripcionTipoEst")), Nothing, dr("descripcionTipoEst"))
                    NewItem.nroitem = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.tipodescripcion = IIf(Convert.IsDBNull(dr("Tipodescripcion")), Nothing, dr("Tipodescripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEUNPEDIDO)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EST_LABORATORIO_TRAEUNPEDIDO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIO_TRAEUNPEDIDO
        ''' Fecha de Creación  : lunes, 3 de octubre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIO_TRAEUNPEDIDO. </remarks>
        Public Class ColumnNames
            Public Const ID_SOLICITUD As String = "ID_SOLICITUD"
            Public Const FECHASOLICITUD As String = "FECHASOLICITUD"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const TIPO As String = "TIPO"
            Public Const OTROSESTUDIOS As String = "OTROSESTUDIOS"
            Public Const OBSERVACIONESMED As String = "OBSERVACIONESMED"
            Public Const OBSERVACIONESBIOQ As String = "OBSERVACIONESBIOQ"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const DESCRIPCIONESTADO As String = "DESCRIPCIONESTADO"
            Public Const ESTUDIO_ID As String = "ESTUDIO_ID"
            Public Const DESCESTUDIO As String = "DESCESTUDIO"
            Public Const TIPOESTUDIO_ID As String = "TIPOESTUDIO_ID"
            Public Const DESCRIPCIONTIPOEST As String = "DESCRIPCIONTIPOEST"
            Public Const NROITEM As String = "NROITEM"
            Public Const TIPODESCRIPCION As String = "TIPODESCRIPCION"
        End Class ' ColumnNames
    End Class


    Public Class EST_LABORATORIO_TRAEANALISISCLINICA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISCLINICA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISCLINICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EST_LABORATORIO_TRAEANALISISCLINICA"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EST_LABORATORIO_TRAEANALISISCLINICA
                    NewItem.estudio_id = IIf(Convert.IsDBNull(dr("estudio_id")), Nothing, dr("estudio_id"))
                    NewItem.descestudio = IIf(Convert.IsDBNull(dr("descEstudio")), Nothing, dr("descEstudio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISCLINICA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EST_LABORATORIO_TRAEANALISISCLINICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIO_TRAEANALISISCLINICA
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIO_TRAEANALISISCLINICA. </remarks>
        Public Class ColumnNames
            Public Const ESTUDIO_ID As String = "ESTUDIO_ID"
            Public Const DESCESTUDIO As String = "DESCESTUDIO"
        End Class ' ColumnNames
    End Class
    Public Class EST_LABORATORIO_TRAEANALISISDERIVADOS
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISDERIVADOS)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISDERIVADOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EST_LABORATORIO_TRAEANALISISDERIVADOS"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EST_LABORATORIO_TRAEANALISISDERIVADOS
                    NewItem.estudio_id = IIf(Convert.IsDBNull(dr("estudio_id")), Nothing, dr("estudio_id"))
                    NewItem.descestudio = IIf(Convert.IsDBNull(dr("descEstudio")), Nothing, dr("descEstudio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISDERIVADOS)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EST_LABORATORIO_TRAEANALISISDERIVADOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIO_TRAEANALISISDERIVADOS
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIO_TRAEANALISISDERIVADOS. </remarks>
        Public Class ColumnNames
            Public Const ESTUDIO_ID As String = "ESTUDIO_ID"
            Public Const DESCESTUDIO As String = "DESCESTUDIO"
        End Class ' ColumnNames
    End Class
    Public Class EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _transaction As Data.SqlClient.SqlTransaction
        Private _connectionstring As String = Nothing
        Private _commandTimeOut As Integer = 60
        Protected _itemList As New List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA)
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Event OnError(ByVal ex As Exception)
        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Property CommandTimeOut() As Integer
            Get
                Return _commandTimeOut
            End Get
            Set(ByVal value As Integer)
                _commandTimeOut = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property

        Public Function Items() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Dim _sqlErr As String = Nothing
            Try
                _itemList.Clear()
                Dim _commandText As String = "EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA"


                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Procedures.EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA
                    NewItem.estudio_id = IIf(Convert.IsDBNull(dr("estudio_id")), Nothing, dr("estudio_id"))
                    NewItem.descestudio = IIf(Convert.IsDBNull(dr("descEstudio")), Nothing, dr("descEstudio"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Procedures.EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA)
            Get
                Return _itemList
            End Get

        End Property

        Public Class ITEM
            Inherits Entities.Procedures.EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIO_TRAEANALISISMICROBIOLOGIA. </remarks>
        Public Class ColumnNames
            Public Const ESTUDIO_ID As String = "ESTUDIO_ID"
            Public Const DESCESTUDIO As String = "DESCESTUDIO"
        End Class ' ColumnNames
    End Class
End Namespace 'Procedures 
