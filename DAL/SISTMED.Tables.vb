' Generated by SOLAR Generation Studio .
' Plugin Version: 1.0.0.0
Imports System.Collections.Generic
Imports System.Configuration
Imports System.Data
Imports System.Data.SqlClient
Imports Solar.DataHelper

Namespace Tables

    Public Class MED_SOLICITA_MEDICAMENTO_NUEVO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            medicamento_id
            bejerman_id
            medicamento
            presentacion_id
            unidadDeMedida_id
            autoriza
            suministraCompra
            usuarioSolicita_id
            fechaSolicita
            usuarioAutoriza_id
            fechaAutoriza
            pendiente
            bejermanAlta
            inactivo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO) As Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO
            Dim result As Boolean

            Try
                _commandText = "_MED_SOLICITA_MEDICAMENTO_NUEVO_ADD"
                Dim vPKmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vbejerman_id As New SqlParameter("@bejerman_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BEJERMAN_ID)
                Dim Vmedicamento As New SqlParameter("@medicamento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO)
                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Vautoriza As New SqlParameter("@autoriza", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AUTORIZA)
                Dim VsuministraCompra As New SqlParameter("@suministraCompra", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRACOMPRA)
                Dim VusuarioSolicita_id As New SqlParameter("@usuarioSolicita_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOSOLICITA_ID)
                Dim VfechaSolicita As New SqlParameter("@fechaSolicita", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHASOLICITA = Date.MinValue, Nothing, Item.FECHASOLICITA))
                Dim VusuarioAutoriza_id As New SqlParameter("@usuarioAutoriza_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA_ID)
                Dim VfechaAutoriza As New SqlParameter("@fechaAutoriza", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZA = Date.MinValue, Nothing, Item.FECHAAUTORIZA))
                Dim Vpendiente As New SqlParameter("@pendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PENDIENTE)
                Dim VbejermanAlta As New SqlParameter("@bejermanAlta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BEJERMANALTA)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKmedicamento_id, Vbejerman_id, Vmedicamento, Vpresentacion_id, VunidadDeMedida_id, Vautoriza, VsuministraCompra, VusuarioSolicita_id, VfechaSolicita, VusuarioAutoriza_id, VfechaAutoriza, Vpendiente, VbejermanAlta, Vinactivo, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.MEDICAMENTO_ID = vPKmedicamento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Solicita_Medicamento_Nuevo_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO
                    NewItem.MEDICAMENTO_ID = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.BEJERMAN_ID = IIf(Convert.IsDBNull(dr("bejerman_id")), Nothing, dr("bejerman_id"))
                    NewItem.MEDICAMENTO = IIf(Convert.IsDBNull(dr("medicamento")), Nothing, dr("medicamento"))
                    NewItem.PRESENTACION_ID = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.UNIDADDEMEDIDA_ID = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.AUTORIZA = IIf(Convert.IsDBNull(dr("autoriza")), Nothing, dr("autoriza"))
                    NewItem.SUMINISTRACOMPRA = IIf(Convert.IsDBNull(dr("suministraCompra")), Nothing, dr("suministraCompra"))
                    NewItem.USUARIOSOLICITA_ID = IIf(Convert.IsDBNull(dr("usuarioSolicita_id")), Nothing, dr("usuarioSolicita_id"))
                    NewItem.FECHASOLICITA = IIf(Convert.IsDBNull(dr("fechaSolicita")), Nothing, dr("fechaSolicita"))
                    NewItem.USUARIOAUTORIZA_ID = IIf(Convert.IsDBNull(dr("usuarioAutoriza_id")), Nothing, dr("usuarioAutoriza_id"))
                    NewItem.FECHAAUTORIZA = IIf(Convert.IsDBNull(dr("fechaAutoriza")), Nothing, dr("fechaAutoriza"))
                    NewItem.PENDIENTE = IIf(Convert.IsDBNull(dr("pendiente")), Nothing, dr("pendiente"))
                    NewItem.BEJERMANALTA = IIf(Convert.IsDBNull(dr("bejermanAlta")), Nothing, dr("bejermanAlta"))
                    NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_SOLICITA_MEDICAMENTO_NUEVO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_SOLICITA_MEDICAMENTO_NUEVO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO) As Boolean

            Try
                _commandText = "_MED_Solicita_Medicamento_Nuevo_REMOVE"
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vmedicamento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Solicita_Medicamento_Nuevo_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO) As Boolean

            Try
                _commandText = "_MED_Solicita_Medicamento_Nuevo_UPDATE"

                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim Vbejerman_id As New SqlParameter("@bejerman_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BEJERMAN_ID)
                Dim Vmedicamento As New SqlParameter("@medicamento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO)
                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Vautoriza As New SqlParameter("@autoriza", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.AUTORIZA)
                Dim VsuministraCompra As New SqlParameter("@suministraCompra", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRACOMPRA)
                Dim VusuarioSolicita_id As New SqlParameter("@usuarioSolicita_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOSOLICITA_ID)
                Dim VfechaSolicita As New SqlParameter("@fechaSolicita", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHASOLICITA = Date.MinValue, Nothing, Item.FECHASOLICITA))
                Dim VusuarioAutoriza_id As New SqlParameter("@usuarioAutoriza_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOAUTORIZA_ID)
                Dim VfechaAutoriza As New SqlParameter("@fechaAutoriza", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAAUTORIZA = Date.MinValue, Nothing, Item.FECHAAUTORIZA))
                Dim Vpendiente As New SqlParameter("@pendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PENDIENTE)
                Dim VbejermanAlta As New SqlParameter("@bejermanAlta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BEJERMANALTA)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vmedicamento_id, Vbejerman_id, Vmedicamento, Vpresentacion_id, VunidadDeMedida_id, Vautoriza, VsuministraCompra, VusuarioSolicita_id, VfechaSolicita, VusuarioAutoriza_id, VfechaAutoriza, Vpendiente, VbejermanAlta, Vinactivo, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_SOLICITA_MEDICAMENTO_NUEVO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_SOLICITA_MEDICAMENTO_NUEVO
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_SOLICITA_MEDICAMENTO_NUEVO. </remarks>
        Public Class ColumnNames
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const BEJERMAN_ID As String = "BEJERMAN_ID"
            Public Const MEDICAMENTO As String = "MEDICAMENTO"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const AUTORIZA As String = "AUTORIZA"
            Public Const SUMINISTRACOMPRA As String = "SUMINISTRACOMPRA"
            Public Const USUARIOSOLICITA_ID As String = "USUARIOSOLICITA_ID"
            Public Const FECHASOLICITA As String = "FECHASOLICITA"
            Public Const USUARIOAUTORIZA_ID As String = "USUARIOAUTORIZA_ID"
            Public Const FECHAAUTORIZA As String = "FECHAAUTORIZA"
            Public Const PENDIENTE As String = "PENDIENTE"
            Public Const BEJERMANALTA As String = "BEJERMANALTA"
            Public Const INACTIVO As String = "INACTIVO"
        End Class ' ColumnNames
    End Class ' MED_SOLICITA_MEDICAMENTO_NUEVO
    Public Class TBL_MENUS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Menu
            Id_MenuPadre
            DescripcionMenu
            PosicionMenu
            HabilitadoMenu
            UrlMenu
            FormularioAsociado
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_MENUS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_MENUS) As Entities.Tables.TBL_MENUS
            Dim result As Boolean

            Try
                _commandText = "_TBL_MENUS_ADD"
                Dim vPKId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VId_MenuPadre As New SqlParameter("@Id_MenuPadre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENUPADRE)
                Dim VDescripcionMenu As New SqlParameter("@DescripcionMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONMENU)
                Dim VPosicionMenu As New SqlParameter("@PosicionMenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSICIONMENU)
                Dim VHabilitadoMenu As New SqlParameter("@HabilitadoMenu", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABILITADOMENU)
                Dim VUrlMenu As New SqlParameter("@UrlMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.URLMENU)
                Dim VFormularioAsociado As New SqlParameter("@FormularioAsociado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FORMULARIOASOCIADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Menu, VId_MenuPadre, VDescripcionMenu, VPosicionMenu, VHabilitadoMenu, VUrlMenu, VFormularioAsociado, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_MENU = vPKId_Menu.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_MENUS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_Menus_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_MENUS
                    NewItem.ID_MENU = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.ID_MENUPADRE = IIf(Convert.IsDBNull(dr("Id_MenuPadre")), Nothing, dr("Id_MenuPadre"))
                    NewItem.DESCRIPCIONMENU = IIf(Convert.IsDBNull(dr("DescripcionMenu")), Nothing, dr("DescripcionMenu"))
                    NewItem.POSICIONMENU = IIf(Convert.IsDBNull(dr("PosicionMenu")), Nothing, dr("PosicionMenu"))
                    NewItem.HABILITADOMENU = IIf(Convert.IsDBNull(dr("HabilitadoMenu")), Nothing, dr("HabilitadoMenu"))
                    NewItem.URLMENU = IIf(Convert.IsDBNull(dr("UrlMenu")), Nothing, dr("UrlMenu"))
                    NewItem.FORMULARIOASOCIADO = IIf(Convert.IsDBNull(dr("FormularioAsociado")), Nothing, dr("FormularioAsociado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_MENUS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_MENUS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_MENUS) As Boolean

            Try
                _commandText = "_TBL_Menus_REMOVE"
                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Menu, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_Menus_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_MENUS) As Boolean

            Try
                _commandText = "_TBL_Menus_UPDATE"

                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)
                Dim VId_MenuPadre As New SqlParameter("@Id_MenuPadre", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENUPADRE)
                Dim VDescripcionMenu As New SqlParameter("@DescripcionMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONMENU)
                Dim VPosicionMenu As New SqlParameter("@PosicionMenu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSICIONMENU)
                Dim VHabilitadoMenu As New SqlParameter("@HabilitadoMenu", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABILITADOMENU)
                Dim VUrlMenu As New SqlParameter("@UrlMenu", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.URLMENU)
                Dim VFormularioAsociado As New SqlParameter("@FormularioAsociado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FORMULARIOASOCIADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Menu, VId_MenuPadre, VDescripcionMenu, VPosicionMenu, VHabilitadoMenu, VUrlMenu, VFormularioAsociado, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_MENUS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_MENUS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_MENUS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_MENUS. </remarks>
        Public Class ColumnNames
            Public Const ID_MENU As String = "ID_MENU"
            Public Const ID_MENUPADRE As String = "ID_MENUPADRE"
            Public Const DESCRIPCIONMENU As String = "DESCRIPCIONMENU"
            Public Const POSICIONMENU As String = "POSICIONMENU"
            Public Const HABILITADOMENU As String = "HABILITADOMENU"
            Public Const URLMENU As String = "URLMENU"
            Public Const FORMULARIOASOCIADO As String = "FORMULARIOASOCIADO"
        End Class ' ColumnNames
    End Class ' TBL_MENUS
    Public Class TBL_PERFILES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Perfil
            NombrePerfil
            DescripcionPerfil
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_PERFILES)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_PERFILES) As Entities.Tables.TBL_PERFILES
            Dim result As Boolean

            Try
                _commandText = "_TBL_PERFILES_ADD"
                Dim vPKId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VNombrePerfil As New SqlParameter("@NombrePerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREPERFIL)
                Dim VDescripcionPerfil As New SqlParameter("@DescripcionPerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONPERFIL)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Perfil, VNombrePerfil, VDescripcionPerfil, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_PERFIL = vPKId_Perfil.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_PERFILES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_Perfiles_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_PERFILES
                    NewItem.ID_PERFIL = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.NOMBREPERFIL = IIf(Convert.IsDBNull(dr("NombrePerfil")), Nothing, dr("NombrePerfil"))
                    NewItem.DESCRIPCIONPERFIL = IIf(Convert.IsDBNull(dr("DescripcionPerfil")), Nothing, dr("DescripcionPerfil"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_PERFILES) As Boolean

            Try
                _commandText = "_TBL_Perfiles_REMOVE"
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Perfil, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_Perfiles_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_PERFILES) As Boolean

            Try
                _commandText = "_TBL_Perfiles_UPDATE"

                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VNombrePerfil As New SqlParameter("@NombrePerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREPERFIL)
                Dim VDescripcionPerfil As New SqlParameter("@DescripcionPerfil", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONPERFIL)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Perfil, VNombrePerfil, VDescripcionPerfil, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_PERFILES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_PERFILES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_PERFILES
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_PERFILES. </remarks>
        Public Class ColumnNames
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const NOMBREPERFIL As String = "NOMBREPERFIL"
            Public Const DESCRIPCIONPERFIL As String = "DESCRIPCIONPERFIL"
        End Class ' ColumnNames
    End Class ' TBL_PERFILES
    Public Class TBL_PERFILESPERMISOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_PerfilPermisos
            Id_Perfil
            Id_Menu
            Lectura
            Escritura
            Eliminacion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_PERFILESPERMISOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_PERFILESPERMISOS) As Entities.Tables.TBL_PERFILESPERMISOS
            Dim result As Boolean

            Try
                _commandText = "_TBL_PERFILESPERMISOS_ADD"
                Dim vPKId_PerfilPermisos As New SqlParameter("@Id_PerfilPermisos", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)
                Dim VLectura As New SqlParameter("@Lectura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LECTURA)
                Dim VEscritura As New SqlParameter("@Escritura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESCRITURA)
                Dim VEliminacion As New SqlParameter("@Eliminacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELIMINACION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_PerfilPermisos, VId_Perfil, VId_Menu, VLectura, VEscritura, VEliminacion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_PERFILPERMISOS = vPKId_PerfilPermisos.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_PERFILESPERMISOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_PerfilesPermisos_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_PERFILESPERMISOS
                    NewItem.ID_PERFILPERMISOS = IIf(Convert.IsDBNull(dr("Id_PerfilPermisos")), Nothing, dr("Id_PerfilPermisos"))
                    NewItem.ID_PERFIL = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.ID_MENU = IIf(Convert.IsDBNull(dr("Id_Menu")), Nothing, dr("Id_Menu"))
                    NewItem.LECTURA = IIf(Convert.IsDBNull(dr("Lectura")), Nothing, dr("Lectura"))
                    NewItem.ESCRITURA = IIf(Convert.IsDBNull(dr("Escritura")), Nothing, dr("Escritura"))
                    NewItem.ELIMINACION = IIf(Convert.IsDBNull(dr("Eliminacion")), Nothing, dr("Eliminacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILESPERMISOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_PERFILESPERMISOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_PERFILESPERMISOS) As Boolean

            Try
                _commandText = "_TBL_PerfilesPermisos_REMOVE"
                Dim VId_PerfilPermisos As New SqlParameter("@Id_PerfilPermisos", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFILPERMISOS)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_PerfilPermisos, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_PerfilesPermisos_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_PERFILESPERMISOS) As Boolean

            Try
                _commandText = "_TBL_PerfilesPermisos_UPDATE"

                Dim VId_PerfilPermisos As New SqlParameter("@Id_PerfilPermisos", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFILPERMISOS)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VId_Menu As New SqlParameter("@Id_Menu", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_MENU)
                Dim VLectura As New SqlParameter("@Lectura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LECTURA)
                Dim VEscritura As New SqlParameter("@Escritura", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESCRITURA)
                Dim VEliminacion As New SqlParameter("@Eliminacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELIMINACION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_PerfilPermisos, VId_Perfil, VId_Menu, VLectura, VEscritura, VEliminacion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_PERFILESPERMISOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_PERFILESPERMISOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_PERFILESPERMISOS
        ''' Fecha de Creación  : sábado, 16 de mayo de 2015
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_PERFILESPERMISOS. </remarks>
        Public Class ColumnNames
            Public Const ID_PERFILPERMISOS As String = "ID_PERFILPERMISOS"
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const ID_MENU As String = "ID_MENU"
            Public Const LECTURA As String = "LECTURA"
            Public Const ESCRITURA As String = "ESCRITURA"
            Public Const ELIMINACION As String = "ELIMINACION"
        End Class ' ColumnNames
    End Class ' TBL_PERFILESPERMISOS
    Public Class TBL_USUARIOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            Id_Usuario
            Id_Perfil
            IdentificadorUsuario
            ContraseniaUsuario
            NombreUsuario
            Inactivo
            Sector_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TBL_USUARIOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TBL_USUARIOS) As Entities.Tables.TBL_USUARIOS
            Dim result As Boolean

            Try
                _commandText = "_TBL_USUARIOS_ADD"
                Dim vPKId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
                Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKId_Usuario, VId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VSector_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_USUARIO = vPKId_Usuario.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TBL_USUARIOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TBL_Usuarios_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TBL_USUARIOS
                    NewItem.ID_USUARIO = IIf(Convert.IsDBNull(dr("Id_Usuario")), Nothing, dr("Id_Usuario"))
                    NewItem.ID_PERFIL = IIf(Convert.IsDBNull(dr("Id_Perfil")), Nothing, dr("Id_Perfil"))
                    NewItem.IDENTIFICADORUSUARIO = IIf(Convert.IsDBNull(dr("IdentificadorUsuario")), Nothing, dr("IdentificadorUsuario"))
                    NewItem.CONTRASENIAUSUARIO = IIf(Convert.IsDBNull(dr("ContraseniaUsuario")), Nothing, dr("ContraseniaUsuario"))
                    NewItem.NOMBREUSUARIO = IIf(Convert.IsDBNull(dr("NombreUsuario")), Nothing, dr("NombreUsuario"))
                    NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("Inactivo")), Nothing, dr("Inactivo"))
                    NewItem.SECTOR_ID = IIf(Convert.IsDBNull(dr("Sector_id")), Nothing, dr("Sector_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TBL_USUARIOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TBL_USUARIOS) As Boolean

            Try
                _commandText = "_TBL_Usuarios_REMOVE"
                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VId_Usuario, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TBL_Usuarios_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TBL_USUARIOS) As Boolean

            Try
                _commandText = "_TBL_Usuarios_UPDATE"

                Dim VId_Usuario As New SqlParameter("@Id_Usuario", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_USUARIO)
                Dim VId_Perfil As New SqlParameter("@Id_Perfil", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_PERFIL)
                Dim VIdentificadorUsuario As New SqlParameter("@IdentificadorUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IDENTIFICADORUSUARIO)
                Dim VContraseniaUsuario As New SqlParameter("@ContraseniaUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTRASENIAUSUARIO)
                Dim VNombreUsuario As New SqlParameter("@NombreUsuario", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREUSUARIO)
                Dim VInactivo As New SqlParameter("@Inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim VSector_id As New SqlParameter("@Sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VId_Usuario, VId_Perfil, VIdentificadorUsuario, VContraseniaUsuario, VNombreUsuario, VInactivo, VSector_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TBL_USUARIOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TBL_USUARIOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TBL_USUARIOS
        ''' Fecha de Creación  : lunes, 25 de enero de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TBL_USUARIOS. </remarks>
        Public Class ColumnNames
            Public Const ID_USUARIO As String = "ID_USUARIO"
            Public Const ID_PERFIL As String = "ID_PERFIL"
            Public Const IDENTIFICADORUSUARIO As String = "IDENTIFICADORUSUARIO"
            Public Const CONTRASENIAUSUARIO As String = "CONTRASENIAUSUARIO"
            Public Const NOMBREUSUARIO As String = "NOMBREUSUARIO"
            Public Const INACTIVO As String = "INACTIVO"
            Public Const SECTOR_ID As String = "SECTOR_ID"
        End Class ' ColumnNames
    End Class ' TBL_USUARIOS
    Public Class CONTACTOPACIENTE
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            contacto_id
            nombre
            apellido
            tel1
            tel2
            tel3
            relacion
            paciente_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.CONTACTOPACIENTE)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.CONTACTOPACIENTE) As Entities.Tables.CONTACTOPACIENTE
            Dim result As Boolean

            Try
                _commandText = "_CONTACTOPACIENTE_ADD"
                Dim vPKcontacto_id As New SqlParameter("@contacto_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTACTO_ID)
                Dim Vnombre As New SqlParameter("@nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBRE)
                Dim Vapellido As New SqlParameter("@apellido", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.APELLIDO)
                Dim Vtel1 As New SqlParameter("@tel1", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEL1)
                Dim Vtel2 As New SqlParameter("@tel2", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEL2)
                Dim Vtel3 As New SqlParameter("@tel3", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEL3)
                Dim Vrelacion As New SqlParameter("@relacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RELACION)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcontacto_id, Vnombre, Vapellido, Vtel1, Vtel2, Vtel3, Vrelacion, Vpaciente_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CONTACTO_ID = vPKcontacto_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.CONTACTOPACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_ContactoPaciente_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.CONTACTOPACIENTE
                    NewItem.CONTACTO_ID = IIf(Convert.IsDBNull(dr("contacto_id")), Nothing, dr("contacto_id"))
                    NewItem.NOMBRE = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.APELLIDO = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.TEL1 = IIf(Convert.IsDBNull(dr("tel1")), Nothing, dr("tel1"))
                    NewItem.TEL2 = IIf(Convert.IsDBNull(dr("tel2")), Nothing, dr("tel2"))
                    NewItem.TEL3 = IIf(Convert.IsDBNull(dr("tel3")), Nothing, dr("tel3"))
                    NewItem.RELACION = IIf(Convert.IsDBNull(dr("relacion")), Nothing, dr("relacion"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "CONTACTOPACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "CONTACTOPACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.CONTACTOPACIENTE) As Boolean

            Try
                _commandText = "_ContactoPaciente_REMOVE"
                Dim Vcontacto_id As New SqlParameter("@contacto_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTACTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vcontacto_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_ContactoPaciente_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.CONTACTOPACIENTE) As Boolean

            Try
                _commandText = "_ContactoPaciente_UPDATE"

                Dim Vcontacto_id As New SqlParameter("@contacto_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTACTO_ID)
                Dim Vnombre As New SqlParameter("@nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBRE)
                Dim Vapellido As New SqlParameter("@apellido", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.APELLIDO)
                Dim Vtel1 As New SqlParameter("@tel1", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEL1)
                Dim Vtel2 As New SqlParameter("@tel2", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEL2)
                Dim Vtel3 As New SqlParameter("@tel3", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEL3)
                Dim Vrelacion As New SqlParameter("@relacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RELACION)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vcontacto_id, Vnombre, Vapellido, Vtel1, Vtel2, Vtel3, Vrelacion, Vpaciente_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.CONTACTOPACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.CONTACTOPACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla CONTACTOPACIENTE
        ''' Fecha de Creación  : lunes, 18 de abril de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla CONTACTOPACIENTE. </remarks>
        Public Class ColumnNames
            Public Const CONTACTO_ID As String = "CONTACTO_ID"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const TEL1 As String = "TEL1"
            Public Const TEL2 As String = "TEL2"
            Public Const TEL3 As String = "TEL3"
            Public Const RELACION As String = "RELACION"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
        End Class ' ColumnNames
    End Class ' CONTACTOPACIENTE
    Public Class HABITACIONES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            habitacion_id
            descripcion
            piso_id
            sede_id
            baja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.HABITACIONES)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.HABITACIONES) As Entities.Tables.HABITACIONES
            Dim result As Boolean

            Try
                _commandText = "_HABITACIONES_ADD"
                Dim vPKhabitacion_id As New SqlParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vpiso_id As New SqlParameter("@piso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PISO_ID)
                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)
                Dim Vbaja As New SqlParameter("@baja", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKhabitacion_id, Vdescripcion, Vpiso_id, Vsede_id, Vbaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.HABITACION_ID = vPKhabitacion_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.HABITACIONES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Habitaciones_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.HABITACIONES
                    NewItem.HABITACION_ID = IIf(Convert.IsDBNull(dr("habitacion_id")), Nothing, dr("habitacion_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.PISO_ID = IIf(Convert.IsDBNull(dr("piso_id")), Nothing, dr("piso_id"))
                    NewItem.SEDE_ID = IIf(Convert.IsDBNull(dr("sede_id")), Nothing, dr("sede_id"))
                    NewItem.BAJA = IIf(Convert.IsDBNull(dr("baja")), Nothing, dr("baja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HABITACIONES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HABITACIONES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.HABITACIONES) As Boolean

            Try
                _commandText = "_Habitaciones_REMOVE"
                Dim Vhabitacion_id As New SqlParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABITACION_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vhabitacion_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Habitaciones_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.HABITACIONES) As Boolean

            Try
                _commandText = "_Habitaciones_UPDATE"

                Dim Vhabitacion_id As New SqlParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABITACION_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vpiso_id As New SqlParameter("@piso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PISO_ID)
                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)
                Dim Vbaja As New SqlParameter("@baja", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vhabitacion_id, Vdescripcion, Vpiso_id, Vsede_id, Vbaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.HABITACIONES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.HABITACIONES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla HABITACIONES
        ''' Fecha de Creación  : viernes, 26 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla HABITACIONES. </remarks>
        Public Class ColumnNames
            Public Const HABITACION_ID As String = "HABITACION_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const PISO_ID As String = "PISO_ID"
            Public Const SEDE_ID As String = "SEDE_ID"
            Public Const BAJA As String = "BAJA"
        End Class ' ColumnNames
    End Class ' HABITACIONES  
    Public Class EMPRESA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            empresa_id
            descripcion
            ultimaHistoriaClinica
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EMPRESA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EMPRESA) As Entities.Tables.EMPRESA
            Dim result As Boolean

            Try
                _commandText = "_EMPRESA_ADD"
                Dim vPKempresa_id As New SqlParameter("@empresa_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VultimaHistoriaClinica As New SqlParameter("@ultimaHistoriaClinica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ULTIMAHISTORIACLINICA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKempresa_id, Vdescripcion, VultimaHistoriaClinica, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.EMPRESA_ID = vPKempresa_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EMPRESA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Empresa_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EMPRESA
                    NewItem.EMPRESA_ID = IIf(Convert.IsDBNull(dr("empresa_id")), Nothing, dr("empresa_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.ULTIMAHISTORIACLINICA = IIf(Convert.IsDBNull(dr("ultimaHistoriaClinica")), Nothing, dr("ultimaHistoriaClinica"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EMPRESA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EMPRESA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EMPRESA) As Boolean

            Try
                _commandText = "_Empresa_REMOVE"
                Dim Vempresa_id As New SqlParameter("@empresa_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vempresa_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Empresa_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EMPRESA) As Boolean

            Try
                _commandText = "_Empresa_UPDATE"

                Dim Vempresa_id As New SqlParameter("@empresa_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VultimaHistoriaClinica As New SqlParameter("@ultimaHistoriaClinica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ULTIMAHISTORIACLINICA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vempresa_id, Vdescripcion, VultimaHistoriaClinica, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EMPRESA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EMPRESA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EMPRESA
        ''' Fecha de Creación  : jueves, 25 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EMPRESA. </remarks>
        Public Class ColumnNames
            Public Const EMPRESA_ID As String = "EMPRESA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const ULTIMAHISTORIACLINICA As String = "ULTIMAHISTORIACLINICA"
        End Class ' ColumnNames
    End Class ' EMPRESA
    Public Class PACIENTES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            paciente_id
            numeroHistoriaClinica
            numeroInternacion
            habitacion_id
            sede_id
            nombre
            apellido
            genero
            fechaNacimiento
            tipoDocumento_id
            numeroDocumento
            diagnostico_id
            fechaIngreso
            obraSocial_id
            numeroObraSocial
            fechaEgreso
            motivoEgreso_id
            acompaniante
            itemPendiente
            preAlta
            solicitudEstudio
            solicitudTraslado
            interconsultaPendiente
            altaAutorizada
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            HS_SH
            usuario_id
            respira
            contacto
            tqt
            arm
            oxigeno
            vo
            sng
            gastro
            sv
            cat
            talla
            talon
            sac
            isq
            fechaModificacion
            paciente_traumatico
            txtPacTraumatico
            paciente_judicializado
            txtPacJudicializado
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PACIENTES)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PACIENTES) As Entities.Tables.PACIENTES
            Dim result As Boolean

            Try
                _commandText = "_PACIENTES_ADD"
                Dim vPKpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VnumeroHistoriaClinica As New SqlParameter("@numeroHistoriaClinica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROHISTORIACLINICA)
                Dim VnumeroInternacion As New SqlParameter("@numeroInternacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROINTERNACION)
                Dim Vhabitacion_id As New SqlParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABITACION_ID)
                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)
                Dim Vnombre As New SqlParameter("@nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBRE)
                Dim Vapellido As New SqlParameter("@apellido", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.APELLIDO)
                Dim Vgenero As New SqlParameter("@genero", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERO)
                Dim VfechaNacimiento As New SqlParameter("@fechaNacimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHANACIMIENTO = Date.MinValue, Nothing, Item.FECHANACIMIENTO))
                Dim VtipoDocumento_id As New SqlParameter("@tipoDocumento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPODOCUMENTO_ID)
                Dim VnumeroDocumento As New SqlParameter("@numeroDocumento", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMERODOCUMENTO)
                Dim Vdiagnostico_id As New SqlParameter("@diagnostico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIAGNOSTICO_ID)
                Dim VfechaIngreso As New SqlParameter("@fechaIngreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINGRESO = Date.MinValue, Nothing, Item.FECHAINGRESO))
                Dim VobraSocial_id As New SqlParameter("@obraSocial_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBRASOCIAL_ID)
                Dim VnumeroObraSocial As New SqlParameter("@numeroObraSocial", SqlDbType.VarChar, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROOBRASOCIAL)
                Dim VfechaEgreso As New SqlParameter("@fechaEgreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAEGRESO = Date.MinValue, Nothing, Item.FECHAEGRESO))
                Dim VmotivoEgreso_id As New SqlParameter("@motivoEgreso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEGRESO_ID)
                Dim Vacompaniante As New SqlParameter("@acompaniante", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ACOMPANIANTE)
                Dim VitemPendiente As New SqlParameter("@itemPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ITEMPENDIENTE)
                Dim VpreAlta As New SqlParameter("@preAlta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREALTA)
                Dim VsolicitudEstudio As New SqlParameter("@solicitudEstudio", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDESTUDIO)
                Dim VsolicitudTraslado As New SqlParameter("@solicitudTraslado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDTRASLADO)
                Dim VinterconsultaPendiente As New SqlParameter("@interconsultaPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INTERCONSULTAPENDIENTE)
                Dim ValtaAutorizada As New SqlParameter("@altaAutorizada", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALTAAUTORIZADA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vrespira As New SqlParameter("@respira", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RESPIRA)
                Dim Vcontacto As New SqlParameter("@contacto", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTACTO)
                Dim Vtqt As New SqlParameter("@tqt", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TQT)
                Dim Varm As New SqlParameter("@arm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARM)
                Dim Voxigeno As New SqlParameter("@oxigeno", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OXIGENO)
                Dim Vvo As New SqlParameter("@vo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VO)
                Dim Vsng As New SqlParameter("@sng", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SNG)
                Dim Vgastro As New SqlParameter("@gastro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GASTRO)
                Dim Vsv As New SqlParameter("@sv", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SV)
                Dim Vcat As New SqlParameter("@cat", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CAT)
                Dim Vtalla As New SqlParameter("@talla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALLA)
                Dim Vtalon As New SqlParameter("@talon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALON)
                Dim Vsac As New SqlParameter("@sac", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SAC)
                Dim Visq As New SqlParameter("@isq", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ISQ)
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim Vpaciente_traumatico As New SqlParameter("@paciente_traumatico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_TRAUMATICO)
                Dim VtxtPacTraumatico As New SqlParameter("@txtPacTraumatico", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACTRAUMATICO)
                Dim Vpaciente_judicializado As New SqlParameter("@paciente_judicializado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_JUDICIALIZADO)
                Dim VtxtPacJudicializado As New SqlParameter("@txtPacJudicializado", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACJUDICIALIZADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKpaciente_id, VnumeroHistoriaClinica, VnumeroInternacion, Vhabitacion_id, Vsede_id, Vnombre, Vapellido, Vgenero, VfechaNacimiento, VtipoDocumento_id, VnumeroDocumento, Vdiagnostico_id, VfechaIngreso, VobraSocial_id, VnumeroObraSocial, VfechaEgreso, VmotivoEgreso_id, Vacompaniante, VitemPendiente, VpreAlta, VsolicitudEstudio, VsolicitudTraslado, VinterconsultaPendiente, ValtaAutorizada, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vusuario_id, Vrespira, Vcontacto, Vtqt, Varm, Voxigeno, Vvo, Vsng, Vgastro, Vsv, Vcat, Vtalla, Vtalon, Vsac, Visq, VfechaModificacion, Vpaciente_traumatico, VtxtPacTraumatico, Vpaciente_judicializado, VtxtPacJudicializado, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PACIENTE_ID = vPKpaciente_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PACIENTES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Pacientes_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PACIENTES
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.NUMEROHISTORIACLINICA = IIf(Convert.IsDBNull(dr("numeroHistoriaClinica")), Nothing, dr("numeroHistoriaClinica"))
                    NewItem.NUMEROINTERNACION = IIf(Convert.IsDBNull(dr("numeroInternacion")), Nothing, dr("numeroInternacion"))
                    NewItem.HABITACION_ID = IIf(Convert.IsDBNull(dr("habitacion_id")), Nothing, dr("habitacion_id"))
                    NewItem.SEDE_ID = IIf(Convert.IsDBNull(dr("sede_id")), Nothing, dr("sede_id"))
                    NewItem.NOMBRE = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.APELLIDO = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.GENERO = IIf(Convert.IsDBNull(dr("genero")), Nothing, dr("genero"))
                    NewItem.FECHANACIMIENTO = IIf(Convert.IsDBNull(dr("fechaNacimiento")), Nothing, dr("fechaNacimiento"))
                    NewItem.TIPODOCUMENTO_ID = IIf(Convert.IsDBNull(dr("tipoDocumento_id")), Nothing, dr("tipoDocumento_id"))
                    NewItem.NUMERODOCUMENTO = IIf(Convert.IsDBNull(dr("numeroDocumento")), Nothing, dr("numeroDocumento"))
                    NewItem.DIAGNOSTICO_ID = IIf(Convert.IsDBNull(dr("diagnostico_id")), Nothing, dr("diagnostico_id"))
                    NewItem.FECHAINGRESO = IIf(Convert.IsDBNull(dr("fechaIngreso")), Nothing, dr("fechaIngreso"))
                    NewItem.OBRASOCIAL_ID = IIf(Convert.IsDBNull(dr("obraSocial_id")), Nothing, dr("obraSocial_id"))
                    NewItem.NUMEROOBRASOCIAL = IIf(Convert.IsDBNull(dr("numeroObraSocial")), Nothing, dr("numeroObraSocial"))
                    NewItem.FECHAEGRESO = IIf(Convert.IsDBNull(dr("fechaEgreso")), Nothing, dr("fechaEgreso"))
                    NewItem.MOTIVOEGRESO_ID = IIf(Convert.IsDBNull(dr("motivoEgreso_id")), Nothing, dr("motivoEgreso_id"))
                    NewItem.ACOMPANIANTE = IIf(Convert.IsDBNull(dr("acompaniante")), Nothing, dr("acompaniante"))
                    NewItem.ITEMPENDIENTE = IIf(Convert.IsDBNull(dr("itemPendiente")), Nothing, dr("itemPendiente"))
                    NewItem.PREALTA = IIf(Convert.IsDBNull(dr("preAlta")), Nothing, dr("preAlta"))
                    NewItem.SOLICITUDESTUDIO = IIf(Convert.IsDBNull(dr("solicitudEstudio")), Nothing, dr("solicitudEstudio"))
                    NewItem.SOLICITUDTRASLADO = IIf(Convert.IsDBNull(dr("solicitudTraslado")), Nothing, dr("solicitudTraslado"))
                    NewItem.INTERCONSULTAPENDIENTE = IIf(Convert.IsDBNull(dr("interconsultaPendiente")), Nothing, dr("interconsultaPendiente"))
                    NewItem.ALTAAUTORIZADA = IIf(Convert.IsDBNull(dr("altaAutorizada")), Nothing, dr("altaAutorizada"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.HS_SH = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.RESPIRA = IIf(Convert.IsDBNull(dr("respira")), Nothing, dr("respira"))
                    NewItem.CONTACTO = IIf(Convert.IsDBNull(dr("contacto")), Nothing, dr("contacto"))
                    NewItem.TQT = IIf(Convert.IsDBNull(dr("tqt")), Nothing, dr("tqt"))
                    NewItem.ARM = IIf(Convert.IsDBNull(dr("arm")), Nothing, dr("arm"))
                    NewItem.OXIGENO = IIf(Convert.IsDBNull(dr("oxigeno")), Nothing, dr("oxigeno"))
                    NewItem.VO = IIf(Convert.IsDBNull(dr("vo")), Nothing, dr("vo"))
                    NewItem.SNG = IIf(Convert.IsDBNull(dr("sng")), Nothing, dr("sng"))
                    NewItem.GASTRO = IIf(Convert.IsDBNull(dr("gastro")), Nothing, dr("gastro"))
                    NewItem.SV = IIf(Convert.IsDBNull(dr("sv")), Nothing, dr("sv"))
                    NewItem.CAT = IIf(Convert.IsDBNull(dr("cat")), Nothing, dr("cat"))
                    NewItem.TALLA = IIf(Convert.IsDBNull(dr("talla")), Nothing, dr("talla"))
                    NewItem.TALON = IIf(Convert.IsDBNull(dr("talon")), Nothing, dr("talon"))
                    NewItem.SAC = IIf(Convert.IsDBNull(dr("sac")), Nothing, dr("sac"))
                    NewItem.ISQ = IIf(Convert.IsDBNull(dr("isq")), Nothing, dr("isq"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.PACIENTE_TRAUMATICO = IIf(Convert.IsDBNull(dr("paciente_traumatico")), Nothing, dr("paciente_traumatico"))
                    NewItem.TXTPACTRAUMATICO = IIf(Convert.IsDBNull(dr("txtPacTraumatico")), Nothing, dr("txtPacTraumatico"))
                    NewItem.PACIENTE_JUDICIALIZADO = IIf(Convert.IsDBNull(dr("paciente_judicializado")), Nothing, dr("paciente_judicializado"))
                    NewItem.TXTPACJUDICIALIZADO = IIf(Convert.IsDBNull(dr("txtPacJudicializado")), Nothing, dr("txtPacJudicializado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PACIENTES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PACIENTES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PACIENTES) As Boolean

            Try
                _commandText = "_Pacientes_REMOVE"
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vpaciente_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Pacientes_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PACIENTES) As Boolean

            Try
                _commandText = "_Pacientes_UPDATE"

                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VnumeroHistoriaClinica As New SqlParameter("@numeroHistoriaClinica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROHISTORIACLINICA)
                Dim VnumeroInternacion As New SqlParameter("@numeroInternacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROINTERNACION)
                Dim Vhabitacion_id As New SqlParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABITACION_ID)
                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)
                Dim Vnombre As New SqlParameter("@nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBRE)
                Dim Vapellido As New SqlParameter("@apellido", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.APELLIDO)
                Dim Vgenero As New SqlParameter("@genero", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERO)
                Dim VfechaNacimiento As New SqlParameter("@fechaNacimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHANACIMIENTO = Date.MinValue, Nothing, Item.FECHANACIMIENTO))
                Dim VtipoDocumento_id As New SqlParameter("@tipoDocumento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPODOCUMENTO_ID)
                Dim VnumeroDocumento As New SqlParameter("@numeroDocumento", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMERODOCUMENTO)
                Dim Vdiagnostico_id As New SqlParameter("@diagnostico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIAGNOSTICO_ID)
                Dim VfechaIngreso As New SqlParameter("@fechaIngreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINGRESO = Date.MinValue, Nothing, Item.FECHAINGRESO))
                Dim VobraSocial_id As New SqlParameter("@obraSocial_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBRASOCIAL_ID)
                Dim VnumeroObraSocial As New SqlParameter("@numeroObraSocial", SqlDbType.VarChar, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROOBRASOCIAL)
                Dim VfechaEgreso As New SqlParameter("@fechaEgreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAEGRESO = Date.MinValue, Nothing, Item.FECHAEGRESO))
                Dim VmotivoEgreso_id As New SqlParameter("@motivoEgreso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEGRESO_ID)
                Dim Vacompaniante As New SqlParameter("@acompaniante", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ACOMPANIANTE)
                Dim VitemPendiente As New SqlParameter("@itemPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ITEMPENDIENTE)
                Dim VpreAlta As New SqlParameter("@preAlta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREALTA)
                Dim VsolicitudEstudio As New SqlParameter("@solicitudEstudio", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDESTUDIO)
                Dim VsolicitudTraslado As New SqlParameter("@solicitudTraslado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDTRASLADO)
                Dim VinterconsultaPendiente As New SqlParameter("@interconsultaPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INTERCONSULTAPENDIENTE)
                Dim ValtaAutorizada As New SqlParameter("@altaAutorizada", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALTAAUTORIZADA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vrespira As New SqlParameter("@respira", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RESPIRA)
                Dim Vcontacto As New SqlParameter("@contacto", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTACTO)
                Dim Vtqt As New SqlParameter("@tqt", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TQT)
                Dim Varm As New SqlParameter("@arm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARM)
                Dim Voxigeno As New SqlParameter("@oxigeno", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OXIGENO)
                Dim Vvo As New SqlParameter("@vo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VO)
                Dim Vsng As New SqlParameter("@sng", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SNG)
                Dim Vgastro As New SqlParameter("@gastro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GASTRO)
                Dim Vsv As New SqlParameter("@sv", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SV)
                Dim Vcat As New SqlParameter("@cat", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CAT)
                Dim Vtalla As New SqlParameter("@talla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALLA)
                Dim Vtalon As New SqlParameter("@talon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALON)
                Dim Vsac As New SqlParameter("@sac", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SAC)
                Dim Visq As New SqlParameter("@isq", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ISQ)
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim Vpaciente_traumatico As New SqlParameter("@paciente_traumatico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_TRAUMATICO)
                Dim VtxtPacTraumatico As New SqlParameter("@txtPacTraumatico", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACTRAUMATICO)
                Dim Vpaciente_judicializado As New SqlParameter("@paciente_judicializado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_JUDICIALIZADO)
                Dim VtxtPacJudicializado As New SqlParameter("@txtPacJudicializado", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACJUDICIALIZADO)
                Dim VPediatrico As New SqlParameter("@Pediatrico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PEDIATRICO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vpaciente_id, VnumeroHistoriaClinica, VnumeroInternacion, Vhabitacion_id, Vsede_id, Vnombre, Vapellido, Vgenero, VfechaNacimiento, VtipoDocumento_id, VnumeroDocumento, Vdiagnostico_id, VfechaIngreso, VobraSocial_id, VnumeroObraSocial, VfechaEgreso, VmotivoEgreso_id, Vacompaniante, VitemPendiente, VpreAlta, VsolicitudEstudio, VsolicitudTraslado, VinterconsultaPendiente, ValtaAutorizada, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vusuario_id, Vrespira, Vcontacto, Vtqt, Varm, Voxigeno, Vvo, Vsng, Vgastro, Vsv, Vcat, Vtalla, Vtalon, Vsac, Visq, VfechaModificacion, Vpaciente_traumatico, VtxtPacTraumatico, Vpaciente_judicializado, VtxtPacJudicializado, VPediatrico, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PACIENTES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PACIENTES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PACIENTES
        ''' Fecha de Creación  : viernes, 13 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla PACIENTES. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NUMEROHISTORIACLINICA As String = "NUMEROHISTORIACLINICA"
            Public Const NUMEROINTERNACION As String = "NUMEROINTERNACION"
            Public Const HABITACION_ID As String = "HABITACION_ID"
            Public Const SEDE_ID As String = "SEDE_ID"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const GENERO As String = "GENERO"
            Public Const FECHANACIMIENTO As String = "FECHANACIMIENTO"
            Public Const TIPODOCUMENTO_ID As String = "TIPODOCUMENTO_ID"
            Public Const NUMERODOCUMENTO As String = "NUMERODOCUMENTO"
            Public Const DIAGNOSTICO_ID As String = "DIAGNOSTICO_ID"
            Public Const FECHAINGRESO As String = "FECHAINGRESO"
            Public Const OBRASOCIAL_ID As String = "OBRASOCIAL_ID"
            Public Const NUMEROOBRASOCIAL As String = "NUMEROOBRASOCIAL"
            Public Const FECHAEGRESO As String = "FECHAEGRESO"
            Public Const MOTIVOEGRESO_ID As String = "MOTIVOEGRESO_ID"
            Public Const ACOMPANIANTE As String = "ACOMPANIANTE"
            Public Const ITEMPENDIENTE As String = "ITEMPENDIENTE"
            Public Const PREALTA As String = "PREALTA"
            Public Const SOLICITUDESTUDIO As String = "SOLICITUDESTUDIO"
            Public Const SOLICITUDTRASLADO As String = "SOLICITUDTRASLADO"
            Public Const INTERCONSULTAPENDIENTE As String = "INTERCONSULTAPENDIENTE"
            Public Const ALTAAUTORIZADA As String = "ALTAAUTORIZADA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const RESPIRA As String = "RESPIRA"
            Public Const CONTACTO As String = "CONTACTO"
            Public Const TQT As String = "TQT"
            Public Const ARM As String = "ARM"
            Public Const OXIGENO As String = "OXIGENO"
            Public Const VO As String = "VO"
            Public Const SNG As String = "SNG"
            Public Const GASTRO As String = "GASTRO"
            Public Const SV As String = "SV"
            Public Const CAT As String = "CAT"
            Public Const TALLA As String = "TALLA"
            Public Const TALON As String = "TALON"
            Public Const SAC As String = "SAC"
            Public Const ISQ As String = "ISQ"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const PACIENTE_TRAUMATICO As String = "PACIENTE_TRAUMATICO"
            Public Const TXTPACTRAUMATICO As String = "TXTPACTRAUMATICO"
            Public Const PACIENTE_JUDICIALIZADO As String = "PACIENTE_JUDICIALIZADO"
            Public Const TXTPACJUDICIALIZADO As String = "TXTPACJUDICIALIZADO"
        End Class ' ColumnNames
    End Class ' PACIENTES
    Public Class PACIENTES_HISTORIAL
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            paciente_id
            numeroHistoriaClinica
            numeroInternacion
            habitacion_id
            sede_id
            nombre
            apellido
            genero
            fechaNacimiento
            tipoDocumento_id
            numeroDocumento
            diagnostico_id
            fechaIngreso
            obraSocial_id
            numeroObraSocial
            fechaEgreso
            motivoEgreso_id
            acompaniante
            itemPendiente
            preAlta
            solicitudEstudio
            solicitudTraslado
            interconsultaPendiente
            altaAutorizada
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            HS_SH
            usuario_id
            respira
            contacto
            tqt
            arm
            oxigeno
            vo
            sng
            gastro
            sv
            cat
            talla
            talon
            sac
            isq
            fechaModificacion
            paciente_traumatico
            txtPacTraumatico
            paciente_judicializado
            txtPacJudicializado
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PACIENTES_HISTORIAL)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PACIENTES_HISTORIAL) As Entities.Tables.PACIENTES_HISTORIAL
            Dim result As Boolean

            Try
                _commandText = "_PACIENTES_HISTORIAL_ADD"
                Dim vPKpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VnumeroHistoriaClinica As New SqlParameter("@numeroHistoriaClinica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROHISTORIACLINICA)
                Dim VnumeroInternacion As New SqlParameter("@numeroInternacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROINTERNACION)
                Dim Vhabitacion_id As New SqlParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABITACION_ID)
                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)
                Dim Vnombre As New SqlParameter("@nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBRE)
                Dim Vapellido As New SqlParameter("@apellido", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.APELLIDO)
                Dim Vgenero As New SqlParameter("@genero", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERO)
                Dim VfechaNacimiento As New SqlParameter("@fechaNacimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHANACIMIENTO = Date.MinValue, Nothing, Item.FECHANACIMIENTO))
                Dim VtipoDocumento_id As New SqlParameter("@tipoDocumento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPODOCUMENTO_ID)
                Dim VnumeroDocumento As New SqlParameter("@numeroDocumento", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMERODOCUMENTO)
                Dim Vdiagnostico_id As New SqlParameter("@diagnostico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIAGNOSTICO_ID)
                Dim VfechaIngreso As New SqlParameter("@fechaIngreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINGRESO = Date.MinValue, Nothing, Item.FECHAINGRESO))
                Dim VobraSocial_id As New SqlParameter("@obraSocial_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBRASOCIAL_ID)
                Dim VnumeroObraSocial As New SqlParameter("@numeroObraSocial", SqlDbType.VarChar, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROOBRASOCIAL)
                Dim VfechaEgreso As New SqlParameter("@fechaEgreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAEGRESO = Date.MinValue, Nothing, Item.FECHAEGRESO))
                Dim VmotivoEgreso_id As New SqlParameter("@motivoEgreso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEGRESO_ID)
                Dim Vacompaniante As New SqlParameter("@acompaniante", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ACOMPANIANTE)
                Dim VitemPendiente As New SqlParameter("@itemPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ITEMPENDIENTE)
                Dim VpreAlta As New SqlParameter("@preAlta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREALTA)
                Dim VsolicitudEstudio As New SqlParameter("@solicitudEstudio", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDESTUDIO)
                Dim VsolicitudTraslado As New SqlParameter("@solicitudTraslado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDTRASLADO)
                Dim VinterconsultaPendiente As New SqlParameter("@interconsultaPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INTERCONSULTAPENDIENTE)
                Dim ValtaAutorizada As New SqlParameter("@altaAutorizada", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALTAAUTORIZADA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vrespira As New SqlParameter("@respira", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RESPIRA)
                Dim Vcontacto As New SqlParameter("@contacto", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTACTO)
                Dim Vtqt As New SqlParameter("@tqt", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TQT)
                Dim Varm As New SqlParameter("@arm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARM)
                Dim Voxigeno As New SqlParameter("@oxigeno", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OXIGENO)
                Dim Vvo As New SqlParameter("@vo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VO)
                Dim Vsng As New SqlParameter("@sng", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SNG)
                Dim Vgastro As New SqlParameter("@gastro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GASTRO)
                Dim Vsv As New SqlParameter("@sv", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SV)
                Dim Vcat As New SqlParameter("@cat", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CAT)
                Dim Vtalla As New SqlParameter("@talla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALLA)
                Dim Vtalon As New SqlParameter("@talon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALON)
                Dim Vsac As New SqlParameter("@sac", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SAC)
                Dim Visq As New SqlParameter("@isq", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ISQ)
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim Vpaciente_traumatico As New SqlParameter("@paciente_traumatico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_TRAUMATICO)
                Dim VtxtPacTraumatico As New SqlParameter("@txtPacTraumatico", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACTRAUMATICO)
                Dim Vpaciente_judicializado As New SqlParameter("@paciente_judicializado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_JUDICIALIZADO)
                Dim VtxtPacJudicializado As New SqlParameter("@txtPacJudicializado", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACJUDICIALIZADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKpaciente_id, VnumeroHistoriaClinica, VnumeroInternacion, Vhabitacion_id, Vsede_id, Vnombre, Vapellido, Vgenero, VfechaNacimiento, VtipoDocumento_id, VnumeroDocumento, Vdiagnostico_id, VfechaIngreso, VobraSocial_id, VnumeroObraSocial, VfechaEgreso, VmotivoEgreso_id, Vacompaniante, VitemPendiente, VpreAlta, VsolicitudEstudio, VsolicitudTraslado, VinterconsultaPendiente, ValtaAutorizada, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vusuario_id, Vrespira, Vcontacto, Vtqt, Varm, Voxigeno, Vvo, Vsng, Vgastro, Vsv, Vcat, Vtalla, Vtalon, Vsac, Visq, VfechaModificacion, Vpaciente_traumatico, VtxtPacTraumatico, Vpaciente_judicializado, VtxtPacJudicializado, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PACIENTE_ID = vPKpaciente_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PACIENTES_HISTORIAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Pacientes_Historial_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PACIENTES_HISTORIAL
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.NUMEROHISTORIACLINICA = IIf(Convert.IsDBNull(dr("numeroHistoriaClinica")), Nothing, dr("numeroHistoriaClinica"))
                    NewItem.NUMEROINTERNACION = IIf(Convert.IsDBNull(dr("numeroInternacion")), Nothing, dr("numeroInternacion"))
                    NewItem.HABITACION_ID = IIf(Convert.IsDBNull(dr("habitacion_id")), Nothing, dr("habitacion_id"))
                    NewItem.SEDE_ID = IIf(Convert.IsDBNull(dr("sede_id")), Nothing, dr("sede_id"))
                    NewItem.NOMBRE = IIf(Convert.IsDBNull(dr("nombre")), Nothing, dr("nombre"))
                    NewItem.APELLIDO = IIf(Convert.IsDBNull(dr("apellido")), Nothing, dr("apellido"))
                    NewItem.GENERO = IIf(Convert.IsDBNull(dr("genero")), Nothing, dr("genero"))
                    NewItem.FECHANACIMIENTO = IIf(Convert.IsDBNull(dr("fechaNacimiento")), Nothing, dr("fechaNacimiento"))
                    NewItem.TIPODOCUMENTO_ID = IIf(Convert.IsDBNull(dr("tipoDocumento_id")), Nothing, dr("tipoDocumento_id"))
                    NewItem.NUMERODOCUMENTO = IIf(Convert.IsDBNull(dr("numeroDocumento")), Nothing, dr("numeroDocumento"))
                    NewItem.DIAGNOSTICO_ID = IIf(Convert.IsDBNull(dr("diagnostico_id")), Nothing, dr("diagnostico_id"))
                    NewItem.FECHAINGRESO = IIf(Convert.IsDBNull(dr("fechaIngreso")), Nothing, dr("fechaIngreso"))
                    NewItem.OBRASOCIAL_ID = IIf(Convert.IsDBNull(dr("obraSocial_id")), Nothing, dr("obraSocial_id"))
                    NewItem.NUMEROOBRASOCIAL = IIf(Convert.IsDBNull(dr("numeroObraSocial")), Nothing, dr("numeroObraSocial"))
                    NewItem.FECHAEGRESO = IIf(Convert.IsDBNull(dr("fechaEgreso")), Nothing, dr("fechaEgreso"))
                    NewItem.MOTIVOEGRESO_ID = IIf(Convert.IsDBNull(dr("motivoEgreso_id")), Nothing, dr("motivoEgreso_id"))
                    NewItem.ACOMPANIANTE = IIf(Convert.IsDBNull(dr("acompaniante")), Nothing, dr("acompaniante"))
                    NewItem.ITEMPENDIENTE = IIf(Convert.IsDBNull(dr("itemPendiente")), Nothing, dr("itemPendiente"))
                    NewItem.PREALTA = IIf(Convert.IsDBNull(dr("preAlta")), Nothing, dr("preAlta"))
                    NewItem.SOLICITUDESTUDIO = IIf(Convert.IsDBNull(dr("solicitudEstudio")), Nothing, dr("solicitudEstudio"))
                    NewItem.SOLICITUDTRASLADO = IIf(Convert.IsDBNull(dr("solicitudTraslado")), Nothing, dr("solicitudTraslado"))
                    NewItem.INTERCONSULTAPENDIENTE = IIf(Convert.IsDBNull(dr("interconsultaPendiente")), Nothing, dr("interconsultaPendiente"))
                    NewItem.ALTAAUTORIZADA = IIf(Convert.IsDBNull(dr("altaAutorizada")), Nothing, dr("altaAutorizada"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.HS_SH = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.RESPIRA = IIf(Convert.IsDBNull(dr("respira")), Nothing, dr("respira"))
                    NewItem.CONTACTO = IIf(Convert.IsDBNull(dr("contacto")), Nothing, dr("contacto"))
                    NewItem.TQT = IIf(Convert.IsDBNull(dr("tqt")), Nothing, dr("tqt"))
                    NewItem.ARM = IIf(Convert.IsDBNull(dr("arm")), Nothing, dr("arm"))
                    NewItem.OXIGENO = IIf(Convert.IsDBNull(dr("oxigeno")), Nothing, dr("oxigeno"))
                    NewItem.VO = IIf(Convert.IsDBNull(dr("vo")), Nothing, dr("vo"))
                    NewItem.SNG = IIf(Convert.IsDBNull(dr("sng")), Nothing, dr("sng"))
                    NewItem.GASTRO = IIf(Convert.IsDBNull(dr("gastro")), Nothing, dr("gastro"))
                    NewItem.SV = IIf(Convert.IsDBNull(dr("sv")), Nothing, dr("sv"))
                    NewItem.CAT = IIf(Convert.IsDBNull(dr("cat")), Nothing, dr("cat"))
                    NewItem.TALLA = IIf(Convert.IsDBNull(dr("talla")), Nothing, dr("talla"))
                    NewItem.TALON = IIf(Convert.IsDBNull(dr("talon")), Nothing, dr("talon"))
                    NewItem.SAC = IIf(Convert.IsDBNull(dr("sac")), Nothing, dr("sac"))
                    NewItem.ISQ = IIf(Convert.IsDBNull(dr("isq")), Nothing, dr("isq"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.PACIENTE_TRAUMATICO = IIf(Convert.IsDBNull(dr("paciente_traumatico")), Nothing, dr("paciente_traumatico"))
                    NewItem.TXTPACTRAUMATICO = IIf(Convert.IsDBNull(dr("txtPacTraumatico")), Nothing, dr("txtPacTraumatico"))
                    NewItem.PACIENTE_JUDICIALIZADO = IIf(Convert.IsDBNull(dr("paciente_judicializado")), Nothing, dr("paciente_judicializado"))
                    NewItem.TXTPACJUDICIALIZADO = IIf(Convert.IsDBNull(dr("txtPacJudicializado")), Nothing, dr("txtPacJudicializado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PACIENTES_HISTORIAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PACIENTES_HISTORIAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PACIENTES_HISTORIAL) As Boolean

            Try
                _commandText = "_Pacientes_Historial_REMOVE"
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vpaciente_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Pacientes_Historial_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PACIENTES_HISTORIAL) As Boolean

            Try
                _commandText = "_Pacientes_Historial_UPDATE"

                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VnumeroHistoriaClinica As New SqlParameter("@numeroHistoriaClinica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROHISTORIACLINICA)
                Dim VnumeroInternacion As New SqlParameter("@numeroInternacion", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROINTERNACION)
                Dim Vhabitacion_id As New SqlParameter("@habitacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HABITACION_ID)
                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)
                Dim Vnombre As New SqlParameter("@nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBRE)
                Dim Vapellido As New SqlParameter("@apellido", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.APELLIDO)
                Dim Vgenero As New SqlParameter("@genero", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERO)
                Dim VfechaNacimiento As New SqlParameter("@fechaNacimiento", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHANACIMIENTO = Date.MinValue, Nothing, Item.FECHANACIMIENTO))
                Dim VtipoDocumento_id As New SqlParameter("@tipoDocumento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPODOCUMENTO_ID)
                Dim VnumeroDocumento As New SqlParameter("@numeroDocumento", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMERODOCUMENTO)
                Dim Vdiagnostico_id As New SqlParameter("@diagnostico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIAGNOSTICO_ID)
                Dim VfechaIngreso As New SqlParameter("@fechaIngreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINGRESO = Date.MinValue, Nothing, Item.FECHAINGRESO))
                Dim VobraSocial_id As New SqlParameter("@obraSocial_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBRASOCIAL_ID)
                Dim VnumeroObraSocial As New SqlParameter("@numeroObraSocial", SqlDbType.VarChar, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMEROOBRASOCIAL)
                Dim VfechaEgreso As New SqlParameter("@fechaEgreso", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAEGRESO = Date.MinValue, Nothing, Item.FECHAEGRESO))
                Dim VmotivoEgreso_id As New SqlParameter("@motivoEgreso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEGRESO_ID)
                Dim Vacompaniante As New SqlParameter("@acompaniante", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ACOMPANIANTE)
                Dim VitemPendiente As New SqlParameter("@itemPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ITEMPENDIENTE)
                Dim VpreAlta As New SqlParameter("@preAlta", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREALTA)
                Dim VsolicitudEstudio As New SqlParameter("@solicitudEstudio", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDESTUDIO)
                Dim VsolicitudTraslado As New SqlParameter("@solicitudTraslado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SOLICITUDTRASLADO)
                Dim VinterconsultaPendiente As New SqlParameter("@interconsultaPendiente", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INTERCONSULTAPENDIENTE)
                Dim ValtaAutorizada As New SqlParameter("@altaAutorizada", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALTAAUTORIZADA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vrespira As New SqlParameter("@respira", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RESPIRA)
                Dim Vcontacto As New SqlParameter("@contacto", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTACTO)
                Dim Vtqt As New SqlParameter("@tqt", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TQT)
                Dim Varm As New SqlParameter("@arm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ARM)
                Dim Voxigeno As New SqlParameter("@oxigeno", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OXIGENO)
                Dim Vvo As New SqlParameter("@vo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VO)
                Dim Vsng As New SqlParameter("@sng", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SNG)
                Dim Vgastro As New SqlParameter("@gastro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GASTRO)
                Dim Vsv As New SqlParameter("@sv", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SV)
                Dim Vcat As New SqlParameter("@cat", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CAT)
                Dim Vtalla As New SqlParameter("@talla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALLA)
                Dim Vtalon As New SqlParameter("@talon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TALON)
                Dim Vsac As New SqlParameter("@sac", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SAC)
                Dim Visq As New SqlParameter("@isq", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ISQ)
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim Vpaciente_traumatico As New SqlParameter("@paciente_traumatico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_TRAUMATICO)
                Dim VtxtPacTraumatico As New SqlParameter("@txtPacTraumatico", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACTRAUMATICO)
                Dim Vpaciente_judicializado As New SqlParameter("@paciente_judicializado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_JUDICIALIZADO)
                Dim VtxtPacJudicializado As New SqlParameter("@txtPacJudicializado", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TXTPACJUDICIALIZADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vpaciente_id, VnumeroHistoriaClinica, VnumeroInternacion, Vhabitacion_id, Vsede_id, Vnombre, Vapellido, Vgenero, VfechaNacimiento, VtipoDocumento_id, VnumeroDocumento, Vdiagnostico_id, VfechaIngreso, VobraSocial_id, VnumeroObraSocial, VfechaEgreso, VmotivoEgreso_id, Vacompaniante, VitemPendiente, VpreAlta, VsolicitudEstudio, VsolicitudTraslado, VinterconsultaPendiente, ValtaAutorizada, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vusuario_id, Vrespira, Vcontacto, Vtqt, Varm, Voxigeno, Vvo, Vsng, Vgastro, Vsv, Vcat, Vtalla, Vtalon, Vsac, Visq, VfechaModificacion, Vpaciente_traumatico, VtxtPacTraumatico, Vpaciente_judicializado, VtxtPacJudicializado, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PACIENTES_HISTORIAL)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PACIENTES_HISTORIAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PACIENTES_HISTORIAL
        ''' Fecha de Creación  : viernes, 13 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla PACIENTES_HISTORIAL. </remarks>
        Public Class ColumnNames
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NUMEROHISTORIACLINICA As String = "NUMEROHISTORIACLINICA"
            Public Const NUMEROINTERNACION As String = "NUMEROINTERNACION"
            Public Const HABITACION_ID As String = "HABITACION_ID"
            Public Const SEDE_ID As String = "SEDE_ID"
            Public Const NOMBRE As String = "NOMBRE"
            Public Const APELLIDO As String = "APELLIDO"
            Public Const GENERO As String = "GENERO"
            Public Const FECHANACIMIENTO As String = "FECHANACIMIENTO"
            Public Const TIPODOCUMENTO_ID As String = "TIPODOCUMENTO_ID"
            Public Const NUMERODOCUMENTO As String = "NUMERODOCUMENTO"
            Public Const DIAGNOSTICO_ID As String = "DIAGNOSTICO_ID"
            Public Const FECHAINGRESO As String = "FECHAINGRESO"
            Public Const OBRASOCIAL_ID As String = "OBRASOCIAL_ID"
            Public Const NUMEROOBRASOCIAL As String = "NUMEROOBRASOCIAL"
            Public Const FECHAEGRESO As String = "FECHAEGRESO"
            Public Const MOTIVOEGRESO_ID As String = "MOTIVOEGRESO_ID"
            Public Const ACOMPANIANTE As String = "ACOMPANIANTE"
            Public Const ITEMPENDIENTE As String = "ITEMPENDIENTE"
            Public Const PREALTA As String = "PREALTA"
            Public Const SOLICITUDESTUDIO As String = "SOLICITUDESTUDIO"
            Public Const SOLICITUDTRASLADO As String = "SOLICITUDTRASLADO"
            Public Const INTERCONSULTAPENDIENTE As String = "INTERCONSULTAPENDIENTE"
            Public Const ALTAAUTORIZADA As String = "ALTAAUTORIZADA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const RESPIRA As String = "RESPIRA"
            Public Const CONTACTO As String = "CONTACTO"
            Public Const TQT As String = "TQT"
            Public Const ARM As String = "ARM"
            Public Const OXIGENO As String = "OXIGENO"
            Public Const VO As String = "VO"
            Public Const SNG As String = "SNG"
            Public Const GASTRO As String = "GASTRO"
            Public Const SV As String = "SV"
            Public Const CAT As String = "CAT"
            Public Const TALLA As String = "TALLA"
            Public Const TALON As String = "TALON"
            Public Const SAC As String = "SAC"
            Public Const ISQ As String = "ISQ"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const PACIENTE_TRAUMATICO As String = "PACIENTE_TRAUMATICO"
            Public Const TXTPACTRAUMATICO As String = "TXTPACTRAUMATICO"
            Public Const PACIENTE_JUDICIALIZADO As String = "PACIENTE_JUDICIALIZADO"
            Public Const TXTPACJUDICIALIZADO As String = "TXTPACJUDICIALIZADO"
        End Class ' ColumnNames
    End Class ' PACIENTES_HISTORIAL
    Public Class SEDES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            sede_id
            descripcion
            empresa_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.SEDES)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.SEDES) As Entities.Tables.SEDES
            Dim result As Boolean

            Try
                _commandText = "_SEDES_ADD"
                Dim vPKsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vempresa_id As New SqlParameter("@empresa_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsede_id, Vdescripcion, Vempresa_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SEDE_ID = vPKsede_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.SEDES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Sedes_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.SEDES
                    NewItem.SEDE_ID = IIf(Convert.IsDBNull(dr("sede_id")), Nothing, dr("sede_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.EMPRESA_ID = IIf(Convert.IsDBNull(dr("empresa_id")), Nothing, dr("empresa_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "SEDES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "SEDES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.SEDES) As Boolean

            Try
                _commandText = "_Sedes_REMOVE"
                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsede_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Sedes_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.SEDES) As Boolean

            Try
                _commandText = "_Sedes_UPDATE"

                Dim Vsede_id As New SqlParameter("@sede_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vempresa_id As New SqlParameter("@empresa_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EMPRESA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vsede_id, Vdescripcion, Vempresa_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.SEDES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.SEDES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla SEDES
        ''' Fecha de Creación  : jueves, 25 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla SEDES. </remarks>
        Public Class ColumnNames
            Public Const SEDE_ID As String = "SEDE_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const EMPRESA_ID As String = "EMPRESA_ID"
        End Class ' ColumnNames
    End Class ' SEDES
    Public Class PROCEDIMIENTOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            procedimiento_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PROCEDIMIENTOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PROCEDIMIENTOS) As Entities.Tables.PROCEDIMIENTOS
            Dim result As Boolean

            Try
                _commandText = "_PROCEDIMIENTOS_ADD"
                Dim vPKprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKprocedimiento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PROCEDIMIENTO_ID = vPKprocedimiento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PROCEDIMIENTOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Procedimientos_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PROCEDIMIENTOS
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PROCEDIMIENTOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PROCEDIMIENTOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PROCEDIMIENTOS) As Boolean

            Try
                _commandText = "_Procedimientos_REMOVE"
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vprocedimiento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Procedimientos_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PROCEDIMIENTOS) As Boolean

            Try
                _commandText = "_Procedimientos_UPDATE"

                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vprocedimiento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PROCEDIMIENTOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PROCEDIMIENTOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PROCEDIMIENTOS
        ''' Fecha de Creación  : lunes, 9 de mayo de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PROCEDIMIENTOS. </remarks>
        Public Class ColumnNames
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' PROCEDIMIENTOS
    Public Class PERTENENCIASPACIENTE
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            id
            paciente_id
            NombrePaciente
            fecha_alta
            motivoAlta_id
            supervisorEnf
            gobernante
            cantBolsas
            obsSede
            fechaDeposito
            fechaLegales
            fechaRetiro
            respRetiro
            obsRetiro
            cantLlamados
            fechaLimite
            estado_id
            mailsAlertas
            Sede
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PERTENENCIASPACIENTE)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PERTENENCIASPACIENTE) As Entities.Tables.PERTENENCIASPACIENTE
            Dim result As Boolean

            Try
                _commandText = "_PERTENENCIASPACIENTE_ADD"
                Dim vPKid As New SqlParameter("@id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VNombrePaciente As New SqlParameter("@NombrePaciente", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREPACIENTE)
                Dim Vfecha_alta As New SqlParameter("@fecha_alta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA_ALTA = Date.MinValue, Nothing, Item.FECHA_ALTA))
                Dim VmotivoAlta_id As New SqlParameter("@motivoAlta_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOALTA_ID)
                Dim VsupervisorEnf As New SqlParameter("@supervisorEnf", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUPERVISORENF)
                Dim Vgobernante As New SqlParameter("@gobernante", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOBERNANTE)
                Dim VcantBolsas As New SqlParameter("@cantBolsas", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTBOLSAS)
                Dim VobsSede As New SqlParameter("@obsSede", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSSEDE)
                Dim VfechaDeposito As New SqlParameter("@fechaDeposito", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHADEPOSITO = Date.MinValue, Nothing, Item.FECHADEPOSITO))
                Dim VfechaLegales As New SqlParameter("@fechaLegales", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHALEGALES = Date.MinValue, Nothing, Item.FECHALEGALES))
                Dim VfechaRetiro As New SqlParameter("@fechaRetiro", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHARETIRO = Date.MinValue, Nothing, Item.FECHARETIRO))
                Dim VrespRetiro As New SqlParameter("@respRetiro", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RESPRETIRO)
                Dim VobsRetiro As New SqlParameter("@obsRetiro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSRETIRO)
                Dim VcantLlamados As New SqlParameter("@cantLlamados", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTLLAMADOS)
                Dim VfechaLimite As New SqlParameter("@fechaLimite", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHALIMITE = Date.MinValue, Nothing, Item.FECHALIMITE))
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VmailsAlertas As New SqlParameter("@mailsAlertas", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MAILSALERTAS)
                Dim VSede As New SqlParameter("@Sede", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKid, Vpaciente_id, VNombrePaciente, Vfecha_alta, VmotivoAlta_id, VsupervisorEnf, Vgobernante, VcantBolsas, VobsSede, VfechaDeposito, VfechaLegales, VfechaRetiro, VrespRetiro, VobsRetiro, VcantLlamados, VfechaLimite, Vestado_id, VmailsAlertas, VSede, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID = vPKid.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PERTENENCIASPACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PertenenciasPaciente_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PERTENENCIASPACIENTE
                    NewItem.ID = IIf(Convert.IsDBNull(dr("id")), Nothing, dr("id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.NOMBREPACIENTE = IIf(Convert.IsDBNull(dr("NombrePaciente")), Nothing, dr("NombrePaciente"))
                    NewItem.FECHA_ALTA = IIf(Convert.IsDBNull(dr("fecha_alta")), Nothing, dr("fecha_alta"))
                    NewItem.MOTIVOALTA_ID = IIf(Convert.IsDBNull(dr("motivoAlta_id")), Nothing, dr("motivoAlta_id"))
                    NewItem.SUPERVISORENF = IIf(Convert.IsDBNull(dr("supervisorEnf")), Nothing, dr("supervisorEnf"))
                    NewItem.GOBERNANTE = IIf(Convert.IsDBNull(dr("gobernante")), Nothing, dr("gobernante"))
                    NewItem.CANTBOLSAS = IIf(Convert.IsDBNull(dr("cantBolsas")), Nothing, dr("cantBolsas"))
                    NewItem.OBSSEDE = IIf(Convert.IsDBNull(dr("obsSede")), Nothing, dr("obsSede"))
                    NewItem.FECHADEPOSITO = IIf(Convert.IsDBNull(dr("fechaDeposito")), Nothing, dr("fechaDeposito"))
                    NewItem.FECHALEGALES = IIf(Convert.IsDBNull(dr("fechaLegales")), Nothing, dr("fechaLegales"))
                    NewItem.FECHARETIRO = IIf(Convert.IsDBNull(dr("fechaRetiro")), Nothing, dr("fechaRetiro"))
                    NewItem.RESPRETIRO = IIf(Convert.IsDBNull(dr("respRetiro")), Nothing, dr("respRetiro"))
                    NewItem.OBSRETIRO = IIf(Convert.IsDBNull(dr("obsRetiro")), Nothing, dr("obsRetiro"))
                    NewItem.CANTLLAMADOS = IIf(Convert.IsDBNull(dr("cantLlamados")), Nothing, dr("cantLlamados"))
                    NewItem.FECHALIMITE = IIf(Convert.IsDBNull(dr("fechaLimite")), Nothing, dr("fechaLimite"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.MAILSALERTAS = IIf(Convert.IsDBNull(dr("mailsAlertas")), Nothing, dr("mailsAlertas"))
                    NewItem.SEDE = IIf(Convert.IsDBNull(dr("Sede")), Nothing, dr("Sede"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PERTENENCIASPACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PERTENENCIASPACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PERTENENCIASPACIENTE) As Boolean

            Try
                _commandText = "_PertenenciasPaciente_REMOVE"
                Dim Vid As New SqlParameter("@id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vid, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PertenenciasPaciente_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PERTENENCIASPACIENTE) As Boolean

            Try
                _commandText = "_PertenenciasPaciente_UPDATE"

                Dim Vid As New SqlParameter("@id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VNombrePaciente As New SqlParameter("@NombrePaciente", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NOMBREPACIENTE)
                Dim Vfecha_alta As New SqlParameter("@fecha_alta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA_ALTA = Date.MinValue, Nothing, Item.FECHA_ALTA))
                Dim VmotivoAlta_id As New SqlParameter("@motivoAlta_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOALTA_ID)
                Dim VsupervisorEnf As New SqlParameter("@supervisorEnf", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUPERVISORENF)
                Dim Vgobernante As New SqlParameter("@gobernante", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOBERNANTE)
                Dim VcantBolsas As New SqlParameter("@cantBolsas", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTBOLSAS)
                Dim VobsSede As New SqlParameter("@obsSede", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSSEDE)
                Dim VfechaDeposito As New SqlParameter("@fechaDeposito", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHADEPOSITO = Date.MinValue, Nothing, Item.FECHADEPOSITO))
                Dim VfechaLegales As New SqlParameter("@fechaLegales", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHALEGALES = Date.MinValue, Nothing, Item.FECHALEGALES))
                Dim VfechaRetiro As New SqlParameter("@fechaRetiro", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHARETIRO = Date.MinValue, Nothing, Item.FECHARETIRO))
                Dim VrespRetiro As New SqlParameter("@respRetiro", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.RESPRETIRO)
                Dim VobsRetiro As New SqlParameter("@obsRetiro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSRETIRO)
                Dim VcantLlamados As New SqlParameter("@cantLlamados", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTLLAMADOS)
                Dim VfechaLimite As New SqlParameter("@fechaLimite", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHALIMITE = Date.MinValue, Nothing, Item.FECHALIMITE))
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VmailsAlertas As New SqlParameter("@mailsAlertas", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MAILSALERTAS)
                Dim VSede As New SqlParameter("@Sede", SqlDbType.Char, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SEDE)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vid, Vpaciente_id, VNombrePaciente, Vfecha_alta, VmotivoAlta_id, VsupervisorEnf, Vgobernante, VcantBolsas, VobsSede, VfechaDeposito, VfechaLegales, VfechaRetiro, VrespRetiro, VobsRetiro, VcantLlamados, VfechaLimite, Vestado_id, VmailsAlertas, VSede, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PERTENENCIASPACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PERTENENCIASPACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PERTENENCIASPACIENTE
        ''' Fecha de Creación  : miércoles, 13 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PERTENENCIASPACIENTE. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const NOMBREPACIENTE As String = "NOMBREPACIENTE"
            Public Const FECHA_ALTA As String = "FECHA_ALTA"
            Public Const MOTIVOALTA_ID As String = "MOTIVOALTA_ID"
            Public Const SUPERVISORENF As String = "SUPERVISORENF"
            Public Const GOBERNANTE As String = "GOBERNANTE"
            Public Const CANTBOLSAS As String = "CANTBOLSAS"
            Public Const OBSSEDE As String = "OBSSEDE"
            Public Const FECHADEPOSITO As String = "FECHADEPOSITO"
            Public Const FECHALEGALES As String = "FECHALEGALES"
            Public Const FECHARETIRO As String = "FECHARETIRO"
            Public Const RESPRETIRO As String = "RESPRETIRO"
            Public Const OBSRETIRO As String = "OBSRETIRO"
            Public Const CANTLLAMADOS As String = "CANTLLAMADOS"
            Public Const FECHALIMITE As String = "FECHALIMITE"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const MAILSALERTAS As String = "MAILSALERTAS"
            Public Const SEDE As String = "SEDE"
        End Class ' ColumnNames
    End Class ' PERTENENCIASPACIENTE
    Public Class MOTIVOEGRESO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            motivoEgreso_id
            Descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MOTIVOEGRESO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MOTIVOEGRESO) As Entities.Tables.MOTIVOEGRESO
            Dim result As Boolean

            Try
                _commandText = "_MOTIVOEGRESO_ADD"
                Dim vPKmotivoEgreso_id As New SqlParameter("@motivoEgreso_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKmotivoEgreso_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.MOTIVOEGRESO_ID = vPKmotivoEgreso_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MOTIVOEGRESO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MotivoEgreso_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MOTIVOEGRESO
                    NewItem.MOTIVOEGRESO_ID = IIf(Convert.IsDBNull(dr("motivoEgreso_id")), Nothing, dr("motivoEgreso_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MOTIVOEGRESO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MOTIVOEGRESO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MOTIVOEGRESO) As Boolean

            Try
                _commandText = "_MotivoEgreso_REMOVE"
                Dim VmotivoEgreso_id As New SqlParameter("@motivoEgreso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEGRESO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VmotivoEgreso_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MotivoEgreso_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MOTIVOEGRESO) As Boolean

            Try
                _commandText = "_MotivoEgreso_UPDATE"

                Dim VmotivoEgreso_id As New SqlParameter("@motivoEgreso_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOEGRESO_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VmotivoEgreso_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MOTIVOEGRESO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MOTIVOEGRESO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MOTIVOEGRESO
        ''' Fecha de Creación  : viernes, 19 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MOTIVOEGRESO. </remarks>
        Public Class ColumnNames
            Public Const MOTIVOEGRESO_ID As String = "MOTIVOEGRESO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' MOTIVOEGRESO
    Public Class ESTADOSPERTENENCIASPACIENTE
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            estado_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.ESTADOSPERTENENCIASPACIENTE)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.ESTADOSPERTENENCIASPACIENTE) As Entities.Tables.ESTADOSPERTENENCIASPACIENTE
            Dim result As Boolean

            Try
                _commandText = "_ESTADOSPERTENENCIASPACIENTE_ADD"
                Dim vPKestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKestado_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ESTADO_ID = vPKestado_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.ESTADOSPERTENENCIASPACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EstadosPertenenciasPaciente_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.ESTADOSPERTENENCIASPACIENTE
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ESTADOSPERTENENCIASPACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ESTADOSPERTENENCIASPACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.ESTADOSPERTENENCIASPACIENTE) As Boolean

            Try
                _commandText = "_EstadosPertenenciasPaciente_REMOVE"
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vestado_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EstadosPertenenciasPaciente_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.ESTADOSPERTENENCIASPACIENTE) As Boolean

            Try
                _commandText = "_EstadosPertenenciasPaciente_UPDATE"

                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vestado_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.ESTADOSPERTENENCIASPACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.ESTADOSPERTENENCIASPACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ESTADOSPERTENENCIASPACIENTE
        ''' Fecha de Creación  : miércoles, 13 de julio de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ESTADOSPERTENENCIASPACIENTE. </remarks>
        Public Class ColumnNames
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' ESTADOSPERTENENCIASPACIENTE
    Public Class MED_DILUYENTE
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            diluyente_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_DILUYENTE)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_DILUYENTE) As Entities.Tables.MED_DILUYENTE
            Dim result As Boolean

            Try
                _commandText = "_MED_DILUYENTE_ADD"
                Dim vPKdiluyente_id As New SqlParameter("@diluyente_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKdiluyente_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.DILUYENTE_ID = vPKdiluyente_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_DILUYENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Diluyente_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_DILUYENTE
                    NewItem.DILUYENTE_ID = IIf(Convert.IsDBNull(dr("diluyente_id")), Nothing, dr("diluyente_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_DILUYENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_DILUYENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_DILUYENTE) As Boolean

            Try
                _commandText = "_MED_Diluyente_REMOVE"
                Dim Vdiluyente_id As New SqlParameter("@diluyente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DILUYENTE_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vdiluyente_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Diluyente_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_DILUYENTE) As Boolean

            Try
                _commandText = "_MED_Diluyente_UPDATE"

                Dim Vdiluyente_id As New SqlParameter("@diluyente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DILUYENTE_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vdiluyente_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_DILUYENTE)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_DILUYENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_DILUYENTE
        ''' Fecha de Creación  : jueves, 11 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_DILUYENTE. </remarks>
        Public Class ColumnNames
            Public Const DILUYENTE_ID As String = "DILUYENTE_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' MED_DILUYENTE
    Public Class MED_EVENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            evento_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_EVENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_EVENTO) As Entities.Tables.MED_EVENTO
            Dim result As Boolean

            Try
                _commandText = "_MED_EVENTO_ADD"
                Dim vPKevento_id As New SqlParameter("@evento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKevento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.EVENTO_ID = vPKevento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_EVENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Evento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_EVENTO
                    NewItem.EVENTO_ID = IIf(Convert.IsDBNull(dr("evento_id")), Nothing, dr("evento_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_EVENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_EVENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_EVENTO) As Boolean

            Try
                _commandText = "_MED_Evento_REMOVE"
                Dim Vevento_id As New SqlParameter("@evento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vevento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Evento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_EVENTO) As Boolean

            Try
                _commandText = "_MED_Evento_UPDATE"

                Dim Vevento_id As New SqlParameter("@evento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vevento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_EVENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_EVENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_EVENTO
        ''' Fecha de Creación  : jueves, 11 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_EVENTO. </remarks>
        Public Class ColumnNames
            Public Const EVENTO_ID As String = "EVENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' MED_EVENTO
    Public Class MED_HORARIODESUMINISTRO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            horarioDeSuministro_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_HORARIODESUMINISTRO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_HORARIODESUMINISTRO) As Entities.Tables.MED_HORARIODESUMINISTRO
            Dim result As Boolean

            Try
                _commandText = "_MED_HORARIODESUMINISTRO_ADD"
                Dim vPKhorarioDeSuministro_id As New SqlParameter("@horarioDeSuministro_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKhorarioDeSuministro_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.HORARIODESUMINISTRO_ID = vPKhorarioDeSuministro_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_HORARIODESUMINISTRO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_HorarioDeSuministro_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_HORARIODESUMINISTRO
                    NewItem.HORARIODESUMINISTRO_ID = IIf(Convert.IsDBNull(dr("horarioDeSuministro_id")), Nothing, dr("horarioDeSuministro_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_HORARIODESUMINISTRO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_HORARIODESUMINISTRO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_HORARIODESUMINISTRO) As Boolean

            Try
                _commandText = "_MED_HorarioDeSuministro_REMOVE"
                Dim VhorarioDeSuministro_id As New SqlParameter("@horarioDeSuministro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIODESUMINISTRO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VhorarioDeSuministro_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_HorarioDeSuministro_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_HORARIODESUMINISTRO) As Boolean

            Try
                _commandText = "_MED_HorarioDeSuministro_UPDATE"

                Dim VhorarioDeSuministro_id As New SqlParameter("@horarioDeSuministro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIODESUMINISTRO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VhorarioDeSuministro_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_HORARIODESUMINISTRO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_HORARIODESUMINISTRO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_HORARIODESUMINISTRO
        ''' Fecha de Creación  : jueves, 11 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_HORARIODESUMINISTRO. </remarks>
        Public Class ColumnNames
            Public Const HORARIODESUMINISTRO_ID As String = "HORARIODESUMINISTRO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' MED_HORARIODESUMINISTRO
    Public Class MED_NUMERO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            numero_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_NUMERO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_NUMERO) As Entities.Tables.MED_NUMERO
            Dim result As Boolean

            Try
                _commandText = "_MED_NUMERO_ADD"
                Dim vPKnumero_id As New SqlParameter("@numero_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKnumero_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.NUMERO_ID = vPKnumero_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_NUMERO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Numero_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_NUMERO
                    NewItem.NUMERO_ID = IIf(Convert.IsDBNull(dr("numero_id")), Nothing, dr("numero_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_NUMERO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_NUMERO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_NUMERO) As Boolean

            Try
                _commandText = "_MED_Numero_REMOVE"
                Dim Vnumero_id As New SqlParameter("@numero_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMERO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vnumero_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Numero_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_NUMERO) As Boolean

            Try
                _commandText = "_MED_Numero_UPDATE"

                Dim Vnumero_id As New SqlParameter("@numero_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUMERO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vnumero_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_NUMERO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_NUMERO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_NUMERO
        ''' Fecha de Creación  : jueves, 11 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_NUMERO. </remarks>
        Public Class ColumnNames
            Public Const NUMERO_ID As String = "NUMERO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' MED_NUMERO
    Public Class MED_PERIODO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            periodo_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_PERIODO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_PERIODO) As Entities.Tables.MED_PERIODO
            Dim result As Boolean

            Try
                _commandText = "_MED_PERIODO_ADD"
                Dim vPKperiodo_id As New SqlParameter("@periodo_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKperiodo_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PERIODO_ID = vPKperiodo_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_PERIODO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Periodo_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_PERIODO
                    NewItem.PERIODO_ID = IIf(Convert.IsDBNull(dr("periodo_id")), Nothing, dr("periodo_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_PERIODO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_PERIODO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_PERIODO) As Boolean

            Try
                _commandText = "_MED_Periodo_REMOVE"
                Dim Vperiodo_id As New SqlParameter("@periodo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIODO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vperiodo_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Periodo_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_PERIODO) As Boolean

            Try
                _commandText = "_MED_Periodo_UPDATE"

                Dim Vperiodo_id As New SqlParameter("@periodo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIODO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vperiodo_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_PERIODO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_PERIODO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_PERIODO
        ''' Fecha de Creación  : jueves, 11 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_PERIODO. </remarks>
        Public Class ColumnNames
            Public Const PERIODO_ID As String = "PERIODO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' MED_PERIODO
    Public Class MED_PRESENTACION
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            presentacion_id
            descripcion
            unidadDeMedida_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_PRESENTACION)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_PRESENTACION) As Entities.Tables.MED_PRESENTACION
            Dim result As Boolean

            Try
                _commandText = "_MED_PRESENTACION_ADD"
                Dim vPKpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKpresentacion_id, Vdescripcion, VunidadDeMedida_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PRESENTACION_ID = vPKpresentacion_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_PRESENTACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Presentacion_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_PRESENTACION
                    NewItem.PRESENTACION_ID = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.UNIDADDEMEDIDA_ID = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_PRESENTACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_PRESENTACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_PRESENTACION) As Boolean

            Try
                _commandText = "_MED_Presentacion_REMOVE"
                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vpresentacion_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Presentacion_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_PRESENTACION) As Boolean

            Try
                _commandText = "_MED_Presentacion_UPDATE"

                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vpresentacion_id, Vdescripcion, VunidadDeMedida_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_PRESENTACION)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_PRESENTACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_PRESENTACION
        ''' Fecha de Creación  : jueves, 11 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_PRESENTACION. </remarks>
        Public Class ColumnNames
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
        End Class ' ColumnNames
    End Class ' MED_PRESENTACION
    Public Class MED_HISTORIAL_SUMINISTRODEMEDICACION
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            suministroDeMedicacion_id
            paciente_id
            medicamento_id
            fechaInicio
            dosis
            presentacion_id
            unidadDeMedida_id
            potencia
            via_id
            viaTieneOtro
            viaOtro
            diluyente_id
            ml
            durante_id
            periodo_id
            lapsoDeTiempo
            lapsoDeTiempoHasta
            horarioDeSuministro_id
            horarioEvento
            evento
            horarioOtro
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            HS_SH
            L
            M
            X
            J
            V
            S
            D
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION) As Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION
            Dim result As Boolean

            Try
                _commandText = "_MED_HISTORIAL_SUMINISTRODEMEDICACION_ADD"
                Dim vPKsuministroDeMedicacion_id As New SqlParameter("@suministroDeMedicacion_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim VfechaInicio As New SqlParameter("@fechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINICIO = Date.MinValue, Nothing, Item.FECHAINICIO))
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Vpotencia As New SqlParameter("@potencia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POTENCIA)
                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)
                Dim VviaTieneOtro As New SqlParameter("@viaTieneOtro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIATIENEOTRO)
                Dim VviaOtro As New SqlParameter("@viaOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIAOTRO)
                Dim Vdiluyente_id As New SqlParameter("@diluyente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DILUYENTE_ID)
                Dim Vml As New SqlParameter("@ml", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML)
                Dim Vdurante_id As New SqlParameter("@durante_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DURANTE_ID)
                Dim Vperiodo_id As New SqlParameter("@periodo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIODO_ID)
                Dim VlapsoDeTiempo As New SqlParameter("@lapsoDeTiempo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LAPSODETIEMPO)
                Dim VlapsoDeTiempoHasta As New SqlParameter("@lapsoDeTiempoHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LAPSODETIEMPOHASTA = Date.MinValue, Nothing, Item.LAPSODETIEMPOHASTA))
                Dim VhorarioDeSuministro_id As New SqlParameter("@horarioDeSuministro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIODESUMINISTRO_ID)
                Dim VhorarioEvento As New SqlParameter("@horarioEvento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOEVENTO)
                Dim Vevento As New SqlParameter("@evento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO)
                Dim VhorarioOtro As New SqlParameter("@horarioOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOOTRO)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim VL As New SqlParameter("@L", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.L)
                Dim VM As New SqlParameter("@M", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.M)
                Dim VX As New SqlParameter("@X", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.X)
                Dim VJ As New SqlParameter("@J", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.J)
                Dim VV As New SqlParameter("@V", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.V)
                Dim VS As New SqlParameter("@S", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.S)
                Dim VD As New SqlParameter("@D", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.D)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsuministroDeMedicacion_id, Vpaciente_id, Vmedicamento_id, VfechaInicio, Vdosis, Vpresentacion_id, VunidadDeMedida_id, Vpotencia, Vvia_id, VviaTieneOtro, VviaOtro, Vdiluyente_id, Vml, Vdurante_id, Vperiodo_id, VlapsoDeTiempo, VlapsoDeTiempoHasta, VhorarioDeSuministro_id, VhorarioEvento, Vevento, VhorarioOtro, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, VL, VM, VX, VJ, VV, VS, VD, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SUMINISTRODEMEDICACION_ID = vPKsuministroDeMedicacion_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Historial_SuministroDeMedicacion_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION
                    NewItem.SUMINISTRODEMEDICACION_ID = IIf(Convert.IsDBNull(dr("suministroDeMedicacion_id")), Nothing, dr("suministroDeMedicacion_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.MEDICAMENTO_ID = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.FECHAINICIO = IIf(Convert.IsDBNull(dr("fechaInicio")), Nothing, dr("fechaInicio"))
                    NewItem.DOSIS = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.PRESENTACION_ID = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.UNIDADDEMEDIDA_ID = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.POTENCIA = IIf(Convert.IsDBNull(dr("potencia")), Nothing, dr("potencia"))
                    NewItem.VIA_ID = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.VIATIENEOTRO = IIf(Convert.IsDBNull(dr("viaTieneOtro")), Nothing, dr("viaTieneOtro"))
                    NewItem.VIAOTRO = IIf(Convert.IsDBNull(dr("viaOtro")), Nothing, dr("viaOtro"))
                    NewItem.DILUYENTE_ID = IIf(Convert.IsDBNull(dr("diluyente_id")), Nothing, dr("diluyente_id"))
                    NewItem.ML = IIf(Convert.IsDBNull(dr("ml")), Nothing, dr("ml"))
                    NewItem.DURANTE_ID = IIf(Convert.IsDBNull(dr("durante_id")), Nothing, dr("durante_id"))
                    NewItem.PERIODO_ID = IIf(Convert.IsDBNull(dr("periodo_id")), Nothing, dr("periodo_id"))
                    NewItem.LAPSODETIEMPO = IIf(Convert.IsDBNull(dr("lapsoDeTiempo")), Nothing, dr("lapsoDeTiempo"))
                    NewItem.LAPSODETIEMPOHASTA = IIf(Convert.IsDBNull(dr("lapsoDeTiempoHasta")), Nothing, dr("lapsoDeTiempoHasta"))
                    NewItem.HORARIODESUMINISTRO_ID = IIf(Convert.IsDBNull(dr("horarioDeSuministro_id")), Nothing, dr("horarioDeSuministro_id"))
                    NewItem.HORARIOEVENTO = IIf(Convert.IsDBNull(dr("horarioEvento")), Nothing, dr("horarioEvento"))
                    NewItem.EVENTO = IIf(Convert.IsDBNull(dr("evento")), Nothing, dr("evento"))
                    NewItem.HORARIOOTRO = IIf(Convert.IsDBNull(dr("horarioOtro")), Nothing, dr("horarioOtro"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.HS_SH = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.L = IIf(Convert.IsDBNull(dr("L")), Nothing, dr("L"))
                    NewItem.M = IIf(Convert.IsDBNull(dr("M")), Nothing, dr("M"))
                    NewItem.X = IIf(Convert.IsDBNull(dr("X")), Nothing, dr("X"))
                    NewItem.J = IIf(Convert.IsDBNull(dr("J")), Nothing, dr("J"))
                    NewItem.V = IIf(Convert.IsDBNull(dr("V")), Nothing, dr("V"))
                    NewItem.S = IIf(Convert.IsDBNull(dr("S")), Nothing, dr("S"))
                    NewItem.D = IIf(Convert.IsDBNull(dr("D")), Nothing, dr("D"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_HISTORIAL_SUMINISTRODEMEDICACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_HISTORIAL_SUMINISTRODEMEDICACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION) As Boolean

            Try
                _commandText = "_MED_Historial_SuministroDeMedicacion_REMOVE"
                Dim VsuministroDeMedicacion_id As New SqlParameter("@suministroDeMedicacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEMEDICACION_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VsuministroDeMedicacion_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Historial_SuministroDeMedicacion_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION) As Boolean

            Try
                _commandText = "_MED_Historial_SuministroDeMedicacion_UPDATE"

                Dim VsuministroDeMedicacion_id As New SqlParameter("@suministroDeMedicacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEMEDICACION_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim VfechaInicio As New SqlParameter("@fechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINICIO = Date.MinValue, Nothing, Item.FECHAINICIO))
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Vpotencia As New SqlParameter("@potencia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POTENCIA)
                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)
                Dim VviaTieneOtro As New SqlParameter("@viaTieneOtro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIATIENEOTRO)
                Dim VviaOtro As New SqlParameter("@viaOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIAOTRO)
                Dim Vdiluyente_id As New SqlParameter("@diluyente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DILUYENTE_ID)
                Dim Vml As New SqlParameter("@ml", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML)
                Dim Vdurante_id As New SqlParameter("@durante_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DURANTE_ID)
                Dim Vperiodo_id As New SqlParameter("@periodo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIODO_ID)
                Dim VlapsoDeTiempo As New SqlParameter("@lapsoDeTiempo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LAPSODETIEMPO)
                Dim VlapsoDeTiempoHasta As New SqlParameter("@lapsoDeTiempoHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LAPSODETIEMPOHASTA = Date.MinValue, Nothing, Item.LAPSODETIEMPOHASTA))
                Dim VhorarioDeSuministro_id As New SqlParameter("@horarioDeSuministro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIODESUMINISTRO_ID)
                Dim VhorarioEvento As New SqlParameter("@horarioEvento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOEVENTO)
                Dim Vevento As New SqlParameter("@evento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO)
                Dim VhorarioOtro As New SqlParameter("@horarioOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOOTRO)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim VL As New SqlParameter("@L", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.L)
                Dim VM As New SqlParameter("@M", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.M)
                Dim VX As New SqlParameter("@X", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.X)
                Dim VJ As New SqlParameter("@J", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.J)
                Dim VV As New SqlParameter("@V", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.V)
                Dim VS As New SqlParameter("@S", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.S)
                Dim VD As New SqlParameter("@D", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.D)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VsuministroDeMedicacion_id, Vpaciente_id, Vmedicamento_id, VfechaInicio, Vdosis, Vpresentacion_id, VunidadDeMedida_id, Vpotencia, Vvia_id, VviaTieneOtro, VviaOtro, Vdiluyente_id, Vml, Vdurante_id, Vperiodo_id, VlapsoDeTiempo, VlapsoDeTiempoHasta, VhorarioDeSuministro_id, VhorarioEvento, Vevento, VhorarioOtro, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, VL, VM, VX, VJ, VV, VS, VD, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_HISTORIAL_SUMINISTRODEMEDICACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_HISTORIAL_SUMINISTRODEMEDICACION
        ''' Fecha de Creación  : miércoles, 25 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_HISTORIAL_SUMINISTRODEMEDICACION. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEMEDICACION_ID As String = "SUMINISTRODEMEDICACION_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const FECHAINICIO As String = "FECHAINICIO"
            Public Const DOSIS As String = "DOSIS"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const POTENCIA As String = "POTENCIA"
            Public Const VIA_ID As String = "VIA_ID"
            Public Const VIATIENEOTRO As String = "VIATIENEOTRO"
            Public Const VIAOTRO As String = "VIAOTRO"
            Public Const DILUYENTE_ID As String = "DILUYENTE_ID"
            Public Const ML As String = "ML"
            Public Const DURANTE_ID As String = "DURANTE_ID"
            Public Const PERIODO_ID As String = "PERIODO_ID"
            Public Const LAPSODETIEMPO As String = "LAPSODETIEMPO"
            Public Const LAPSODETIEMPOHASTA As String = "LAPSODETIEMPOHASTA"
            Public Const HORARIODESUMINISTRO_ID As String = "HORARIODESUMINISTRO_ID"
            Public Const HORARIOEVENTO As String = "HORARIOEVENTO"
            Public Const EVENTO As String = "EVENTO"
            Public Const HORARIOOTRO As String = "HORARIOOTRO"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const L As String = "L"
            Public Const M As String = "M"
            Public Const X As String = "X"
            Public Const J As String = "J"
            Public Const V As String = "V"
            Public Const S As String = "S"
            Public Const D As String = "D"
        End Class ' ColumnNames
    End Class ' MED_HISTORIAL_SUMINISTRODEMEDICACION
    Public Class MED_SUMINISTRODEMEDICACION
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            suministroDeMedicacion_id
            paciente_id
            medicamento_id
            fechaInicio
            dosis
            presentacion_id
            unidadDeMedida_id
            potencia
            via_id
            viaTieneOtro
            viaOtro
            diluyente_id
            ml
            durante_id
            periodo_id
            lapsoDeTiempo
            lapsoDeTiempoHasta
            horarioDeSuministro_id
            horarioEvento
            evento
            horarioOtro
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            HS_SH
            L
            M
            X
            J
            V
            S
            D
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_SUMINISTRODEMEDICACION)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_SUMINISTRODEMEDICACION) As Entities.Tables.MED_SUMINISTRODEMEDICACION
            Dim result As Boolean

            Try
                _commandText = "_MED_SUMINISTRODEMEDICACION_ADD"
                Dim vPKsuministroDeMedicacion_id As New SqlParameter("@suministroDeMedicacion_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim VfechaInicio As New SqlParameter("@fechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINICIO = Date.MinValue, Nothing, Item.FECHAINICIO))
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Vpotencia As New SqlParameter("@potencia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POTENCIA)
                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)
                Dim VviaTieneOtro As New SqlParameter("@viaTieneOtro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIATIENEOTRO)
                Dim VviaOtro As New SqlParameter("@viaOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIAOTRO)
                Dim Vdiluyente_id As New SqlParameter("@diluyente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DILUYENTE_ID)
                Dim Vml As New SqlParameter("@ml", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML)
                Dim Vdurante_id As New SqlParameter("@durante_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DURANTE_ID)
                Dim Vperiodo_id As New SqlParameter("@periodo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIODO_ID)
                Dim VlapsoDeTiempo As New SqlParameter("@lapsoDeTiempo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LAPSODETIEMPO)
                Dim VlapsoDeTiempoHasta As New SqlParameter("@lapsoDeTiempoHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LAPSODETIEMPOHASTA = Date.MinValue, Nothing, Item.LAPSODETIEMPOHASTA))
                Dim VhorarioDeSuministro_id As New SqlParameter("@horarioDeSuministro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIODESUMINISTRO_ID)
                Dim VhorarioEvento As New SqlParameter("@horarioEvento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOEVENTO)
                Dim Vevento As New SqlParameter("@evento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO)
                Dim VhorarioOtro As New SqlParameter("@horarioOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOOTRO)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim VL As New SqlParameter("@L", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.L)
                Dim VM As New SqlParameter("@M", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.M)
                Dim VX As New SqlParameter("@X", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.X)
                Dim VJ As New SqlParameter("@J", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.J)
                Dim VV As New SqlParameter("@V", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.V)
                Dim VS As New SqlParameter("@S", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.S)
                Dim VD As New SqlParameter("@D", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.D)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsuministroDeMedicacion_id, Vpaciente_id, Vmedicamento_id, VfechaInicio, Vdosis, Vpresentacion_id, VunidadDeMedida_id, Vpotencia, Vvia_id, VviaTieneOtro, VviaOtro, Vdiluyente_id, Vml, Vdurante_id, Vperiodo_id, VlapsoDeTiempo, VlapsoDeTiempoHasta, VhorarioDeSuministro_id, VhorarioEvento, Vevento, VhorarioOtro, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, VL, VM, VX, VJ, VV, VS, VD, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SUMINISTRODEMEDICACION_ID = vPKsuministroDeMedicacion_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_SUMINISTRODEMEDICACION)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_SuministroDeMedicacion_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_SUMINISTRODEMEDICACION
                    NewItem.SUMINISTRODEMEDICACION_ID = IIf(Convert.IsDBNull(dr("suministroDeMedicacion_id")), Nothing, dr("suministroDeMedicacion_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.MEDICAMENTO_ID = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.FECHAINICIO = IIf(Convert.IsDBNull(dr("fechaInicio")), Nothing, dr("fechaInicio"))
                    NewItem.DOSIS = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.PRESENTACION_ID = IIf(Convert.IsDBNull(dr("presentacion_id")), Nothing, dr("presentacion_id"))
                    NewItem.UNIDADDEMEDIDA_ID = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.POTENCIA = IIf(Convert.IsDBNull(dr("potencia")), Nothing, dr("potencia"))
                    NewItem.VIA_ID = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.VIATIENEOTRO = IIf(Convert.IsDBNull(dr("viaTieneOtro")), Nothing, dr("viaTieneOtro"))
                    NewItem.VIAOTRO = IIf(Convert.IsDBNull(dr("viaOtro")), Nothing, dr("viaOtro"))
                    NewItem.DILUYENTE_ID = IIf(Convert.IsDBNull(dr("diluyente_id")), Nothing, dr("diluyente_id"))
                    NewItem.ML = IIf(Convert.IsDBNull(dr("ml")), Nothing, dr("ml"))
                    NewItem.DURANTE_ID = IIf(Convert.IsDBNull(dr("durante_id")), Nothing, dr("durante_id"))
                    NewItem.PERIODO_ID = IIf(Convert.IsDBNull(dr("periodo_id")), Nothing, dr("periodo_id"))
                    NewItem.LAPSODETIEMPO = IIf(Convert.IsDBNull(dr("lapsoDeTiempo")), Nothing, dr("lapsoDeTiempo"))
                    NewItem.LAPSODETIEMPOHASTA = IIf(Convert.IsDBNull(dr("lapsoDeTiempoHasta")), Nothing, dr("lapsoDeTiempoHasta"))
                    NewItem.HORARIODESUMINISTRO_ID = IIf(Convert.IsDBNull(dr("horarioDeSuministro_id")), Nothing, dr("horarioDeSuministro_id"))
                    NewItem.HORARIOEVENTO = IIf(Convert.IsDBNull(dr("horarioEvento")), Nothing, dr("horarioEvento"))
                    NewItem.EVENTO = IIf(Convert.IsDBNull(dr("evento")), Nothing, dr("evento"))
                    NewItem.HORARIOOTRO = IIf(Convert.IsDBNull(dr("horarioOtro")), Nothing, dr("horarioOtro"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.HS_SH = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.L = IIf(Convert.IsDBNull(dr("L")), Nothing, dr("L"))
                    NewItem.M = IIf(Convert.IsDBNull(dr("M")), Nothing, dr("M"))
                    NewItem.X = IIf(Convert.IsDBNull(dr("X")), Nothing, dr("X"))
                    NewItem.J = IIf(Convert.IsDBNull(dr("J")), Nothing, dr("J"))
                    NewItem.V = IIf(Convert.IsDBNull(dr("V")), Nothing, dr("V"))
                    NewItem.S = IIf(Convert.IsDBNull(dr("S")), Nothing, dr("S"))
                    NewItem.D = IIf(Convert.IsDBNull(dr("D")), Nothing, dr("D"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_SUMINISTRODEMEDICACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_SUMINISTRODEMEDICACION")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_SUMINISTRODEMEDICACION) As Boolean

            Try
                _commandText = "_MED_SuministroDeMedicacion_REMOVE"
                Dim VsuministroDeMedicacion_id As New SqlParameter("@suministroDeMedicacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEMEDICACION_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VsuministroDeMedicacion_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_SuministroDeMedicacion_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_SUMINISTRODEMEDICACION) As Boolean

            Try
                _commandText = "_MED_SuministroDeMedicacion_UPDATE"

                Dim VsuministroDeMedicacion_id As New SqlParameter("@suministroDeMedicacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEMEDICACION_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim VfechaInicio As New SqlParameter("@fechaInicio", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAINICIO = Date.MinValue, Nothing, Item.FECHAINICIO))
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim Vpresentacion_id As New SqlParameter("@presentacion_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRESENTACION_ID)
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Vpotencia As New SqlParameter("@potencia", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POTENCIA)
                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)
                Dim VviaTieneOtro As New SqlParameter("@viaTieneOtro", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIATIENEOTRO)
                Dim VviaOtro As New SqlParameter("@viaOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIAOTRO)
                Dim Vdiluyente_id As New SqlParameter("@diluyente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DILUYENTE_ID)
                Dim Vml As New SqlParameter("@ml", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML)
                Dim Vdurante_id As New SqlParameter("@durante_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DURANTE_ID)
                Dim Vperiodo_id As New SqlParameter("@periodo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PERIODO_ID)
                Dim VlapsoDeTiempo As New SqlParameter("@lapsoDeTiempo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LAPSODETIEMPO)
                Dim VlapsoDeTiempoHasta As New SqlParameter("@lapsoDeTiempoHasta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LAPSODETIEMPOHASTA = Date.MinValue, Nothing, Item.LAPSODETIEMPOHASTA))
                Dim VhorarioDeSuministro_id As New SqlParameter("@horarioDeSuministro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIODESUMINISTRO_ID)
                Dim VhorarioEvento As New SqlParameter("@horarioEvento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOEVENTO)
                Dim Vevento As New SqlParameter("@evento", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVENTO)
                Dim VhorarioOtro As New SqlParameter("@horarioOtro", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HORARIOOTRO)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim VL As New SqlParameter("@L", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.L)
                Dim VM As New SqlParameter("@M", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.M)
                Dim VX As New SqlParameter("@X", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.X)
                Dim VJ As New SqlParameter("@J", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.J)
                Dim VV As New SqlParameter("@V", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.V)
                Dim VS As New SqlParameter("@S", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.S)
                Dim VD As New SqlParameter("@D", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.D)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VsuministroDeMedicacion_id, Vpaciente_id, Vmedicamento_id, VfechaInicio, Vdosis, Vpresentacion_id, VunidadDeMedida_id, Vpotencia, Vvia_id, VviaTieneOtro, VviaOtro, Vdiluyente_id, Vml, Vdurante_id, Vperiodo_id, VlapsoDeTiempo, VlapsoDeTiempoHasta, VhorarioDeSuministro_id, VhorarioEvento, Vevento, VhorarioOtro, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, VL, VM, VX, VJ, VV, VS, VD, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_SUMINISTRODEMEDICACION)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_SUMINISTRODEMEDICACION
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_SUMINISTRODEMEDICACION
        ''' Fecha de Creación  : miércoles, 25 de enero de 2017
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_SUMINISTRODEMEDICACION. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEMEDICACION_ID As String = "SUMINISTRODEMEDICACION_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const FECHAINICIO As String = "FECHAINICIO"
            Public Const DOSIS As String = "DOSIS"
            Public Const PRESENTACION_ID As String = "PRESENTACION_ID"
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const POTENCIA As String = "POTENCIA"
            Public Const VIA_ID As String = "VIA_ID"
            Public Const VIATIENEOTRO As String = "VIATIENEOTRO"
            Public Const VIAOTRO As String = "VIAOTRO"
            Public Const DILUYENTE_ID As String = "DILUYENTE_ID"
            Public Const ML As String = "ML"
            Public Const DURANTE_ID As String = "DURANTE_ID"
            Public Const PERIODO_ID As String = "PERIODO_ID"
            Public Const LAPSODETIEMPO As String = "LAPSODETIEMPO"
            Public Const LAPSODETIEMPOHASTA As String = "LAPSODETIEMPOHASTA"
            Public Const HORARIODESUMINISTRO_ID As String = "HORARIODESUMINISTRO_ID"
            Public Const HORARIOEVENTO As String = "HORARIOEVENTO"
            Public Const EVENTO As String = "EVENTO"
            Public Const HORARIOOTRO As String = "HORARIOOTRO"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const L As String = "L"
            Public Const M As String = "M"
            Public Const X As String = "X"
            Public Const J As String = "J"
            Public Const V As String = "V"
            Public Const S As String = "S"
            Public Const D As String = "D"
        End Class ' ColumnNames
    End Class ' MED_SUMINISTRODEMEDICACION
    Public Class MED_UNIDADDEMEDIDA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            unidadDeMedida_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_UNIDADDEMEDIDA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_UNIDADDEMEDIDA) As Entities.Tables.MED_UNIDADDEMEDIDA
            Dim result As Boolean

            Try
                _commandText = "_MED_UNIDADDEMEDIDA_ADD"
                Dim vPKunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKunidadDeMedida_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.UNIDADDEMEDIDA_ID = vPKunidadDeMedida_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_UNIDADDEMEDIDA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_UnidadDeMedida_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_UNIDADDEMEDIDA
                    NewItem.UNIDADDEMEDIDA_ID = IIf(Convert.IsDBNull(dr("unidadDeMedida_id")), Nothing, dr("unidadDeMedida_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_UNIDADDEMEDIDA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_UNIDADDEMEDIDA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_UNIDADDEMEDIDA) As Boolean

            Try
                _commandText = "_MED_UnidadDeMedida_REMOVE"
                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VunidadDeMedida_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_UnidadDeMedida_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_UNIDADDEMEDIDA) As Boolean

            Try
                _commandText = "_MED_UnidadDeMedida_UPDATE"

                Dim VunidadDeMedida_id As New SqlParameter("@unidadDeMedida_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.UNIDADDEMEDIDA_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VunidadDeMedida_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_UNIDADDEMEDIDA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_UNIDADDEMEDIDA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_UNIDADDEMEDIDA
        ''' Fecha de Creación  : jueves, 11 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_UNIDADDEMEDIDA. </remarks>
        Public Class ColumnNames
            Public Const UNIDADDEMEDIDA_ID As String = "UNIDADDEMEDIDA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' MED_UNIDADDEMEDIDA
    Public Class MED_VIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            via_id
            descripcion
            inactivo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_VIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_VIA) As Entities.Tables.MED_VIA
            Dim result As Boolean

            Try
                _commandText = "_MED_VIA_ADD"
                Dim vPKvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKvia_id, Vdescripcion, Vinactivo, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.VIA_ID = vPKvia_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_VIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Via_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_VIA
                    NewItem.VIA_ID = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_VIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_VIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_VIA) As Boolean

            Try
                _commandText = "_MED_Via_REMOVE"
                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vvia_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Via_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_VIA) As Boolean

            Try
                _commandText = "_MED_Via_UPDATE"

                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vvia_id, Vdescripcion, Vinactivo, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_VIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_VIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_VIA
        ''' Fecha de Creación  : viernes, 23 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_VIA. </remarks>
        Public Class ColumnNames
            Public Const VIA_ID As String = "VIA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const INACTIVO As String = "INACTIVO"
        End Class ' ColumnNames
    End Class ' MED_VIA
    Public Class MED_MEDICAMENTO_VIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            medicamentoVia_id
            medicamento_id
            via_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_MEDICAMENTO_VIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_MEDICAMENTO_VIA) As Entities.Tables.MED_MEDICAMENTO_VIA
            Dim result As Boolean

            Try
                _commandText = "_MED_MEDICAMENTO_VIA_ADD"
                Dim vPKmedicamentoVia_id As New SqlParameter("@medicamentoVia_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim vPKmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim vPKvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKmedicamentoVia_id, vPKmedicamento_id, vPKvia_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.MEDICAMENTOVIA_ID = vPKmedicamentoVia_id.Value
                    Item.MEDICAMENTO_ID = vPKmedicamento_id.Value
                    Item.VIA_ID = vPKvia_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_MEDICAMENTO_VIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Medicamento_Via_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_MEDICAMENTO_VIA
                    NewItem.MEDICAMENTOVIA_ID = IIf(Convert.IsDBNull(dr("medicamentoVia_id")), Nothing, dr("medicamentoVia_id"))
                    NewItem.MEDICAMENTO_ID = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.VIA_ID = IIf(Convert.IsDBNull(dr("via_id")), Nothing, dr("via_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_MEDICAMENTO_VIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_MEDICAMENTO_VIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_MEDICAMENTO_VIA) As Boolean

            Try
                _commandText = "_MED_Medicamento_Via_REMOVE"
                Dim VmedicamentoVia_id As New SqlParameter("@medicamentoVia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTOVIA_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VmedicamentoVia_id, Vmedicamento_id, Vvia_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Medicamento_Via_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_MEDICAMENTO_VIA) As Boolean

            Try
                _commandText = "_MED_Medicamento_Via_UPDATE"

                Dim VmedicamentoVia_id As New SqlParameter("@medicamentoVia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTOVIA_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim Vvia_id As New SqlParameter("@via_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VmedicamentoVia_id, Vmedicamento_id, Vvia_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_MEDICAMENTO_VIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_MEDICAMENTO_VIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_MEDICAMENTO_VIA
        ''' Fecha de Creación  : miércoles, 28 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_MEDICAMENTO_VIA. </remarks>
        Public Class ColumnNames
            Public Const MEDICAMENTOVIA_ID As String = "MEDICAMENTOVIA_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const VIA_ID As String = "VIA_ID"
        End Class ' ColumnNames
    End Class ' MED_MEDICAMENTO_VIA
    Public Class PRO_ENFERMERIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            enfermeria_id
            paciente_id
            procedimiento_id
            controlVital
            frecuenciaCardiaca
            frecuenciaRespiratoria
            temperaturaAxilar
            diuresis
            glucemiaCapilar
            multistickOrina
            controlSaturacion
            medicionResiduosGastrico
            ecg
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_ENFERMERIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_ENFERMERIA) As Entities.Tables.PRO_ENFERMERIA
            Dim result As Boolean

            Try
                _commandText = "_PRO_ENFERMERIA_ADD"
                Dim vPKenfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontrolVital As New SqlParameter("@controlVital", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLVITAL)
                Dim VfrecuenciaCardiaca As New SqlParameter("@frecuenciaCardiaca", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIACARDIACA)
                Dim VfrecuenciaRespiratoria As New SqlParameter("@frecuenciaRespiratoria", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIARESPIRATORIA)
                Dim VtemperaturaAxilar As New SqlParameter("@temperaturaAxilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEMPERATURAAXILAR)
                Dim Vdiuresis As New SqlParameter("@diuresis", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIURESIS)
                Dim VglucemiaCapilar As New SqlParameter("@glucemiaCapilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GLUCEMIACAPILAR)
                Dim VmultistickOrina As New SqlParameter("@multistickOrina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MULTISTICKORINA)
                Dim VcontrolSaturacion As New SqlParameter("@controlSaturacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLSATURACION)
                Dim VmedicionResiduosGastrico As New SqlParameter("@medicionResiduosGastrico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICIONRESIDUOSGASTRICO)
                Dim Vecg As New SqlParameter("@ecg", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ECG)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKenfermeria_id, Vpaciente_id, Vprocedimiento_id, VcontrolVital, VfrecuenciaCardiaca, VfrecuenciaRespiratoria, VtemperaturaAxilar, Vdiuresis, VglucemiaCapilar, VmultistickOrina, VcontrolSaturacion, VmedicionResiduosGastrico, Vecg, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ENFERMERIA_ID = vPKenfermeria_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_ENFERMERIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Enfermeria_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_ENFERMERIA
                    NewItem.ENFERMERIA_ID = IIf(Convert.IsDBNull(dr("enfermeria_id")), Nothing, dr("enfermeria_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.CONTROLVITAL = IIf(Convert.IsDBNull(dr("controlVital")), Nothing, dr("controlVital"))
                    NewItem.FRECUENCIACARDIACA = IIf(Convert.IsDBNull(dr("frecuenciaCardiaca")), Nothing, dr("frecuenciaCardiaca"))
                    NewItem.FRECUENCIARESPIRATORIA = IIf(Convert.IsDBNull(dr("frecuenciaRespiratoria")), Nothing, dr("frecuenciaRespiratoria"))
                    NewItem.TEMPERATURAAXILAR = IIf(Convert.IsDBNull(dr("temperaturaAxilar")), Nothing, dr("temperaturaAxilar"))
                    NewItem.DIURESIS = IIf(Convert.IsDBNull(dr("diuresis")), Nothing, dr("diuresis"))
                    NewItem.GLUCEMIACAPILAR = IIf(Convert.IsDBNull(dr("glucemiaCapilar")), Nothing, dr("glucemiaCapilar"))
                    NewItem.MULTISTICKORINA = IIf(Convert.IsDBNull(dr("multistickOrina")), Nothing, dr("multistickOrina"))
                    NewItem.CONTROLSATURACION = IIf(Convert.IsDBNull(dr("controlSaturacion")), Nothing, dr("controlSaturacion"))
                    NewItem.MEDICIONRESIDUOSGASTRICO = IIf(Convert.IsDBNull(dr("medicionResiduosGastrico")), Nothing, dr("medicionResiduosGastrico"))
                    NewItem.ECG = IIf(Convert.IsDBNull(dr("ecg")), Nothing, dr("ecg"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_ENFERMERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_ENFERMERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_ENFERMERIA) As Boolean

            Try
                _commandText = "_PRO_Enfermeria_REMOVE"
                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Venfermeria_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Enfermeria_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_ENFERMERIA) As Boolean

            Try
                _commandText = "_PRO_Enfermeria_UPDATE"

                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontrolVital As New SqlParameter("@controlVital", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLVITAL)
                Dim VfrecuenciaCardiaca As New SqlParameter("@frecuenciaCardiaca", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIACARDIACA)
                Dim VfrecuenciaRespiratoria As New SqlParameter("@frecuenciaRespiratoria", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIARESPIRATORIA)
                Dim VtemperaturaAxilar As New SqlParameter("@temperaturaAxilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEMPERATURAAXILAR)
                Dim Vdiuresis As New SqlParameter("@diuresis", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIURESIS)
                Dim VglucemiaCapilar As New SqlParameter("@glucemiaCapilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GLUCEMIACAPILAR)
                Dim VmultistickOrina As New SqlParameter("@multistickOrina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MULTISTICKORINA)
                Dim VcontrolSaturacion As New SqlParameter("@controlSaturacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLSATURACION)
                Dim VmedicionResiduosGastrico As New SqlParameter("@medicionResiduosGastrico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICIONRESIDUOSGASTRICO)
                Dim Vecg As New SqlParameter("@ecg", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ECG)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Venfermeria_id, Vpaciente_id, Vprocedimiento_id, VcontrolVital, VfrecuenciaCardiaca, VfrecuenciaRespiratoria, VtemperaturaAxilar, Vdiuresis, VglucemiaCapilar, VmultistickOrina, VcontrolSaturacion, VmedicionResiduosGastrico, Vecg, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_ENFERMERIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_ENFERMERIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_ENFERMERIA
        ''' Fecha de Creación  : lunes, 8 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_ENFERMERIA. </remarks>
        Public Class ColumnNames
            Public Const ENFERMERIA_ID As String = "ENFERMERIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CONTROLVITAL As String = "CONTROLVITAL"
            Public Const FRECUENCIACARDIACA As String = "FRECUENCIACARDIACA"
            Public Const FRECUENCIARESPIRATORIA As String = "FRECUENCIARESPIRATORIA"
            Public Const TEMPERATURAAXILAR As String = "TEMPERATURAAXILAR"
            Public Const DIURESIS As String = "DIURESIS"
            Public Const GLUCEMIACAPILAR As String = "GLUCEMIACAPILAR"
            Public Const MULTISTICKORINA As String = "MULTISTICKORINA"
            Public Const CONTROLSATURACION As String = "CONTROLSATURACION"
            Public Const MEDICIONRESIDUOSGASTRICO As String = "MEDICIONRESIDUOSGASTRICO"
            Public Const ECG As String = "ECG"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_ENFERMERIA
    Public Class PRO_GENERICO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            generico_id
            paciente_id
            procedimiento_id
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_GENERICO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_GENERICO) As Entities.Tables.PRO_GENERICO
            Dim result As Boolean

            Try
                _commandText = "_PRO_GENERICO_ADD"
                Dim vPKgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKgenerico_id, Vpaciente_id, Vprocedimiento_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.GENERICO_ID = vPKgenerico_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_GENERICO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Generico_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_GENERICO
                    NewItem.GENERICO_ID = IIf(Convert.IsDBNull(dr("generico_id")), Nothing, dr("generico_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_GENERICO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_GENERICO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_GENERICO) As Boolean

            Try
                _commandText = "_PRO_Generico_REMOVE"
                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vgenerico_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Generico_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_GENERICO) As Boolean

            Try
                _commandText = "_PRO_Generico_UPDATE"

                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vgenerico_id, Vpaciente_id, Vprocedimiento_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_GENERICO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_GENERICO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GENERICO
        ''' Fecha de Creación  : lunes, 8 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GENERICO. </remarks>
        Public Class ColumnNames
            Public Const GENERICO_ID As String = "GENERICO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_GENERICO
    Public Class PRO_HISTORIAL_ENFERMERIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            enfermeria_id
            paciente_id
            procedimiento_id
            controlVital
            frecuenciaCardiaca
            frecuenciaRespiratoria
            temperaturaAxilar
            diuresis
            glucemiaCapilar
            multistickOrina
            controlSaturacion
            medicionResiduosGastrico
            ecg
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_ENFERMERIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_ENFERMERIA) As Entities.Tables.PRO_HISTORIAL_ENFERMERIA
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_ENFERMERIA_ADD"
                Dim vPKenfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontrolVital As New SqlParameter("@controlVital", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLVITAL)
                Dim VfrecuenciaCardiaca As New SqlParameter("@frecuenciaCardiaca", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIACARDIACA)
                Dim VfrecuenciaRespiratoria As New SqlParameter("@frecuenciaRespiratoria", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIARESPIRATORIA)
                Dim VtemperaturaAxilar As New SqlParameter("@temperaturaAxilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEMPERATURAAXILAR)
                Dim Vdiuresis As New SqlParameter("@diuresis", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIURESIS)
                Dim VglucemiaCapilar As New SqlParameter("@glucemiaCapilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GLUCEMIACAPILAR)
                Dim VmultistickOrina As New SqlParameter("@multistickOrina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MULTISTICKORINA)
                Dim VcontrolSaturacion As New SqlParameter("@controlSaturacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLSATURACION)
                Dim VmedicionResiduosGastrico As New SqlParameter("@medicionResiduosGastrico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICIONRESIDUOSGASTRICO)
                Dim Vecg As New SqlParameter("@ecg", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ECG)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKenfermeria_id, Vpaciente_id, Vprocedimiento_id, VcontrolVital, VfrecuenciaCardiaca, VfrecuenciaRespiratoria, VtemperaturaAxilar, Vdiuresis, VglucemiaCapilar, VmultistickOrina, VcontrolSaturacion, VmedicionResiduosGastrico, Vecg, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ENFERMERIA_ID = vPKenfermeria_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_ENFERMERIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Enfermeria_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_ENFERMERIA
                    NewItem.ENFERMERIA_ID = IIf(Convert.IsDBNull(dr("enfermeria_id")), Nothing, dr("enfermeria_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.CONTROLVITAL = IIf(Convert.IsDBNull(dr("controlVital")), Nothing, dr("controlVital"))
                    NewItem.FRECUENCIACARDIACA = IIf(Convert.IsDBNull(dr("frecuenciaCardiaca")), Nothing, dr("frecuenciaCardiaca"))
                    NewItem.FRECUENCIARESPIRATORIA = IIf(Convert.IsDBNull(dr("frecuenciaRespiratoria")), Nothing, dr("frecuenciaRespiratoria"))
                    NewItem.TEMPERATURAAXILAR = IIf(Convert.IsDBNull(dr("temperaturaAxilar")), Nothing, dr("temperaturaAxilar"))
                    NewItem.DIURESIS = IIf(Convert.IsDBNull(dr("diuresis")), Nothing, dr("diuresis"))
                    NewItem.GLUCEMIACAPILAR = IIf(Convert.IsDBNull(dr("glucemiaCapilar")), Nothing, dr("glucemiaCapilar"))
                    NewItem.MULTISTICKORINA = IIf(Convert.IsDBNull(dr("multistickOrina")), Nothing, dr("multistickOrina"))
                    NewItem.CONTROLSATURACION = IIf(Convert.IsDBNull(dr("controlSaturacion")), Nothing, dr("controlSaturacion"))
                    NewItem.MEDICIONRESIDUOSGASTRICO = IIf(Convert.IsDBNull(dr("medicionResiduosGastrico")), Nothing, dr("medicionResiduosGastrico"))
                    NewItem.ECG = IIf(Convert.IsDBNull(dr("ecg")), Nothing, dr("ecg"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_ENFERMERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_ENFERMERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_ENFERMERIA) As Boolean

            Try
                _commandText = "_PRO_Historial_Enfermeria_REMOVE"
                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Venfermeria_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Enfermeria_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_ENFERMERIA) As Boolean

            Try
                _commandText = "_PRO_Historial_Enfermeria_UPDATE"

                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontrolVital As New SqlParameter("@controlVital", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLVITAL)
                Dim VfrecuenciaCardiaca As New SqlParameter("@frecuenciaCardiaca", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIACARDIACA)
                Dim VfrecuenciaRespiratoria As New SqlParameter("@frecuenciaRespiratoria", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRECUENCIARESPIRATORIA)
                Dim VtemperaturaAxilar As New SqlParameter("@temperaturaAxilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEMPERATURAAXILAR)
                Dim Vdiuresis As New SqlParameter("@diuresis", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIURESIS)
                Dim VglucemiaCapilar As New SqlParameter("@glucemiaCapilar", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GLUCEMIACAPILAR)
                Dim VmultistickOrina As New SqlParameter("@multistickOrina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MULTISTICKORINA)
                Dim VcontrolSaturacion As New SqlParameter("@controlSaturacion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTROLSATURACION)
                Dim VmedicionResiduosGastrico As New SqlParameter("@medicionResiduosGastrico", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICIONRESIDUOSGASTRICO)
                Dim Vecg As New SqlParameter("@ecg", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ECG)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Venfermeria_id, Vpaciente_id, Vprocedimiento_id, VcontrolVital, VfrecuenciaCardiaca, VfrecuenciaRespiratoria, VtemperaturaAxilar, Vdiuresis, VglucemiaCapilar, VmultistickOrina, VcontrolSaturacion, VmedicionResiduosGastrico, Vecg, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_ENFERMERIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_ENFERMERIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_ENFERMERIA
        ''' Fecha de Creación  : lunes, 8 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_ENFERMERIA. </remarks>
        Public Class ColumnNames
            Public Const ENFERMERIA_ID As String = "ENFERMERIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CONTROLVITAL As String = "CONTROLVITAL"
            Public Const FRECUENCIACARDIACA As String = "FRECUENCIACARDIACA"
            Public Const FRECUENCIARESPIRATORIA As String = "FRECUENCIARESPIRATORIA"
            Public Const TEMPERATURAAXILAR As String = "TEMPERATURAAXILAR"
            Public Const DIURESIS As String = "DIURESIS"
            Public Const GLUCEMIACAPILAR As String = "GLUCEMIACAPILAR"
            Public Const MULTISTICKORINA As String = "MULTISTICKORINA"
            Public Const CONTROLSATURACION As String = "CONTROLSATURACION"
            Public Const MEDICIONRESIDUOSGASTRICO As String = "MEDICIONRESIDUOSGASTRICO"
            Public Const ECG As String = "ECG"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_ENFERMERIA
    Public Class PRO_HISTORIAL_GENERICO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            generico_id
            paciente_id
            procedimiento_id
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_GENERICO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_GENERICO) As Entities.Tables.PRO_HISTORIAL_GENERICO
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_GENERICO_ADD"
                Dim vPKgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKgenerico_id, Vpaciente_id, Vprocedimiento_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.GENERICO_ID = vPKgenerico_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_GENERICO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Generico_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_GENERICO
                    NewItem.GENERICO_ID = IIf(Convert.IsDBNull(dr("generico_id")), Nothing, dr("generico_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_GENERICO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_GENERICO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_GENERICO) As Boolean

            Try
                _commandText = "_PRO_Historial_Generico_REMOVE"
                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vgenerico_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Generico_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_GENERICO) As Boolean

            Try
                _commandText = "_PRO_Historial_Generico_UPDATE"

                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vgenerico_id, Vpaciente_id, Vprocedimiento_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_GENERICO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_GENERICO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_GENERICO
        ''' Fecha de Creación  : lunes, 8 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_GENERICO. </remarks>
        Public Class ColumnNames
            Public Const GENERICO_ID As String = "GENERICO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_GENERICO
    Public Class PRO_HISTORIAL_POSOLOGIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            posologia_id
            paciente_id
            procedimiento_id
            PlanOral
            hiposodica
            SinLiquidos
            LiquidosFinos
            LiquidosEspesos
            LiquidosAligerados
            SupControl
            Asistencia
            Picado
            Cortado
            hipograsa
            alimento_id
            alimentoVelocidad
            gavageIntervalo_id
            gavageCantidad
            preparado_id
            preparadoVelocidad
            ayunoFecha
            ayunoHora
            liquidoFecha
            liquidoHora
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_POSOLOGIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_POSOLOGIA) As Entities.Tables.PRO_HISTORIAL_POSOLOGIA
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_POSOLOGIA_ADD"
                Dim vPKposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VPlanOral As New SqlParameter("@PlanOral", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PLANORAL)
                Dim Vhiposodica As New SqlParameter("@hiposodica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOSODICA)
                Dim VSinLiquidos As New SqlParameter("@SinLiquidos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SINLIQUIDOS)
                Dim VLiquidosFinos As New SqlParameter("@LiquidosFinos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LIQUIDOSFINOS)
                Dim VLiquidosEspesos As New SqlParameter("@LiquidosEspesos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LIQUIDOSESPESOS)
                Dim VLiquidosAligerados As New SqlParameter("@LiquidosAligerados", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LIQUIDOSALIGERADOS)
                Dim VSupControl As New SqlParameter("@SupControl", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUPCONTROL)
                Dim VAsistencia As New SqlParameter("@Asistencia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ASISTENCIA)
                Dim VPicado As New SqlParameter("@Picado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PICADO)
                Dim VCortado As New SqlParameter("@Cortado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CORTADO)
                Dim Vhipograsa As New SqlParameter("@hipograsa", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOGRASA)
                Dim Valimento_id As New SqlParameter("@alimento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTO_ID)
                Dim ValimentoVelocidad As New SqlParameter("@alimentoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTOVELOCIDAD)
                Dim VgavageIntervalo_id As New SqlParameter("@gavageIntervalo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGEINTERVALO_ID)
                Dim VgavageCantidad As New SqlParameter("@gavageCantidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGECANTIDAD)
                Dim Vpreparado_id As New SqlParameter("@preparado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADO_ID)
                Dim VpreparadoVelocidad As New SqlParameter("@preparadoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADOVELOCIDAD)
                Dim VayunoFecha As New SqlParameter("@ayunoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOFECHA = Date.MinValue, Nothing, Item.AYUNOFECHA))
                Dim VayunoHora As New SqlParameter("@ayunoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOHORA = Date.MinValue, Nothing, Item.AYUNOHORA))
                Dim VliquidoFecha As New SqlParameter("@liquidoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOFECHA = Date.MinValue, Nothing, Item.LIQUIDOFECHA))
                Dim VliquidoHora As New SqlParameter("@liquidoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOHORA = Date.MinValue, Nothing, Item.LIQUIDOHORA))
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKposologia_id, Vpaciente_id, Vprocedimiento_id, VPlanOral, Vhiposodica, VSinLiquidos, VLiquidosFinos, VLiquidosEspesos, VLiquidosAligerados, VSupControl, VAsistencia, VPicado, VCortado, Vhipograsa, Valimento_id, ValimentoVelocidad, VgavageIntervalo_id, VgavageCantidad, Vpreparado_id, VpreparadoVelocidad, VayunoFecha, VayunoHora, VliquidoFecha, VliquidoHora, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.POSOLOGIA_ID = vPKposologia_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_POSOLOGIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Posologia_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_POSOLOGIA
                    NewItem.POSOLOGIA_ID = IIf(Convert.IsDBNull(dr("posologia_id")), Nothing, dr("posologia_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.PLANORAL = IIf(Convert.IsDBNull(dr("PlanOral")), Nothing, dr("PlanOral"))
                    NewItem.HIPOSODICA = IIf(Convert.IsDBNull(dr("hiposodica")), Nothing, dr("hiposodica"))
                    NewItem.SINLIQUIDOS = IIf(Convert.IsDBNull(dr("SinLiquidos")), Nothing, dr("SinLiquidos"))
                    NewItem.LIQUIDOSFINOS = IIf(Convert.IsDBNull(dr("LiquidosFinos")), Nothing, dr("LiquidosFinos"))
                    NewItem.LIQUIDOSESPESOS = IIf(Convert.IsDBNull(dr("LiquidosEspesos")), Nothing, dr("LiquidosEspesos"))
                    NewItem.LIQUIDOSALIGERADOS = IIf(Convert.IsDBNull(dr("LiquidosAligerados")), Nothing, dr("LiquidosAligerados"))
                    NewItem.SUPCONTROL = IIf(Convert.IsDBNull(dr("SupControl")), Nothing, dr("SupControl"))
                    NewItem.ASISTENCIA = IIf(Convert.IsDBNull(dr("Asistencia")), Nothing, dr("Asistencia"))
                    NewItem.PICADO = IIf(Convert.IsDBNull(dr("Picado")), Nothing, dr("Picado"))
                    NewItem.CORTADO = IIf(Convert.IsDBNull(dr("Cortado")), Nothing, dr("Cortado"))
                    NewItem.HIPOGRASA = IIf(Convert.IsDBNull(dr("hipograsa")), Nothing, dr("hipograsa"))
                    NewItem.ALIMENTO_ID = IIf(Convert.IsDBNull(dr("alimento_id")), Nothing, dr("alimento_id"))
                    NewItem.ALIMENTOVELOCIDAD = IIf(Convert.IsDBNull(dr("alimentoVelocidad")), Nothing, dr("alimentoVelocidad"))
                    NewItem.GAVAGEINTERVALO_ID = IIf(Convert.IsDBNull(dr("gavageIntervalo_id")), Nothing, dr("gavageIntervalo_id"))
                    NewItem.GAVAGECANTIDAD = IIf(Convert.IsDBNull(dr("gavageCantidad")), Nothing, dr("gavageCantidad"))
                    NewItem.PREPARADO_ID = IIf(Convert.IsDBNull(dr("preparado_id")), Nothing, dr("preparado_id"))
                    NewItem.PREPARADOVELOCIDAD = IIf(Convert.IsDBNull(dr("preparadoVelocidad")), Nothing, dr("preparadoVelocidad"))
                    NewItem.AYUNOFECHA = IIf(Convert.IsDBNull(dr("ayunoFecha")), Nothing, dr("ayunoFecha"))
                    NewItem.AYUNOHORA = IIf(Convert.IsDBNull(dr("ayunoHora")), Nothing, dr("ayunoHora"))
                    NewItem.LIQUIDOFECHA = IIf(Convert.IsDBNull(dr("liquidoFecha")), Nothing, dr("liquidoFecha"))
                    NewItem.LIQUIDOHORA = IIf(Convert.IsDBNull(dr("liquidoHora")), Nothing, dr("liquidoHora"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_POSOLOGIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_POSOLOGIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_POSOLOGIA) As Boolean

            Try
                _commandText = "_PRO_Historial_Posologia_REMOVE"
                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vposologia_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Posologia_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_POSOLOGIA) As Boolean

            Try
                _commandText = "_PRO_Historial_Posologia_UPDATE"

                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VPlanOral As New SqlParameter("@PlanOral", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PLANORAL)
                Dim Vhiposodica As New SqlParameter("@hiposodica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOSODICA)
                Dim VSinLiquidos As New SqlParameter("@SinLiquidos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SINLIQUIDOS)
                Dim VLiquidosFinos As New SqlParameter("@LiquidosFinos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LIQUIDOSFINOS)
                Dim VLiquidosEspesos As New SqlParameter("@LiquidosEspesos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LIQUIDOSESPESOS)
                Dim VLiquidosAligerados As New SqlParameter("@LiquidosAligerados", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LIQUIDOSALIGERADOS)
                Dim VSupControl As New SqlParameter("@SupControl", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUPCONTROL)
                Dim VAsistencia As New SqlParameter("@Asistencia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ASISTENCIA)
                Dim VPicado As New SqlParameter("@Picado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PICADO)
                Dim VCortado As New SqlParameter("@Cortado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CORTADO)
                Dim Vhipograsa As New SqlParameter("@hipograsa", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOGRASA)
                Dim Valimento_id As New SqlParameter("@alimento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTO_ID)
                Dim ValimentoVelocidad As New SqlParameter("@alimentoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTOVELOCIDAD)
                Dim VgavageIntervalo_id As New SqlParameter("@gavageIntervalo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGEINTERVALO_ID)
                Dim VgavageCantidad As New SqlParameter("@gavageCantidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGECANTIDAD)
                Dim Vpreparado_id As New SqlParameter("@preparado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADO_ID)
                Dim VpreparadoVelocidad As New SqlParameter("@preparadoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADOVELOCIDAD)
                Dim VayunoFecha As New SqlParameter("@ayunoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOFECHA = Date.MinValue, Nothing, Item.AYUNOFECHA))
                Dim VayunoHora As New SqlParameter("@ayunoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOHORA = Date.MinValue, Nothing, Item.AYUNOHORA))
                Dim VliquidoFecha As New SqlParameter("@liquidoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOFECHA = Date.MinValue, Nothing, Item.LIQUIDOFECHA))
                Dim VliquidoHora As New SqlParameter("@liquidoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOHORA = Date.MinValue, Nothing, Item.LIQUIDOHORA))
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vposologia_id, Vpaciente_id, Vprocedimiento_id, VPlanOral, Vhiposodica, VSinLiquidos, VLiquidosFinos, VLiquidosEspesos, VLiquidosAligerados, VSupControl, VAsistencia, VPicado, VCortado, Vhipograsa, Valimento_id, ValimentoVelocidad, VgavageIntervalo_id, VgavageCantidad, Vpreparado_id, VpreparadoVelocidad, VayunoFecha, VayunoHora, VliquidoFecha, VliquidoHora, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_POSOLOGIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_POSOLOGIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_POSOLOGIA
        ''' Fecha de Creación  : miércoles, 30 de noviembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_POSOLOGIA. </remarks>
        Public Class ColumnNames
            Public Const POSOLOGIA_ID As String = "POSOLOGIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const PLANORAL As String = "PLANORAL"
            Public Const HIPOSODICA As String = "HIPOSODICA"
            Public Const SINLIQUIDOS As String = "SINLIQUIDOS"
            Public Const LIQUIDOSFINOS As String = "LIQUIDOSFINOS"
            Public Const LIQUIDOSESPESOS As String = "LIQUIDOSESPESOS"
            Public Const LIQUIDOSALIGERADOS As String = "LIQUIDOSALIGERADOS"
            Public Const SUPCONTROL As String = "SUPCONTROL"
            Public Const ASISTENCIA As String = "ASISTENCIA"
            Public Const PICADO As String = "PICADO"
            Public Const CORTADO As String = "CORTADO"
            Public Const HIPOGRASA As String = "HIPOGRASA"
            Public Const ALIMENTO_ID As String = "ALIMENTO_ID"
            Public Const ALIMENTOVELOCIDAD As String = "ALIMENTOVELOCIDAD"
            Public Const GAVAGEINTERVALO_ID As String = "GAVAGEINTERVALO_ID"
            Public Const GAVAGECANTIDAD As String = "GAVAGECANTIDAD"
            Public Const PREPARADO_ID As String = "PREPARADO_ID"
            Public Const PREPARADOVELOCIDAD As String = "PREPARADOVELOCIDAD"
            Public Const AYUNOFECHA As String = "AYUNOFECHA"
            Public Const AYUNOHORA As String = "AYUNOHORA"
            Public Const LIQUIDOFECHA As String = "LIQUIDOFECHA"
            Public Const LIQUIDOHORA As String = "LIQUIDOHORA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_POSOLOGIA
    Public Class PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            suministroDeProcedimiento_id
            paciente_id
            procedimiento_id
            tipoProcedimiento_id
            usuario_id
            fechaAltaSistema
            fechaModificiacion
            fechaBaja
            motivoBaja
            enfermeria_id
            posologia_id
            generico_id
            colocacionViaPeriferica_id
            cuidadoOral_id
            cuidadoPostural_id
            php_id
            proteccionFisica_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO) As Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO_ADD"
                Dim vPKsuministroDeProcedimiento_id As New SqlParameter("@suministroDeProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VtipoProcedimiento_id As New SqlParameter("@tipoProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMIENTO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificiacion As New SqlParameter("@fechaModificiacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICIACION = Date.MinValue, Nothing, Item.FECHAMODIFICIACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)
                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)
                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)
                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)
                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)
                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)
                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)
                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsuministroDeProcedimiento_id, Vpaciente_id, Vprocedimiento_id, VtipoProcedimiento_id, Vusuario_id, VfechaAltaSistema, VfechaModificiacion, VfechaBaja, VmotivoBaja, Venfermeria_id, Vposologia_id, Vgenerico_id, VcolocacionViaPeriferica_id, VcuidadoOral_id, VcuidadoPostural_id, Vphp_id, VproteccionFisica_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SUMINISTRODEPROCEDIMIENTO_ID = vPKsuministroDeProcedimiento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_SuministroDeProcedimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO
                    NewItem.SUMINISTRODEPROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("suministroDeProcedimiento_id")), Nothing, dr("suministroDeProcedimiento_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.TIPOPROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("tipoProcedimiento_id")), Nothing, dr("tipoProcedimiento_id"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICIACION = IIf(Convert.IsDBNull(dr("fechaModificiacion")), Nothing, dr("fechaModificiacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    NewItem.ENFERMERIA_ID = IIf(Convert.IsDBNull(dr("enfermeria_id")), Nothing, dr("enfermeria_id"))
                    NewItem.POSOLOGIA_ID = IIf(Convert.IsDBNull(dr("posologia_id")), Nothing, dr("posologia_id"))
                    NewItem.GENERICO_ID = IIf(Convert.IsDBNull(dr("generico_id")), Nothing, dr("generico_id"))
                    NewItem.COLOCACIONVIAPERIFERICA_ID = IIf(Convert.IsDBNull(dr("colocacionViaPeriferica_id")), Nothing, dr("colocacionViaPeriferica_id"))
                    NewItem.CUIDADOORAL_ID = IIf(Convert.IsDBNull(dr("cuidadoOral_id")), Nothing, dr("cuidadoOral_id"))
                    NewItem.CUIDADOPOSTURAL_ID = IIf(Convert.IsDBNull(dr("cuidadoPostural_id")), Nothing, dr("cuidadoPostural_id"))
                    NewItem.PHP_ID = IIf(Convert.IsDBNull(dr("php_id")), Nothing, dr("php_id"))
                    NewItem.PROTECCIONFISICA_ID = IIf(Convert.IsDBNull(dr("proteccionFisica_id")), Nothing, dr("proteccionFisica_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_Historial_SuministroDeProcedimiento_REMOVE"
                Dim VsuministroDeProcedimiento_id As New SqlParameter("@suministroDeProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEPROCEDIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VsuministroDeProcedimiento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_SuministroDeProcedimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_Historial_SuministroDeProcedimiento_UPDATE"

                Dim VsuministroDeProcedimiento_id As New SqlParameter("@suministroDeProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEPROCEDIMIENTO_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VtipoProcedimiento_id As New SqlParameter("@tipoProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMIENTO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificiacion As New SqlParameter("@fechaModificiacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICIACION = Date.MinValue, Nothing, Item.FECHAMODIFICIACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)
                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)
                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)
                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)
                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)
                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)
                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)
                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VsuministroDeProcedimiento_id, Vpaciente_id, Vprocedimiento_id, VtipoProcedimiento_id, Vusuario_id, VfechaAltaSistema, VfechaModificiacion, VfechaBaja, VmotivoBaja, Venfermeria_id, Vposologia_id, Vgenerico_id, VcolocacionViaPeriferica_id, VcuidadoOral_id, VcuidadoPostural_id, Vphp_id, VproteccionFisica_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEPROCEDIMIENTO_ID As String = "SUMINISTRODEPROCEDIMIENTO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const TIPOPROCEDIMIENTO_ID As String = "TIPOPROCEDIMIENTO_ID"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICIACION As String = "FECHAMODIFICIACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
            Public Const ENFERMERIA_ID As String = "ENFERMERIA_ID"
            Public Const POSOLOGIA_ID As String = "POSOLOGIA_ID"
            Public Const GENERICO_ID As String = "GENERICO_ID"
            Public Const COLOCACIONVIAPERIFERICA_ID As String = "COLOCACIONVIAPERIFERICA_ID"
            Public Const CUIDADOORAL_ID As String = "CUIDADOORAL_ID"
            Public Const CUIDADOPOSTURAL_ID As String = "CUIDADOPOSTURAL_ID"
            Public Const PHP_ID As String = "PHP_ID"
            Public Const PROTECCIONFISICA_ID As String = "PROTECCIONFISICA_ID"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_SUMINISTRODEPROCEDIMIENTO
    Public Class PRO_SUMINISTRODEPROCEDIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            suministroDeProcedimiento_id
            paciente_id
            procedimiento_id
            tipoProcedimiento_id
            usuario_id
            fechaAltaSistema
            fechaModificiacion
            fechaBaja
            motivoBaja
            enfermeria_id
            posologia_id
            generico_id
            colocacionViaPeriferica_id
            cuidadoOral_id
            cuidadoPostural_id
            php_id
            proteccionFisica_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO) As Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_PRO_SUMINISTRODEPROCEDIMIENTO_ADD"
                Dim vPKsuministroDeProcedimiento_id As New SqlParameter("@suministroDeProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VtipoProcedimiento_id As New SqlParameter("@tipoProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMIENTO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificiacion As New SqlParameter("@fechaModificiacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICIACION = Date.MinValue, Nothing, Item.FECHAMODIFICIACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)
                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)
                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)
                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)
                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)
                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)
                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)
                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsuministroDeProcedimiento_id, Vpaciente_id, Vprocedimiento_id, VtipoProcedimiento_id, Vusuario_id, VfechaAltaSistema, VfechaModificiacion, VfechaBaja, VmotivoBaja, Venfermeria_id, Vposologia_id, Vgenerico_id, VcolocacionViaPeriferica_id, VcuidadoOral_id, VcuidadoPostural_id, Vphp_id, VproteccionFisica_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SUMINISTRODEPROCEDIMIENTO_ID = vPKsuministroDeProcedimiento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_SuministroDeProcedimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO
                    NewItem.SUMINISTRODEPROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("suministroDeProcedimiento_id")), Nothing, dr("suministroDeProcedimiento_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.TIPOPROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("tipoProcedimiento_id")), Nothing, dr("tipoProcedimiento_id"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICIACION = IIf(Convert.IsDBNull(dr("fechaModificiacion")), Nothing, dr("fechaModificiacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    NewItem.ENFERMERIA_ID = IIf(Convert.IsDBNull(dr("enfermeria_id")), Nothing, dr("enfermeria_id"))
                    NewItem.POSOLOGIA_ID = IIf(Convert.IsDBNull(dr("posologia_id")), Nothing, dr("posologia_id"))
                    NewItem.GENERICO_ID = IIf(Convert.IsDBNull(dr("generico_id")), Nothing, dr("generico_id"))
                    NewItem.COLOCACIONVIAPERIFERICA_ID = IIf(Convert.IsDBNull(dr("colocacionViaPeriferica_id")), Nothing, dr("colocacionViaPeriferica_id"))
                    NewItem.CUIDADOORAL_ID = IIf(Convert.IsDBNull(dr("cuidadoOral_id")), Nothing, dr("cuidadoOral_id"))
                    NewItem.CUIDADOPOSTURAL_ID = IIf(Convert.IsDBNull(dr("cuidadoPostural_id")), Nothing, dr("cuidadoPostural_id"))
                    NewItem.PHP_ID = IIf(Convert.IsDBNull(dr("php_id")), Nothing, dr("php_id"))
                    NewItem.PROTECCIONFISICA_ID = IIf(Convert.IsDBNull(dr("proteccionFisica_id")), Nothing, dr("proteccionFisica_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_SUMINISTRODEPROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_SUMINISTRODEPROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_SuministroDeProcedimiento_REMOVE"
                Dim VsuministroDeProcedimiento_id As New SqlParameter("@suministroDeProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEPROCEDIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VsuministroDeProcedimiento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_SuministroDeProcedimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_SuministroDeProcedimiento_UPDATE"

                Dim VsuministroDeProcedimiento_id As New SqlParameter("@suministroDeProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SUMINISTRODEPROCEDIMIENTO_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VtipoProcedimiento_id As New SqlParameter("@tipoProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMIENTO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificiacion As New SqlParameter("@fechaModificiacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICIACION = Date.MinValue, Nothing, Item.FECHAMODIFICIACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)
                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)
                Dim Vgenerico_id As New SqlParameter("@generico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GENERICO_ID)
                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)
                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)
                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)
                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)
                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VsuministroDeProcedimiento_id, Vpaciente_id, Vprocedimiento_id, VtipoProcedimiento_id, Vusuario_id, VfechaAltaSistema, VfechaModificiacion, VfechaBaja, VmotivoBaja, Venfermeria_id, Vposologia_id, Vgenerico_id, VcolocacionViaPeriferica_id, VcuidadoOral_id, VcuidadoPostural_id, Vphp_id, VproteccionFisica_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_SUMINISTRODEPROCEDIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_SUMINISTRODEPROCEDIMIENTO
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_SUMINISTRODEPROCEDIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const SUMINISTRODEPROCEDIMIENTO_ID As String = "SUMINISTRODEPROCEDIMIENTO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const TIPOPROCEDIMIENTO_ID As String = "TIPOPROCEDIMIENTO_ID"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICIACION As String = "FECHAMODIFICIACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
            Public Const ENFERMERIA_ID As String = "ENFERMERIA_ID"
            Public Const POSOLOGIA_ID As String = "POSOLOGIA_ID"
            Public Const GENERICO_ID As String = "GENERICO_ID"
            Public Const COLOCACIONVIAPERIFERICA_ID As String = "COLOCACIONVIAPERIFERICA_ID"
            Public Const CUIDADOORAL_ID As String = "CUIDADOORAL_ID"
            Public Const CUIDADOPOSTURAL_ID As String = "CUIDADOPOSTURAL_ID"
            Public Const PHP_ID As String = "PHP_ID"
            Public Const PROTECCIONFISICA_ID As String = "PROTECCIONFISICA_ID"
        End Class ' ColumnNames
    End Class ' PRO_SUMINISTRODEPROCEDIMIENTO
    Public Class PRO_POSOLOGIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            posologia_id
            paciente_id
            procedimiento_id
            PlanOral
            hiposodica
            SinLiquidos
            LiquidosFinos
            LiquidosEspesos
            LiquidosAligerados
            SupControl
            Asistencia
            Picado
            Cortado
            hipograsa
            alimento_id
            alimentoVelocidad
            gavageIntervalo_id
            gavageCantidad
            preparado_id
            preparadoVelocidad
            ayunoFecha
            ayunoHora
            liquidoFecha
            liquidoHora
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_POSOLOGIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_POSOLOGIA) As Entities.Tables.PRO_POSOLOGIA
            Dim result As Boolean

            Try
                _commandText = "_PRO_POSOLOGIA_ADD"
                Dim vPKposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VPlanOral As New SqlParameter("@PlanOral", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PlanOral)
                Dim Vhiposodica As New SqlParameter("@hiposodica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOSODICA)
                Dim VSinLiquidos As New SqlParameter("@SinLiquidos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SinLiquidos)
                Dim VLiquidosFinos As New SqlParameter("@LiquidosFinos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LiquidosFinos)
                Dim VLiquidosEspesos As New SqlParameter("@LiquidosEspesos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LiquidosEspesos)
                Dim VLiquidosAligerados As New SqlParameter("@LiquidosAligerados", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LiquidosAligerados)
                Dim VSupControl As New SqlParameter("@SupControl", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SupControl)
                Dim VAsistencia As New SqlParameter("@Asistencia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Asistencia)
                Dim VPicado As New SqlParameter("@Picado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Picado)
                Dim VCortado As New SqlParameter("@Cortado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Cortado)
                Dim Vhipograsa As New SqlParameter("@hipograsa", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOGRASA)
                Dim Valimento_id As New SqlParameter("@alimento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTO_ID)
                Dim ValimentoVelocidad As New SqlParameter("@alimentoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTOVELOCIDAD)
                Dim VgavageIntervalo_id As New SqlParameter("@gavageIntervalo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGEINTERVALO_ID)
                Dim VgavageCantidad As New SqlParameter("@gavageCantidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGECANTIDAD)
                Dim Vpreparado_id As New SqlParameter("@preparado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADO_ID)
                Dim VpreparadoVelocidad As New SqlParameter("@preparadoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADOVELOCIDAD)
                Dim VayunoFecha As New SqlParameter("@ayunoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOFECHA = Date.MinValue, Nothing, Item.AYUNOFECHA))
                Dim VayunoHora As New SqlParameter("@ayunoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOHORA = Date.MinValue, Nothing, Item.AYUNOHORA))
                Dim VliquidoFecha As New SqlParameter("@liquidoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOFECHA = Date.MinValue, Nothing, Item.LIQUIDOFECHA))
                Dim VliquidoHora As New SqlParameter("@liquidoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOHORA = Date.MinValue, Nothing, Item.LIQUIDOHORA))
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKposologia_id, Vpaciente_id, Vprocedimiento_id, VPlanOral, Vhiposodica, VSinLiquidos, VLiquidosFinos, VLiquidosEspesos, VLiquidosAligerados, VSupControl, VAsistencia, VPicado, VCortado, Vhipograsa, Valimento_id, ValimentoVelocidad, VgavageIntervalo_id, VgavageCantidad, Vpreparado_id, VpreparadoVelocidad, VayunoFecha, VayunoHora, VliquidoFecha, VliquidoHora, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.POSOLOGIA_ID = vPKposologia_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_POSOLOGIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Posologia_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_POSOLOGIA
                    NewItem.POSOLOGIA_ID = IIf(Convert.IsDBNull(dr("posologia_id")), Nothing, dr("posologia_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.PlanOral = IIf(Convert.IsDBNull(dr("PlanOral")), Nothing, dr("PlanOral"))
                    NewItem.HIPOSODICA = IIf(Convert.IsDBNull(dr("hiposodica")), Nothing, dr("hiposodica"))
                    NewItem.SinLiquidos = IIf(Convert.IsDBNull(dr("SinLiquidos")), Nothing, dr("SinLiquidos"))
                    NewItem.LiquidosFinos = IIf(Convert.IsDBNull(dr("LiquidosFinos")), Nothing, dr("LiquidosFinos"))
                    NewItem.LiquidosEspesos = IIf(Convert.IsDBNull(dr("LiquidosEspesos")), Nothing, dr("LiquidosEspesos"))
                    NewItem.LiquidosAligerados = IIf(Convert.IsDBNull(dr("LiquidosAligerados")), Nothing, dr("LiquidosAligerados"))
                    NewItem.SupControl = IIf(Convert.IsDBNull(dr("SupControl")), Nothing, dr("SupControl"))
                    NewItem.Asistencia = IIf(Convert.IsDBNull(dr("Asistencia")), Nothing, dr("Asistencia"))
                    NewItem.Picado = IIf(Convert.IsDBNull(dr("Picado")), Nothing, dr("Picado"))
                    NewItem.Cortado = IIf(Convert.IsDBNull(dr("Cortado")), Nothing, dr("Cortado"))
                    NewItem.HIPOGRASA = IIf(Convert.IsDBNull(dr("hipograsa")), Nothing, dr("hipograsa"))
                    NewItem.ALIMENTO_ID = IIf(Convert.IsDBNull(dr("alimento_id")), Nothing, dr("alimento_id"))
                    NewItem.ALIMENTOVELOCIDAD = IIf(Convert.IsDBNull(dr("alimentoVelocidad")), Nothing, dr("alimentoVelocidad"))
                    NewItem.GAVAGEINTERVALO_ID = IIf(Convert.IsDBNull(dr("gavageIntervalo_id")), Nothing, dr("gavageIntervalo_id"))
                    NewItem.GAVAGECANTIDAD = IIf(Convert.IsDBNull(dr("gavageCantidad")), Nothing, dr("gavageCantidad"))
                    NewItem.PREPARADO_ID = IIf(Convert.IsDBNull(dr("preparado_id")), Nothing, dr("preparado_id"))
                    NewItem.PREPARADOVELOCIDAD = IIf(Convert.IsDBNull(dr("preparadoVelocidad")), Nothing, dr("preparadoVelocidad"))
                    NewItem.AYUNOFECHA = IIf(Convert.IsDBNull(dr("ayunoFecha")), Nothing, dr("ayunoFecha"))
                    NewItem.AYUNOHORA = IIf(Convert.IsDBNull(dr("ayunoHora")), Nothing, dr("ayunoHora"))
                    NewItem.LIQUIDOFECHA = IIf(Convert.IsDBNull(dr("liquidoFecha")), Nothing, dr("liquidoFecha"))
                    NewItem.LIQUIDOHORA = IIf(Convert.IsDBNull(dr("liquidoHora")), Nothing, dr("liquidoHora"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_POSOLOGIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_POSOLOGIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_POSOLOGIA) As Boolean

            Try
                _commandText = "_PRO_Posologia_REMOVE"
                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vposologia_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Posologia_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_POSOLOGIA) As Boolean

            Try
                _commandText = "_PRO_Posologia_UPDATE"

                Dim Vposologia_id As New SqlParameter("@posologia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.POSOLOGIA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VPlanOral As New SqlParameter("@PlanOral", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PlanOral)
                Dim Vhiposodica As New SqlParameter("@hiposodica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOSODICA)
                Dim VSinLiquidos As New SqlParameter("@SinLiquidos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SinLiquidos)
                Dim VLiquidosFinos As New SqlParameter("@LiquidosFinos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LiquidosFinos)
                Dim VLiquidosEspesos As New SqlParameter("@LiquidosEspesos", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LiquidosEspesos)
                Dim VLiquidosAligerados As New SqlParameter("@LiquidosAligerados", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.LiquidosAligerados)
                Dim VSupControl As New SqlParameter("@SupControl", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SupControl)
                Dim VAsistencia As New SqlParameter("@Asistencia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Asistencia)
                Dim VPicado As New SqlParameter("@Picado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Picado)
                Dim VCortado As New SqlParameter("@Cortado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.Cortado)
                Dim Vhipograsa As New SqlParameter("@hipograsa", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HIPOGRASA)
                Dim Valimento_id As New SqlParameter("@alimento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTO_ID)
                Dim ValimentoVelocidad As New SqlParameter("@alimentoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTOVELOCIDAD)
                Dim VgavageIntervalo_id As New SqlParameter("@gavageIntervalo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGEINTERVALO_ID)
                Dim VgavageCantidad As New SqlParameter("@gavageCantidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGECANTIDAD)
                Dim Vpreparado_id As New SqlParameter("@preparado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADO_ID)
                Dim VpreparadoVelocidad As New SqlParameter("@preparadoVelocidad", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADOVELOCIDAD)
                Dim VayunoFecha As New SqlParameter("@ayunoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOFECHA = Date.MinValue, Nothing, Item.AYUNOFECHA))
                Dim VayunoHora As New SqlParameter("@ayunoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.AYUNOHORA = Date.MinValue, Nothing, Item.AYUNOHORA))
                Dim VliquidoFecha As New SqlParameter("@liquidoFecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOFECHA = Date.MinValue, Nothing, Item.LIQUIDOFECHA))
                Dim VliquidoHora As New SqlParameter("@liquidoHora", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.LIQUIDOHORA = Date.MinValue, Nothing, Item.LIQUIDOHORA))
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vposologia_id, Vpaciente_id, Vprocedimiento_id, VPlanOral, Vhiposodica, VSinLiquidos, VLiquidosFinos, VLiquidosEspesos, VLiquidosAligerados, VSupControl, VAsistencia, VPicado, VCortado, Vhipograsa, Valimento_id, ValimentoVelocidad, VgavageIntervalo_id, VgavageCantidad, Vpreparado_id, VpreparadoVelocidad, VayunoFecha, VayunoHora, VliquidoFecha, VliquidoHora, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_POSOLOGIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_POSOLOGIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_POSOLOGIA
        ''' Fecha de Creación  : miércoles, 30 de noviembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_POSOLOGIA. </remarks>
        Public Class ColumnNames
            Public Const POSOLOGIA_ID As String = "POSOLOGIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const PLANORAL As String = "PLANORAL"
            Public Const HIPOSODICA As String = "HIPOSODICA"
            Public Const SINLIQUIDOS As String = "SINLIQUIDOS"
            Public Const LIQUIDOSFINOS As String = "LIQUIDOSFINOS"
            Public Const LIQUIDOSESPESOS As String = "LIQUIDOSESPESOS"
            Public Const LIQUIDOSALIGERADOS As String = "LIQUIDOSALIGERADOS"
            Public Const SUPCONTROL As String = "SUPCONTROL"
            Public Const ASISTENCIA As String = "ASISTENCIA"
            Public Const PICADO As String = "PICADO"
            Public Const CORTADO As String = "CORTADO"
            Public Const HIPOGRASA As String = "HIPOGRASA"
            Public Const ALIMENTO_ID As String = "ALIMENTO_ID"
            Public Const ALIMENTOVELOCIDAD As String = "ALIMENTOVELOCIDAD"
            Public Const GAVAGEINTERVALO_ID As String = "GAVAGEINTERVALO_ID"
            Public Const GAVAGECANTIDAD As String = "GAVAGECANTIDAD"
            Public Const PREPARADO_ID As String = "PREPARADO_ID"
            Public Const PREPARADOVELOCIDAD As String = "PREPARADOVELOCIDAD"
            Public Const AYUNOFECHA As String = "AYUNOFECHA"
            Public Const AYUNOHORA As String = "AYUNOHORA"
            Public Const LIQUIDOFECHA As String = "LIQUIDOFECHA"
            Public Const LIQUIDOHORA As String = "LIQUIDOHORA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_POSOLOGIA
    Public Class PRO_TIPO_PROCEDIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            tipoProcedimineto_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_TIPO_PROCEDIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_TIPO_PROCEDIMIENTO) As Entities.Tables.PRO_TIPO_PROCEDIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_PRO_TIPO_PROCEDIMIENTO_ADD"
                Dim vPKtipoProcedimineto_id As New SqlParameter("@tipoProcedimineto_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKtipoProcedimineto_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.TIPOPROCEDIMINETO_ID = vPKtipoProcedimineto_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_TIPO_PROCEDIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Tipo_Procedimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_TIPO_PROCEDIMIENTO
                    NewItem.TIPOPROCEDIMINETO_ID = IIf(Convert.IsDBNull(dr("tipoProcedimineto_id")), Nothing, dr("tipoProcedimineto_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_TIPO_PROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_TIPO_PROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_TIPO_PROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_Tipo_Procedimiento_REMOVE"
                Dim VtipoProcedimineto_id As New SqlParameter("@tipoProcedimineto_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMINETO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VtipoProcedimineto_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Tipo_Procedimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_TIPO_PROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_Tipo_Procedimiento_UPDATE"

                Dim VtipoProcedimineto_id As New SqlParameter("@tipoProcedimineto_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMINETO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VtipoProcedimineto_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_TIPO_PROCEDIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_TIPO_PROCEDIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_TIPO_PROCEDIMIENTO
        ''' Fecha de Creación  : lunes, 8 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_TIPO_PROCEDIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const TIPOPROCEDIMINETO_ID As String = "TIPOPROCEDIMINETO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' PRO_TIPO_PROCEDIMIENTO
    Public Class PRO_ALIMENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            alimento_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_ALIMENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_ALIMENTO) As Entities.Tables.PRO_ALIMENTO
            Dim result As Boolean

            Try
                _commandText = "_PRO_ALIMENTO_ADD"
                Dim vPKalimento_id As New SqlParameter("@alimento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKalimento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ALIMENTO_ID = vPKalimento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_ALIMENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Alimento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_ALIMENTO
                    NewItem.ALIMENTO_ID = IIf(Convert.IsDBNull(dr("alimento_id")), Nothing, dr("alimento_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_ALIMENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_ALIMENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_ALIMENTO) As Boolean

            Try
                _commandText = "_PRO_Alimento_REMOVE"
                Dim Valimento_id As New SqlParameter("@alimento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Valimento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Alimento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_ALIMENTO) As Boolean

            Try
                _commandText = "_PRO_Alimento_UPDATE"

                Dim Valimento_id As New SqlParameter("@alimento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALIMENTO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Valimento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_ALIMENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_ALIMENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_ALIMENTO
        ''' Fecha de Creación  : martes, 9 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_ALIMENTO. </remarks>
        Public Class ColumnNames
            Public Const ALIMENTO_ID As String = "ALIMENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' PRO_ALIMENTO
    Public Class PRO_GAVAGEINTERVALO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            gavage_intervalo_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_GAVAGEINTERVALO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_GAVAGEINTERVALO) As Entities.Tables.PRO_GAVAGEINTERVALO
            Dim result As Boolean

            Try
                _commandText = "_PRO_GAVAGEINTERVALO_ADD"
                Dim vPKgavage_intervalo_id As New SqlParameter("@gavage_intervalo_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKgavage_intervalo_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.GAVAGE_INTERVALO_ID = vPKgavage_intervalo_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_GAVAGEINTERVALO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_GavageIntervalo_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_GAVAGEINTERVALO
                    NewItem.GAVAGE_INTERVALO_ID = IIf(Convert.IsDBNull(dr("gavage_intervalo_id")), Nothing, dr("gavage_intervalo_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_GAVAGEINTERVALO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_GAVAGEINTERVALO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_GAVAGEINTERVALO) As Boolean

            Try
                _commandText = "_PRO_GavageIntervalo_REMOVE"
                Dim Vgavage_intervalo_id As New SqlParameter("@gavage_intervalo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGE_INTERVALO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vgavage_intervalo_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_GavageIntervalo_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_GAVAGEINTERVALO) As Boolean

            Try
                _commandText = "_PRO_GavageIntervalo_UPDATE"

                Dim Vgavage_intervalo_id As New SqlParameter("@gavage_intervalo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GAVAGE_INTERVALO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vgavage_intervalo_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_GAVAGEINTERVALO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_GAVAGEINTERVALO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GAVAGEINTERVALO
        ''' Fecha de Creación  : martes, 9 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GAVAGEINTERVALO. </remarks>
        Public Class ColumnNames
            Public Const GAVAGE_INTERVALO_ID As String = "GAVAGE_INTERVALO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' PRO_GAVAGEINTERVALO
    Public Class PRO_PREPARADO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            preparado_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_PREPARADO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_PREPARADO) As Entities.Tables.PRO_PREPARADO
            Dim result As Boolean

            Try
                _commandText = "_PRO_PREPARADO_ADD"
                Dim vPKpreparado_id As New SqlParameter("@preparado_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKpreparado_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PREPARADO_ID = vPKpreparado_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_PREPARADO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Preparado_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_PREPARADO
                    NewItem.PREPARADO_ID = IIf(Convert.IsDBNull(dr("preparado_id")), Nothing, dr("preparado_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PREPARADO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PREPARADO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_PREPARADO) As Boolean

            Try
                _commandText = "_PRO_Preparado_REMOVE"
                Dim Vpreparado_id As New SqlParameter("@preparado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vpreparado_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Preparado_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_PREPARADO) As Boolean

            Try
                _commandText = "_PRO_Preparado_UPDATE"

                Dim Vpreparado_id As New SqlParameter("@preparado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PREPARADO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vpreparado_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_PREPARADO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_PREPARADO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_PREPARADO
        ''' Fecha de Creación  : martes, 9 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_PREPARADO. </remarks>
        Public Class ColumnNames
            Public Const PREPARADO_ID As String = "PREPARADO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' PRO_PREPARADO
    Public Class TIPODOCUMENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            tipoDocumento_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.TIPODOCUMENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.TIPODOCUMENTO) As Entities.Tables.TIPODOCUMENTO
            Dim result As Boolean

            Try
                _commandText = "_TIPODOCUMENTO_ADD"
                Dim vPKtipoDocumento_id As New SqlParameter("@tipoDocumento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKtipoDocumento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.TIPODOCUMENTO_ID = vPKtipoDocumento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.TIPODOCUMENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_TipoDocumento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.TIPODOCUMENTO
                    NewItem.TIPODOCUMENTO_ID = IIf(Convert.IsDBNull(dr("tipoDocumento_id")), Nothing, dr("tipoDocumento_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TIPODOCUMENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "TIPODOCUMENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.TIPODOCUMENTO) As Boolean

            Try
                _commandText = "_TipoDocumento_REMOVE"
                Dim VtipoDocumento_id As New SqlParameter("@tipoDocumento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPODOCUMENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VtipoDocumento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_TipoDocumento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.TIPODOCUMENTO) As Boolean

            Try
                _commandText = "_TipoDocumento_UPDATE"

                Dim VtipoDocumento_id As New SqlParameter("@tipoDocumento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPODOCUMENTO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VtipoDocumento_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.TIPODOCUMENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.TIPODOCUMENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla TIPODOCUMENTO
        ''' Fecha de Creación  : jueves, 18 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla TIPODOCUMENTO. </remarks>
        Public Class ColumnNames
            Public Const TIPODOCUMENTO_ID As String = "TIPODOCUMENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' TIPODOCUMENTO
    Public Class PRO_COLOCACION_VIA_PERIFERICA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            colocacionViaPeriferica_id
            paciente_id
            procedimiento_id
            abocathNumero_id
            parcheTegaderm
            infusion
            via
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA) As Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA
            Dim result As Boolean

            Try
                _commandText = "_PRO_COLOCACION_VIA_PERIFERICA_ADD"
                Dim vPKcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VabocathNumero_id As New SqlParameter("@abocathNumero_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ABOCATHNUMERO_ID)
                Dim VparcheTegaderm As New SqlParameter("@parcheTegaderm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PARCHETEGADERM)
                Dim Vinfusion As New SqlParameter("@infusion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INFUSION)
                Dim Vvia As New SqlParameter("@via", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcolocacionViaPeriferica_id, Vpaciente_id, Vprocedimiento_id, VabocathNumero_id, VparcheTegaderm, Vinfusion, Vvia, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.COLOCACIONVIAPERIFERICA_ID = vPKcolocacionViaPeriferica_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Colocacion_Via_Periferica_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA
                    NewItem.COLOCACIONVIAPERIFERICA_ID = IIf(Convert.IsDBNull(dr("colocacionViaPeriferica_id")), Nothing, dr("colocacionViaPeriferica_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.ABOCATHNUMERO_ID = IIf(Convert.IsDBNull(dr("abocathNumero_id")), Nothing, dr("abocathNumero_id"))
                    NewItem.PARCHETEGADERM = IIf(Convert.IsDBNull(dr("parcheTegaderm")), Nothing, dr("parcheTegaderm"))
                    NewItem.INFUSION = IIf(Convert.IsDBNull(dr("infusion")), Nothing, dr("infusion"))
                    NewItem.VIA = IIf(Convert.IsDBNull(dr("via")), Nothing, dr("via"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_COLOCACION_VIA_PERIFERICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_COLOCACION_VIA_PERIFERICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA) As Boolean

            Try
                _commandText = "_PRO_Colocacion_Via_Periferica_REMOVE"
                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcolocacionViaPeriferica_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Colocacion_Via_Periferica_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA) As Boolean

            Try
                _commandText = "_PRO_Colocacion_Via_Periferica_UPDATE"

                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VabocathNumero_id As New SqlParameter("@abocathNumero_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ABOCATHNUMERO_ID)
                Dim VparcheTegaderm As New SqlParameter("@parcheTegaderm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PARCHETEGADERM)
                Dim Vinfusion As New SqlParameter("@infusion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INFUSION)
                Dim Vvia As New SqlParameter("@via", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcolocacionViaPeriferica_id, Vpaciente_id, Vprocedimiento_id, VabocathNumero_id, VparcheTegaderm, Vinfusion, Vvia, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_COLOCACION_VIA_PERIFERICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_COLOCACION_VIA_PERIFERICA
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_COLOCACION_VIA_PERIFERICA. </remarks>
        Public Class ColumnNames
            Public Const COLOCACIONVIAPERIFERICA_ID As String = "COLOCACIONVIAPERIFERICA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const ABOCATHNUMERO_ID As String = "ABOCATHNUMERO_ID"
            Public Const PARCHETEGADERM As String = "PARCHETEGADERM"
            Public Const INFUSION As String = "INFUSION"
            Public Const VIA As String = "VIA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_COLOCACION_VIA_PERIFERICA
    Public Class PRO_CUIDADO_ORAL
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            cuidadoOral_id
            paciente_id
            procedimiento_id
            placaDescanso
            mordillo
            clorhexidina
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_CUIDADO_ORAL)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_CUIDADO_ORAL) As Entities.Tables.PRO_CUIDADO_ORAL
            Dim result As Boolean

            Try
                _commandText = "_PRO_CUIDADO_ORAL_ADD"
                Dim vPKcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VplacaDescanso As New SqlParameter("@placaDescanso", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PLACADESCANSO)
                Dim Vmordillo As New SqlParameter("@mordillo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MORDILLO)
                Dim Vclorhexidina As New SqlParameter("@clorhexidina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CLORHEXIDINA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcuidadoOral_id, Vpaciente_id, Vprocedimiento_id, VplacaDescanso, Vmordillo, Vclorhexidina, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CUIDADOORAL_ID = vPKcuidadoOral_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_CUIDADO_ORAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Cuidado_Oral_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_CUIDADO_ORAL
                    NewItem.CUIDADOORAL_ID = IIf(Convert.IsDBNull(dr("cuidadoOral_id")), Nothing, dr("cuidadoOral_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.PLACADESCANSO = IIf(Convert.IsDBNull(dr("placaDescanso")), Nothing, dr("placaDescanso"))
                    NewItem.MORDILLO = IIf(Convert.IsDBNull(dr("mordillo")), Nothing, dr("mordillo"))
                    NewItem.CLORHEXIDINA = IIf(Convert.IsDBNull(dr("clorhexidina")), Nothing, dr("clorhexidina"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_CUIDADO_ORAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_CUIDADO_ORAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_CUIDADO_ORAL) As Boolean

            Try
                _commandText = "_PRO_Cuidado_Oral_REMOVE"
                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcuidadoOral_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Cuidado_Oral_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_CUIDADO_ORAL) As Boolean

            Try
                _commandText = "_PRO_Cuidado_Oral_UPDATE"

                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VplacaDescanso As New SqlParameter("@placaDescanso", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PLACADESCANSO)
                Dim Vmordillo As New SqlParameter("@mordillo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MORDILLO)
                Dim Vclorhexidina As New SqlParameter("@clorhexidina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CLORHEXIDINA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcuidadoOral_id, Vpaciente_id, Vprocedimiento_id, VplacaDescanso, Vmordillo, Vclorhexidina, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_CUIDADO_ORAL)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_CUIDADO_ORAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_CUIDADO_ORAL
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_CUIDADO_ORAL. </remarks>
        Public Class ColumnNames
            Public Const CUIDADOORAL_ID As String = "CUIDADOORAL_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const PLACADESCANSO As String = "PLACADESCANSO"
            Public Const MORDILLO As String = "MORDILLO"
            Public Const CLORHEXIDINA As String = "CLORHEXIDINA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_CUIDADO_ORAL
    Public Class PRO_CUIDADO_POSTURAL
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            cuidadoPostural_id
            paciente_id
            procedimiento_id
            cabecera
            rotar
            movilizacionEnBloque
            almohadon
            elevadorInodoros
            trianguloSeparadorEntrePierna
            evitaApoyoTalon
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_CUIDADO_POSTURAL)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_CUIDADO_POSTURAL) As Entities.Tables.PRO_CUIDADO_POSTURAL
            Dim result As Boolean

            Try
                _commandText = "_PRO_CUIDADO_POSTURAL_ADD"
                Dim vPKcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vcabecera As New SqlParameter("@cabecera", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CABECERA)
                Dim Vrotar As New SqlParameter("@rotar", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ROTAR)
                Dim VmovilizacionEnBloque As New SqlParameter("@movilizacionEnBloque", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOVILIZACIONENBLOQUE)
                Dim Valmohadon As New SqlParameter("@almohadon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALMOHADON)
                Dim VelevadorInodoros As New SqlParameter("@elevadorInodoros", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELEVADORINODOROS)
                Dim VtrianguloSeparadorEntrePierna As New SqlParameter("@trianguloSeparadorEntrePierna", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TRIANGULOSEPARADORENTREPIERNA)
                Dim VevitaApoyoTalon As New SqlParameter("@evitaApoyoTalon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVITAAPOYOTALON)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcuidadoPostural_id, Vpaciente_id, Vprocedimiento_id, Vcabecera, Vrotar, VmovilizacionEnBloque, Valmohadon, VelevadorInodoros, VtrianguloSeparadorEntrePierna, VevitaApoyoTalon, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CUIDADOPOSTURAL_ID = vPKcuidadoPostural_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_CUIDADO_POSTURAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Cuidado_Postural_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_CUIDADO_POSTURAL
                    NewItem.CUIDADOPOSTURAL_ID = IIf(Convert.IsDBNull(dr("cuidadoPostural_id")), Nothing, dr("cuidadoPostural_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.CABECERA = IIf(Convert.IsDBNull(dr("cabecera")), Nothing, dr("cabecera"))
                    NewItem.ROTAR = IIf(Convert.IsDBNull(dr("rotar")), Nothing, dr("rotar"))
                    NewItem.MOVILIZACIONENBLOQUE = IIf(Convert.IsDBNull(dr("movilizacionEnBloque")), Nothing, dr("movilizacionEnBloque"))
                    NewItem.ALMOHADON = IIf(Convert.IsDBNull(dr("almohadon")), Nothing, dr("almohadon"))
                    NewItem.ELEVADORINODOROS = IIf(Convert.IsDBNull(dr("elevadorInodoros")), Nothing, dr("elevadorInodoros"))
                    NewItem.TRIANGULOSEPARADORENTREPIERNA = IIf(Convert.IsDBNull(dr("trianguloSeparadorEntrePierna")), Nothing, dr("trianguloSeparadorEntrePierna"))
                    NewItem.EVITAAPOYOTALON = IIf(Convert.IsDBNull(dr("evitaApoyoTalon")), Nothing, dr("evitaApoyoTalon"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_CUIDADO_POSTURAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_CUIDADO_POSTURAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_CUIDADO_POSTURAL) As Boolean

            Try
                _commandText = "_PRO_Cuidado_Postural_REMOVE"
                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcuidadoPostural_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Cuidado_Postural_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_CUIDADO_POSTURAL) As Boolean

            Try
                _commandText = "_PRO_Cuidado_Postural_UPDATE"

                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vcabecera As New SqlParameter("@cabecera", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CABECERA)
                Dim Vrotar As New SqlParameter("@rotar", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ROTAR)
                Dim VmovilizacionEnBloque As New SqlParameter("@movilizacionEnBloque", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOVILIZACIONENBLOQUE)
                Dim Valmohadon As New SqlParameter("@almohadon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALMOHADON)
                Dim VelevadorInodoros As New SqlParameter("@elevadorInodoros", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELEVADORINODOROS)
                Dim VtrianguloSeparadorEntrePierna As New SqlParameter("@trianguloSeparadorEntrePierna", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TRIANGULOSEPARADORENTREPIERNA)
                Dim VevitaApoyoTalon As New SqlParameter("@evitaApoyoTalon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVITAAPOYOTALON)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcuidadoPostural_id, Vpaciente_id, Vprocedimiento_id, Vcabecera, Vrotar, VmovilizacionEnBloque, Valmohadon, VelevadorInodoros, VtrianguloSeparadorEntrePierna, VevitaApoyoTalon, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_CUIDADO_POSTURAL)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_CUIDADO_POSTURAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_CUIDADO_POSTURAL
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_CUIDADO_POSTURAL. </remarks>
        Public Class ColumnNames
            Public Const CUIDADOPOSTURAL_ID As String = "CUIDADOPOSTURAL_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CABECERA As String = "CABECERA"
            Public Const ROTAR As String = "ROTAR"
            Public Const MOVILIZACIONENBLOQUE As String = "MOVILIZACIONENBLOQUE"
            Public Const ALMOHADON As String = "ALMOHADON"
            Public Const ELEVADORINODOROS As String = "ELEVADORINODOROS"
            Public Const TRIANGULOSEPARADORENTREPIERNA As String = "TRIANGULOSEPARADORENTREPIERNA"
            Public Const EVITAAPOYOTALON As String = "EVITAAPOYOTALON"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_CUIDADO_POSTURAL
    Public Class PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            colocacionViaPeriferica_id
            paciente_id
            procedimiento_id
            abocathNumero_id
            parcheTegaderm
            infusion
            via
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA) As Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA_ADD"
                Dim vPKcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VabocathNumero_id As New SqlParameter("@abocathNumero_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ABOCATHNUMERO_ID)
                Dim VparcheTegaderm As New SqlParameter("@parcheTegaderm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PARCHETEGADERM)
                Dim Vinfusion As New SqlParameter("@infusion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INFUSION)
                Dim Vvia As New SqlParameter("@via", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcolocacionViaPeriferica_id, Vpaciente_id, Vprocedimiento_id, VabocathNumero_id, VparcheTegaderm, Vinfusion, Vvia, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.COLOCACIONVIAPERIFERICA_ID = vPKcolocacionViaPeriferica_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Colocacion_Via_Periferica_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA
                    NewItem.COLOCACIONVIAPERIFERICA_ID = IIf(Convert.IsDBNull(dr("colocacionViaPeriferica_id")), Nothing, dr("colocacionViaPeriferica_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.ABOCATHNUMERO_ID = IIf(Convert.IsDBNull(dr("abocathNumero_id")), Nothing, dr("abocathNumero_id"))
                    NewItem.PARCHETEGADERM = IIf(Convert.IsDBNull(dr("parcheTegaderm")), Nothing, dr("parcheTegaderm"))
                    NewItem.INFUSION = IIf(Convert.IsDBNull(dr("infusion")), Nothing, dr("infusion"))
                    NewItem.VIA = IIf(Convert.IsDBNull(dr("via")), Nothing, dr("via"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA) As Boolean

            Try
                _commandText = "_PRO_Historial_Colocacion_Via_Periferica_REMOVE"
                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcolocacionViaPeriferica_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Colocacion_Via_Periferica_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA) As Boolean

            Try
                _commandText = "_PRO_Historial_Colocacion_Via_Periferica_UPDATE"

                Dim VcolocacionViaPeriferica_id As New SqlParameter("@colocacionViaPeriferica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLOCACIONVIAPERIFERICA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VabocathNumero_id As New SqlParameter("@abocathNumero_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ABOCATHNUMERO_ID)
                Dim VparcheTegaderm As New SqlParameter("@parcheTegaderm", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PARCHETEGADERM)
                Dim Vinfusion As New SqlParameter("@infusion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INFUSION)
                Dim Vvia As New SqlParameter("@via", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.VIA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcolocacionViaPeriferica_id, Vpaciente_id, Vprocedimiento_id, VabocathNumero_id, VparcheTegaderm, Vinfusion, Vvia, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA. </remarks>
        Public Class ColumnNames
            Public Const COLOCACIONVIAPERIFERICA_ID As String = "COLOCACIONVIAPERIFERICA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const ABOCATHNUMERO_ID As String = "ABOCATHNUMERO_ID"
            Public Const PARCHETEGADERM As String = "PARCHETEGADERM"
            Public Const INFUSION As String = "INFUSION"
            Public Const VIA As String = "VIA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_COLOCACION_VIA_PERIFERICA
    Public Class PRO_HISTORIAL_CUIDADO_ORAL
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            cuidadoOral_id
            paciente_id
            procedimiento_id
            placaDescanso
            mordillo
            clorhexidina
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL) As Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_CUIDADO_ORAL_ADD"
                Dim vPKcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VplacaDescanso As New SqlParameter("@placaDescanso", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PLACADESCANSO)
                Dim Vmordillo As New SqlParameter("@mordillo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MORDILLO)
                Dim Vclorhexidina As New SqlParameter("@clorhexidina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CLORHEXIDINA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.NChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcuidadoOral_id, Vpaciente_id, Vprocedimiento_id, VplacaDescanso, Vmordillo, Vclorhexidina, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CUIDADOORAL_ID = vPKcuidadoOral_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Cuidado_Oral_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL
                    NewItem.CUIDADOORAL_ID = IIf(Convert.IsDBNull(dr("cuidadoOral_id")), Nothing, dr("cuidadoOral_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.PLACADESCANSO = IIf(Convert.IsDBNull(dr("placaDescanso")), Nothing, dr("placaDescanso"))
                    NewItem.MORDILLO = IIf(Convert.IsDBNull(dr("mordillo")), Nothing, dr("mordillo"))
                    NewItem.CLORHEXIDINA = IIf(Convert.IsDBNull(dr("clorhexidina")), Nothing, dr("clorhexidina"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_CUIDADO_ORAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_CUIDADO_ORAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL) As Boolean

            Try
                _commandText = "_PRO_Historial_Cuidado_Oral_REMOVE"
                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcuidadoOral_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Cuidado_Oral_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL) As Boolean

            Try
                _commandText = "_PRO_Historial_Cuidado_Oral_UPDATE"

                Dim VcuidadoOral_id As New SqlParameter("@cuidadoOral_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOORAL_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VplacaDescanso As New SqlParameter("@placaDescanso", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PLACADESCANSO)
                Dim Vmordillo As New SqlParameter("@mordillo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MORDILLO)
                Dim Vclorhexidina As New SqlParameter("@clorhexidina", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CLORHEXIDINA)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.NChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcuidadoOral_id, Vpaciente_id, Vprocedimiento_id, VplacaDescanso, Vmordillo, Vclorhexidina, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_CUIDADO_ORAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_CUIDADO_ORAL
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_CUIDADO_ORAL. </remarks>
        Public Class ColumnNames
            Public Const CUIDADOORAL_ID As String = "CUIDADOORAL_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const PLACADESCANSO As String = "PLACADESCANSO"
            Public Const MORDILLO As String = "MORDILLO"
            Public Const CLORHEXIDINA As String = "CLORHEXIDINA"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_CUIDADO_ORAL
    Public Class PRO_HISTORIAL_CUIDADO_POSTURAL
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            cuidadoPostural_id
            paciente_id
            procedimiento_id
            cabecera
            rotar
            movilizacionEnBloque
            almohadon
            elevadorInodoros
            trianguloSeparadorEntrePierna
            evitaApoyoTalon
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL) As Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_CUIDADO_POSTURAL_ADD"
                Dim vPKcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vcabecera As New SqlParameter("@cabecera", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CABECERA)
                Dim Vrotar As New SqlParameter("@rotar", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ROTAR)
                Dim VmovilizacionEnBloque As New SqlParameter("@movilizacionEnBloque", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOVILIZACIONENBLOQUE)
                Dim Valmohadon As New SqlParameter("@almohadon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALMOHADON)
                Dim VelevadorInodoros As New SqlParameter("@elevadorInodoros", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELEVADORINODOROS)
                Dim VtrianguloSeparadorEntrePierna As New SqlParameter("@trianguloSeparadorEntrePierna", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TRIANGULOSEPARADORENTREPIERNA)
                Dim VevitaApoyoTalon As New SqlParameter("@evitaApoyoTalon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVITAAPOYOTALON)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKcuidadoPostural_id, Vpaciente_id, Vprocedimiento_id, Vcabecera, Vrotar, VmovilizacionEnBloque, Valmohadon, VelevadorInodoros, VtrianguloSeparadorEntrePierna, VevitaApoyoTalon, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.CUIDADOPOSTURAL_ID = vPKcuidadoPostural_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Cuidado_Postural_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL
                    NewItem.CUIDADOPOSTURAL_ID = IIf(Convert.IsDBNull(dr("cuidadoPostural_id")), Nothing, dr("cuidadoPostural_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.CABECERA = IIf(Convert.IsDBNull(dr("cabecera")), Nothing, dr("cabecera"))
                    NewItem.ROTAR = IIf(Convert.IsDBNull(dr("rotar")), Nothing, dr("rotar"))
                    NewItem.MOVILIZACIONENBLOQUE = IIf(Convert.IsDBNull(dr("movilizacionEnBloque")), Nothing, dr("movilizacionEnBloque"))
                    NewItem.ALMOHADON = IIf(Convert.IsDBNull(dr("almohadon")), Nothing, dr("almohadon"))
                    NewItem.ELEVADORINODOROS = IIf(Convert.IsDBNull(dr("elevadorInodoros")), Nothing, dr("elevadorInodoros"))
                    NewItem.TRIANGULOSEPARADORENTREPIERNA = IIf(Convert.IsDBNull(dr("trianguloSeparadorEntrePierna")), Nothing, dr("trianguloSeparadorEntrePierna"))
                    NewItem.EVITAAPOYOTALON = IIf(Convert.IsDBNull(dr("evitaApoyoTalon")), Nothing, dr("evitaApoyoTalon"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_CUIDADO_POSTURAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_CUIDADO_POSTURAL")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL) As Boolean

            Try
                _commandText = "_PRO_Historial_Cuidado_Postural_REMOVE"
                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VcuidadoPostural_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Cuidado_Postural_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL) As Boolean

            Try
                _commandText = "_PRO_Historial_Cuidado_Postural_UPDATE"

                Dim VcuidadoPostural_id As New SqlParameter("@cuidadoPostural_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CUIDADOPOSTURAL_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vcabecera As New SqlParameter("@cabecera", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CABECERA)
                Dim Vrotar As New SqlParameter("@rotar", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ROTAR)
                Dim VmovilizacionEnBloque As New SqlParameter("@movilizacionEnBloque", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOVILIZACIONENBLOQUE)
                Dim Valmohadon As New SqlParameter("@almohadon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ALMOHADON)
                Dim VelevadorInodoros As New SqlParameter("@elevadorInodoros", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ELEVADORINODOROS)
                Dim VtrianguloSeparadorEntrePierna As New SqlParameter("@trianguloSeparadorEntrePierna", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TRIANGULOSEPARADORENTREPIERNA)
                Dim VevitaApoyoTalon As New SqlParameter("@evitaApoyoTalon", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVITAAPOYOTALON)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VcuidadoPostural_id, Vpaciente_id, Vprocedimiento_id, Vcabecera, Vrotar, VmovilizacionEnBloque, Valmohadon, VelevadorInodoros, VtrianguloSeparadorEntrePierna, VevitaApoyoTalon, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_CUIDADO_POSTURAL
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_CUIDADO_POSTURAL
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_CUIDADO_POSTURAL. </remarks>
        Public Class ColumnNames
            Public Const CUIDADOPOSTURAL_ID As String = "CUIDADOPOSTURAL_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CABECERA As String = "CABECERA"
            Public Const ROTAR As String = "ROTAR"
            Public Const MOVILIZACIONENBLOQUE As String = "MOVILIZACIONENBLOQUE"
            Public Const ALMOHADON As String = "ALMOHADON"
            Public Const ELEVADORINODOROS As String = "ELEVADORINODOROS"
            Public Const TRIANGULOSEPARADORENTREPIERNA As String = "TRIANGULOSEPARADORENTREPIERNA"
            Public Const EVITAAPOYOTALON As String = "EVITAAPOYOTALON"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_CUIDADO_POSTURAL
    Public Class PRO_HISTORIAL_PROTECCION_FISICA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            proteccionFisica_id
            paciente_id
            procedimiento_id
            contencionFisica
            colchonAire
            barandasCama
            cascoProteccion
            chiripaSilla
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA) As Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_PROTECCION_FISICA_ADD"
                Dim vPKproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontencionFisica As New SqlParameter("@contencionFisica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTENCIONFISICA)
                Dim VcolchonAire As New SqlParameter("@colchonAire", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLCHONAIRE)
                Dim VbarandasCama As New SqlParameter("@barandasCama", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BARANDASCAMA)
                Dim VcascoProteccion As New SqlParameter("@cascoProteccion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CASCOPROTECCION)
                Dim VchiripaSilla As New SqlParameter("@chiripaSilla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CHIRIPASILLA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKproteccionFisica_id, Vpaciente_id, Vprocedimiento_id, VcontencionFisica, VcolchonAire, VbarandasCama, VcascoProteccion, VchiripaSilla, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PROTECCIONFISICA_ID = vPKproteccionFisica_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Proteccion_Fisica_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA
                    NewItem.PROTECCIONFISICA_ID = IIf(Convert.IsDBNull(dr("proteccionFisica_id")), Nothing, dr("proteccionFisica_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.CONTENCIONFISICA = IIf(Convert.IsDBNull(dr("contencionFisica")), Nothing, dr("contencionFisica"))
                    NewItem.COLCHONAIRE = IIf(Convert.IsDBNull(dr("colchonAire")), Nothing, dr("colchonAire"))
                    NewItem.BARANDASCAMA = IIf(Convert.IsDBNull(dr("barandasCama")), Nothing, dr("barandasCama"))
                    NewItem.CASCOPROTECCION = IIf(Convert.IsDBNull(dr("cascoProteccion")), Nothing, dr("cascoProteccion"))
                    NewItem.CHIRIPASILLA = IIf(Convert.IsDBNull(dr("chiripaSilla")), Nothing, dr("chiripaSilla"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_PROTECCION_FISICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_PROTECCION_FISICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA) As Boolean

            Try
                _commandText = "_PRO_Historial_Proteccion_Fisica_REMOVE"
                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VproteccionFisica_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Proteccion_Fisica_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA) As Boolean

            Try
                _commandText = "_PRO_Historial_Proteccion_Fisica_UPDATE"

                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontencionFisica As New SqlParameter("@contencionFisica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTENCIONFISICA)
                Dim VcolchonAire As New SqlParameter("@colchonAire", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLCHONAIRE)
                Dim VbarandasCama As New SqlParameter("@barandasCama", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BARANDASCAMA)
                Dim VcascoProteccion As New SqlParameter("@cascoProteccion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CASCOPROTECCION)
                Dim VchiripaSilla As New SqlParameter("@chiripaSilla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CHIRIPASILLA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VproteccionFisica_id, Vpaciente_id, Vprocedimiento_id, VcontencionFisica, VcolchonAire, VbarandasCama, VcascoProteccion, VchiripaSilla, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_PROTECCION_FISICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_PROTECCION_FISICA
        ''' Fecha de Creación  : martes, 23 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_PROTECCION_FISICA. </remarks>
        Public Class ColumnNames
            Public Const PROTECCIONFISICA_ID As String = "PROTECCIONFISICA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CONTENCIONFISICA As String = "CONTENCIONFISICA"
            Public Const COLCHONAIRE As String = "COLCHONAIRE"
            Public Const BARANDASCAMA As String = "BARANDASCAMA"
            Public Const CASCOPROTECCION As String = "CASCOPROTECCION"
            Public Const CHIRIPASILLA As String = "CHIRIPASILLA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_PROTECCION_FISICA
    Public Class PRO_PROTECCION_FISICA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            proteccionFisica_id
            paciente_id
            procedimiento_id
            contencionFisica
            colchonAire
            barandasCama
            cascoProteccion
            chiripaSilla
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_PROTECCION_FISICA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_PROTECCION_FISICA) As Entities.Tables.PRO_PROTECCION_FISICA
            Dim result As Boolean

            Try
                _commandText = "_PRO_PROTECCION_FISICA_ADD"
                Dim vPKproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontencionFisica As New SqlParameter("@contencionFisica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTENCIONFISICA)
                Dim VcolchonAire As New SqlParameter("@colchonAire", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLCHONAIRE)
                Dim VbarandasCama As New SqlParameter("@barandasCama", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BARANDASCAMA)
                Dim VcascoProteccion As New SqlParameter("@cascoProteccion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CASCOPROTECCION)
                Dim VchiripaSilla As New SqlParameter("@chiripaSilla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CHIRIPASILLA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKproteccionFisica_id, Vpaciente_id, Vprocedimiento_id, VcontencionFisica, VcolchonAire, VbarandasCama, VcascoProteccion, VchiripaSilla, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PROTECCIONFISICA_ID = vPKproteccionFisica_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_PROTECCION_FISICA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Proteccion_Fisica_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_PROTECCION_FISICA
                    NewItem.PROTECCIONFISICA_ID = IIf(Convert.IsDBNull(dr("proteccionFisica_id")), Nothing, dr("proteccionFisica_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.CONTENCIONFISICA = IIf(Convert.IsDBNull(dr("contencionFisica")), Nothing, dr("contencionFisica"))
                    NewItem.COLCHONAIRE = IIf(Convert.IsDBNull(dr("colchonAire")), Nothing, dr("colchonAire"))
                    NewItem.BARANDASCAMA = IIf(Convert.IsDBNull(dr("barandasCama")), Nothing, dr("barandasCama"))
                    NewItem.CASCOPROTECCION = IIf(Convert.IsDBNull(dr("cascoProteccion")), Nothing, dr("cascoProteccion"))
                    NewItem.CHIRIPASILLA = IIf(Convert.IsDBNull(dr("chiripaSilla")), Nothing, dr("chiripaSilla"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PROTECCION_FISICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PROTECCION_FISICA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_PROTECCION_FISICA) As Boolean

            Try
                _commandText = "_PRO_Proteccion_Fisica_REMOVE"
                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VproteccionFisica_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Proteccion_Fisica_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_PROTECCION_FISICA) As Boolean

            Try
                _commandText = "_PRO_Proteccion_Fisica_UPDATE"

                Dim VproteccionFisica_id As New SqlParameter("@proteccionFisica_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROTECCIONFISICA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim VcontencionFisica As New SqlParameter("@contencionFisica", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CONTENCIONFISICA)
                Dim VcolchonAire As New SqlParameter("@colchonAire", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.COLCHONAIRE)
                Dim VbarandasCama As New SqlParameter("@barandasCama", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BARANDASCAMA)
                Dim VcascoProteccion As New SqlParameter("@cascoProteccion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CASCOPROTECCION)
                Dim VchiripaSilla As New SqlParameter("@chiripaSilla", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CHIRIPASILLA)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VproteccionFisica_id, Vpaciente_id, Vprocedimiento_id, VcontencionFisica, VcolchonAire, VbarandasCama, VcascoProteccion, VchiripaSilla, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_PROTECCION_FISICA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_PROTECCION_FISICA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_PROTECCION_FISICA
        ''' Fecha de Creación  : miércoles, 24 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_PROTECCION_FISICA. </remarks>
        Public Class ColumnNames
            Public Const PROTECCIONFISICA_ID As String = "PROTECCIONFISICA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const CONTENCIONFISICA As String = "CONTENCIONFISICA"
            Public Const COLCHONAIRE As String = "COLCHONAIRE"
            Public Const BARANDASCAMA As String = "BARANDASCAMA"
            Public Const CASCOPROTECCION As String = "CASCOPROTECCION"
            Public Const CHIRIPASILLA As String = "CHIRIPASILLA"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_PROTECCION_FISICA
    Public Class PRORROGASITEM
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            id
            prorroga_id
            evolucion
            kinesioMuscular
            kinesioMuscularTxt
            fono
            fonoTxt
            terapiaOcup
            terapiaOcupTxt
            psicologia
            psicologiaTxt
            nutricion
            nutricionTxt
            musicoterapia
            musicoterapiaTxt
            fechaModificacion
            usuarioModifica
            Tipo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRORROGASITEM)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRORROGASITEM) As Entities.Tables.PRORROGASITEM
            Dim result As Boolean

            Try
                _commandText = "_PRORROGASITEM_ADD"
                Dim vPKid As New SqlParameter("@id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vprorroga_id As New SqlParameter("@prorroga_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRORROGA_ID)
                Dim Vevolucion As New SqlParameter("@evolucion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVOLUCION)
                Dim VkinesioMuscular As New SqlParameter("@kinesioMuscular", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.KINESIOMUSCULAR)
                Dim VkinesioMuscularTxt As New SqlParameter("@kinesioMuscularTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.KINESIOMUSCULARTXT)
                Dim Vfono As New SqlParameter("@fono", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FONO)
                Dim VfonoTxt As New SqlParameter("@fonoTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FONOTXT)
                Dim VterapiaOcup As New SqlParameter("@terapiaOcup", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERAPIAOCUP)
                Dim VterapiaOcupTxt As New SqlParameter("@terapiaOcupTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERAPIAOCUPTXT)
                Dim Vpsicologia As New SqlParameter("@psicologia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PSICOLOGIA)
                Dim VpsicologiaTxt As New SqlParameter("@psicologiaTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PSICOLOGIATXT)
                Dim Vnutricion As New SqlParameter("@nutricion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUTRICION)
                Dim VnutricionTxt As New SqlParameter("@nutricionTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUTRICIONTXT)
                Dim Vmusicoterapia As New SqlParameter("@musicoterapia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MUSICOTERAPIA)
                Dim VmusicoterapiaTxt As New SqlParameter("@musicoterapiaTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MUSICOTERAPIATXT)
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VusuarioModifica As New SqlParameter("@usuarioModifica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOMODIFICA)
                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKid, Vprorroga_id, Vevolucion, VkinesioMuscular, VkinesioMuscularTxt, Vfono, VfonoTxt, VterapiaOcup, VterapiaOcupTxt, Vpsicologia, VpsicologiaTxt, Vnutricion, VnutricionTxt, Vmusicoterapia, VmusicoterapiaTxt, VfechaModificacion, VusuarioModifica, VTipo, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID = vPKid.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRORROGASITEM)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_ProrrogasItem_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRORROGASITEM
                    NewItem.ID = IIf(Convert.IsDBNull(dr("id")), Nothing, dr("id"))
                    NewItem.PRORROGA_ID = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.EVOLUCION = IIf(Convert.IsDBNull(dr("evolucion")), Nothing, dr("evolucion"))
                    NewItem.KINESIOMUSCULAR = IIf(Convert.IsDBNull(dr("kinesioMuscular")), Nothing, dr("kinesioMuscular"))
                    NewItem.KINESIOMUSCULARTXT = IIf(Convert.IsDBNull(dr("kinesioMuscularTxt")), Nothing, dr("kinesioMuscularTxt"))
                    NewItem.FONO = IIf(Convert.IsDBNull(dr("fono")), Nothing, dr("fono"))
                    NewItem.FONOTXT = IIf(Convert.IsDBNull(dr("fonoTxt")), Nothing, dr("fonoTxt"))
                    NewItem.TERAPIAOCUP = IIf(Convert.IsDBNull(dr("terapiaOcup")), Nothing, dr("terapiaOcup"))
                    NewItem.TERAPIAOCUPTXT = IIf(Convert.IsDBNull(dr("terapiaOcupTxt")), Nothing, dr("terapiaOcupTxt"))
                    NewItem.PSICOLOGIA = IIf(Convert.IsDBNull(dr("psicologia")), Nothing, dr("psicologia"))
                    NewItem.PSICOLOGIATXT = IIf(Convert.IsDBNull(dr("psicologiaTxt")), Nothing, dr("psicologiaTxt"))
                    NewItem.NUTRICION = IIf(Convert.IsDBNull(dr("nutricion")), Nothing, dr("nutricion"))
                    NewItem.NUTRICIONTXT = IIf(Convert.IsDBNull(dr("nutricionTxt")), Nothing, dr("nutricionTxt"))
                    NewItem.MUSICOTERAPIA = IIf(Convert.IsDBNull(dr("musicoterapia")), Nothing, dr("musicoterapia"))
                    NewItem.MUSICOTERAPIATXT = IIf(Convert.IsDBNull(dr("musicoterapiaTxt")), Nothing, dr("musicoterapiaTxt"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.USUARIOMODIFICA = IIf(Convert.IsDBNull(dr("usuarioModifica")), Nothing, dr("usuarioModifica"))
                    NewItem.TIPO = IIf(Convert.IsDBNull(dr("Tipo")), Nothing, dr("Tipo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRORROGASITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRORROGASITEM")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRORROGASITEM) As Boolean

            Try
                _commandText = "_ProrrogasItem_REMOVE"
                Dim Vid As New SqlParameter("@id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vid, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_ProrrogasItem_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRORROGASITEM) As Boolean

            Try
                _commandText = "_ProrrogasItem_UPDATE"

                Dim Vid As New SqlParameter("@id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID)
                Dim Vprorroga_id As New SqlParameter("@prorroga_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRORROGA_ID)
                Dim Vevolucion As New SqlParameter("@evolucion", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.EVOLUCION)
                Dim VkinesioMuscular As New SqlParameter("@kinesioMuscular", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.KINESIOMUSCULAR)
                Dim VkinesioMuscularTxt As New SqlParameter("@kinesioMuscularTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.KINESIOMUSCULARTXT)
                Dim Vfono As New SqlParameter("@fono", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FONO)
                Dim VfonoTxt As New SqlParameter("@fonoTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FONOTXT)
                Dim VterapiaOcup As New SqlParameter("@terapiaOcup", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERAPIAOCUP)
                Dim VterapiaOcupTxt As New SqlParameter("@terapiaOcupTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERAPIAOCUPTXT)
                Dim Vpsicologia As New SqlParameter("@psicologia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PSICOLOGIA)
                Dim VpsicologiaTxt As New SqlParameter("@psicologiaTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PSICOLOGIATXT)
                Dim Vnutricion As New SqlParameter("@nutricion", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUTRICION)
                Dim VnutricionTxt As New SqlParameter("@nutricionTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NUTRICIONTXT)
                Dim Vmusicoterapia As New SqlParameter("@musicoterapia", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MUSICOTERAPIA)
                Dim VmusicoterapiaTxt As New SqlParameter("@musicoterapiaTxt", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MUSICOTERAPIATXT)
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VusuarioModifica As New SqlParameter("@usuarioModifica", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIOMODIFICA)
                Dim VTipo As New SqlParameter("@Tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vid, Vprorroga_id, Vevolucion, VkinesioMuscular, VkinesioMuscularTxt, Vfono, VfonoTxt, VterapiaOcup, VterapiaOcupTxt, Vpsicologia, VpsicologiaTxt, Vnutricion, VnutricionTxt, Vmusicoterapia, VmusicoterapiaTxt, VfechaModificacion, VusuarioModifica, VTipo, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRORROGASITEM)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRORROGASITEM
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGASITEM
        ''' Fecha de Creación  : jueves, 25 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGASITEM. </remarks>
        Public Class ColumnNames
            Public Const ID As String = "ID"
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const EVOLUCION As String = "EVOLUCION"
            Public Const KINESIOMUSCULAR As String = "KINESIOMUSCULAR"
            Public Const KINESIOMUSCULARTXT As String = "KINESIOMUSCULARTXT"
            Public Const FONO As String = "FONO"
            Public Const FONOTXT As String = "FONOTXT"
            Public Const TERAPIAOCUP As String = "TERAPIAOCUP"
            Public Const TERAPIAOCUPTXT As String = "TERAPIAOCUPTXT"
            Public Const PSICOLOGIA As String = "PSICOLOGIA"
            Public Const PSICOLOGIATXT As String = "PSICOLOGIATXT"
            Public Const NUTRICION As String = "NUTRICION"
            Public Const NUTRICIONTXT As String = "NUTRICIONTXT"
            Public Const MUSICOTERAPIA As String = "MUSICOTERAPIA"
            Public Const MUSICOTERAPIATXT As String = "MUSICOTERAPIATXT"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const USUARIOMODIFICA As String = "USUARIOMODIFICA"
            Public Const TIPO As String = "TIPO"
        End Class ' ColumnNames
    End Class ' PRORROGASITEM
    Public Class PRORROGAS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            prorroga_id
            paciente_id
            fechaProrroga
            usuario_id
            antecedentes
            estadoAlIngreso
            estadoProrroga
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRORROGAS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRORROGAS) As Entities.Tables.PRORROGAS
            Dim result As Boolean

            Try
                _commandText = "_PRORROGAS_ADD"
                Dim vPKprorroga_id As New SqlParameter("@prorroga_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VfechaProrroga As New SqlParameter("@fechaProrroga", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAPRORROGA = Date.MinValue, Nothing, Item.FECHAPRORROGA))
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vantecedentes As New SqlParameter("@antecedentes", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANTECEDENTES)
                Dim VestadoAlIngreso As New SqlParameter("@estadoAlIngreso", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADOALINGRESO)
                Dim VestadoProrroga As New SqlParameter("@estadoProrroga", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADOPRORROGA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKprorroga_id, Vpaciente_id, VfechaProrroga, Vusuario_id, Vantecedentes, VestadoAlIngreso, VestadoProrroga, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PRORROGA_ID = vPKprorroga_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRORROGAS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Prorrogas_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRORROGAS
                    NewItem.PRORROGA_ID = IIf(Convert.IsDBNull(dr("prorroga_id")), Nothing, dr("prorroga_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.FECHAPRORROGA = IIf(Convert.IsDBNull(dr("fechaProrroga")), Nothing, dr("fechaProrroga"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.ANTECEDENTES = IIf(Convert.IsDBNull(dr("antecedentes")), Nothing, dr("antecedentes"))
                    NewItem.ESTADOALINGRESO = IIf(Convert.IsDBNull(dr("estadoAlIngreso")), Nothing, dr("estadoAlIngreso"))
                    NewItem.ESTADOPRORROGA = IIf(Convert.IsDBNull(dr("estadoProrroga")), Nothing, dr("estadoProrroga"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRORROGAS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRORROGAS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRORROGAS) As Boolean

            Try
                _commandText = "_Prorrogas_REMOVE"
                Dim Vprorroga_id As New SqlParameter("@prorroga_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRORROGA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vprorroga_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Prorrogas_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRORROGAS) As Boolean

            Try
                _commandText = "_Prorrogas_UPDATE"

                Dim Vprorroga_id As New SqlParameter("@prorroga_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRORROGA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VfechaProrroga As New SqlParameter("@fechaProrroga", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAPRORROGA = Date.MinValue, Nothing, Item.FECHAPRORROGA))
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vantecedentes As New SqlParameter("@antecedentes", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ANTECEDENTES)
                Dim VestadoAlIngreso As New SqlParameter("@estadoAlIngreso", SqlDbType.Text, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADOALINGRESO)
                Dim VestadoProrroga As New SqlParameter("@estadoProrroga", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADOPRORROGA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vprorroga_id, Vpaciente_id, VfechaProrroga, Vusuario_id, Vantecedentes, VestadoAlIngreso, VestadoProrroga, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRORROGAS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRORROGAS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRORROGAS
        ''' Fecha de Creación  : jueves, 25 de agosto de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRORROGAS. </remarks>
        Public Class ColumnNames
            Public Const PRORROGA_ID As String = "PRORROGA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const FECHAPRORROGA As String = "FECHAPRORROGA"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const ANTECEDENTES As String = "ANTECEDENTES"
            Public Const ESTADOALINGRESO As String = "ESTADOALINGRESO"
            Public Const ESTADOPRORROGA As String = "ESTADOPRORROGA"
        End Class ' ColumnNames
    End Class ' PRORROGAS
    Public Class HC
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            HC_id
            paciente_id
            tipo
            fecha
            usuario_id
            texto
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.HC)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.HC) As Entities.Tables.HC
            Dim result As Boolean

            Try
                _commandText = "_HC_ADD"
                Dim vPKHC_id As New SqlParameter("@HC_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vtipo As New SqlParameter("@tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vtexto As New SqlParameter("@texto", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEXTO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKHC_id, Vpaciente_id, Vtipo, Vfecha, Vusuario_id, Vtexto, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.HC_ID = vPKHC_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.HC)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_HC_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.HC
                    NewItem.HC_ID = IIf(Convert.IsDBNull(dr("HC_id")), Nothing, dr("HC_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.TIPO = IIf(Convert.IsDBNull(dr("tipo")), Nothing, dr("tipo"))
                    NewItem.FECHA = IIf(Convert.IsDBNull(dr("fecha")), Nothing, dr("fecha"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.TEXTO = IIf(Convert.IsDBNull(dr("texto")), Nothing, dr("texto"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "HC")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.HC) As Boolean

            Try
                _commandText = "_HC_REMOVE"
                Dim VHC_id As New SqlParameter("@HC_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HC_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VHC_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_HC_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.HC) As Boolean

            Try
                _commandText = "_HC_UPDATE"

                Dim VHC_id As New SqlParameter("@HC_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HC_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vtipo As New SqlParameter("@tipo", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim Vfecha As New SqlParameter("@fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHA = Date.MinValue, Nothing, Item.FECHA))
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Vtexto As New SqlParameter("@texto", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TEXTO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VHC_id, Vpaciente_id, Vtipo, Vfecha, Vusuario_id, Vtexto, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.HC)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.HC
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla HC
        ''' Fecha de Creación  : martes, 6 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla HC. </remarks>
        Public Class ColumnNames
            Public Const HC_ID As String = "HC_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const TIPO As String = "TIPO"
            Public Const FECHA As String = "FECHA"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const TEXTO As String = "TEXTO"
        End Class ' ColumnNames
    End Class ' HC
    Public Class SECTORES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            sector_id
            Descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.SECTORES)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.SECTORES) As Entities.Tables.SECTORES
            Dim result As Boolean

            Try
                _commandText = "_SECTORES_ADD"
                Dim vPKsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKsector_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.SECTOR_ID = vPKsector_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.SECTORES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Sectores_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.SECTORES
                    NewItem.SECTOR_ID = IIf(Convert.IsDBNull(dr("sector_id")), Nothing, dr("sector_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("Descripcion")), Nothing, dr("Descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "SECTORES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "SECTORES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.SECTORES) As Boolean

            Try
                _commandText = "_Sectores_REMOVE"
                Dim Vsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsector_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Sectores_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.SECTORES) As Boolean

            Try
                _commandText = "_Sectores_UPDATE"

                Dim Vsector_id As New SqlParameter("@sector_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECTOR_ID)
                Dim VDescripcion As New SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vsector_id, VDescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.SECTORES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.SECTORES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla SECTORES
        ''' Fecha de Creación  : martes, 6 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla SECTORES. </remarks>
        Public Class ColumnNames
            Public Const SECTOR_ID As String = "SECTOR_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' SECTORES
    Public Class ENFERMERIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            enfermeria_id
            paciente_id
            medicamento_id
            dosis
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            HS_SH
            observacion
            usuario_id
            fechaAltaSistema
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.ENFERMERIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.ENFERMERIA) As Entities.Tables.ENFERMERIA
            Dim result As Boolean

            Try
                _commandText = "_ENFERMERIA_ADD"
                Dim vPKenfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.NChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKenfermeria_id, Vpaciente_id, Vmedicamento_id, Vdosis, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vobservacion, Vusuario_id, VfechaAltaSistema, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ENFERMERIA_ID = vPKenfermeria_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.ENFERMERIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Enfermeria_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.ENFERMERIA
                    NewItem.ENFERMERIA_ID = IIf(Convert.IsDBNull(dr("enfermeria_id")), Nothing, dr("enfermeria_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.MEDICAMENTO_ID = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.DOSIS = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.HS_SH = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ENFERMERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "ENFERMERIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.ENFERMERIA) As Boolean

            Try
                _commandText = "_Enfermeria_REMOVE"
                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Venfermeria_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Enfermeria_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.ENFERMERIA) As Boolean

            Try
                _commandText = "_Enfermeria_UPDATE"

                Dim Venfermeria_id As New SqlParameter("@enfermeria_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ENFERMERIA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.NChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Venfermeria_id, Vpaciente_id, Vmedicamento_id, Vdosis, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vobservacion, Vusuario_id, VfechaAltaSistema, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.ENFERMERIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.ENFERMERIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla ENFERMERIA
        ''' Fecha de Creación  : jueves, 8 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla ENFERMERIA. </remarks>
        Public Class ColumnNames
            Public Const ENFERMERIA_ID As String = "ENFERMERIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const DOSIS As String = "DOSIS"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
        End Class ' ColumnNames
    End Class ' ENFERMERIA
    Public Class FARMACIA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            farmacia_id
            paciente_id
            medicamento_id
            dosis
            HS_08
            HS_09
            HS_10
            HS_11
            HS_12
            HS_13
            HS_14
            HS_15
            HS_16
            HS_17
            HS_18
            HS_19
            HS_20
            HS_21
            HS_22
            HS_23
            HS_24
            HS_01
            HS_02
            HS_03
            HS_04
            HS_05
            HS_06
            HS_07
            HS_SH
            observacion
            usuario_id
            fechaAltaSistema
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.FARMACIA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.FARMACIA) As Entities.Tables.FARMACIA
            Dim result As Boolean

            Try
                _commandText = "_FARMACIA_ADD"
                Dim vPKfarmacia_id As New SqlParameter("@farmacia_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKfarmacia_id, Vpaciente_id, Vmedicamento_id, Vdosis, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vobservacion, Vusuario_id, VfechaAltaSistema, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.FARMACIA_ID = vPKfarmacia_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.FARMACIA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_Farmacia_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.FARMACIA
                    NewItem.FARMACIA_ID = IIf(Convert.IsDBNull(dr("farmacia_id")), Nothing, dr("farmacia_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.MEDICAMENTO_ID = IIf(Convert.IsDBNull(dr("medicamento_id")), Nothing, dr("medicamento_id"))
                    NewItem.DOSIS = IIf(Convert.IsDBNull(dr("dosis")), Nothing, dr("dosis"))
                    NewItem.HS_08 = IIf(Convert.IsDBNull(dr("HS_08")), Nothing, dr("HS_08"))
                    NewItem.HS_09 = IIf(Convert.IsDBNull(dr("HS_09")), Nothing, dr("HS_09"))
                    NewItem.HS_10 = IIf(Convert.IsDBNull(dr("HS_10")), Nothing, dr("HS_10"))
                    NewItem.HS_11 = IIf(Convert.IsDBNull(dr("HS_11")), Nothing, dr("HS_11"))
                    NewItem.HS_12 = IIf(Convert.IsDBNull(dr("HS_12")), Nothing, dr("HS_12"))
                    NewItem.HS_13 = IIf(Convert.IsDBNull(dr("HS_13")), Nothing, dr("HS_13"))
                    NewItem.HS_14 = IIf(Convert.IsDBNull(dr("HS_14")), Nothing, dr("HS_14"))
                    NewItem.HS_15 = IIf(Convert.IsDBNull(dr("HS_15")), Nothing, dr("HS_15"))
                    NewItem.HS_16 = IIf(Convert.IsDBNull(dr("HS_16")), Nothing, dr("HS_16"))
                    NewItem.HS_17 = IIf(Convert.IsDBNull(dr("HS_17")), Nothing, dr("HS_17"))
                    NewItem.HS_18 = IIf(Convert.IsDBNull(dr("HS_18")), Nothing, dr("HS_18"))
                    NewItem.HS_19 = IIf(Convert.IsDBNull(dr("HS_19")), Nothing, dr("HS_19"))
                    NewItem.HS_20 = IIf(Convert.IsDBNull(dr("HS_20")), Nothing, dr("HS_20"))
                    NewItem.HS_21 = IIf(Convert.IsDBNull(dr("HS_21")), Nothing, dr("HS_21"))
                    NewItem.HS_22 = IIf(Convert.IsDBNull(dr("HS_22")), Nothing, dr("HS_22"))
                    NewItem.HS_23 = IIf(Convert.IsDBNull(dr("HS_23")), Nothing, dr("HS_23"))
                    NewItem.HS_24 = IIf(Convert.IsDBNull(dr("HS_24")), Nothing, dr("HS_24"))
                    NewItem.HS_01 = IIf(Convert.IsDBNull(dr("HS_01")), Nothing, dr("HS_01"))
                    NewItem.HS_02 = IIf(Convert.IsDBNull(dr("HS_02")), Nothing, dr("HS_02"))
                    NewItem.HS_03 = IIf(Convert.IsDBNull(dr("HS_03")), Nothing, dr("HS_03"))
                    NewItem.HS_04 = IIf(Convert.IsDBNull(dr("HS_04")), Nothing, dr("HS_04"))
                    NewItem.HS_05 = IIf(Convert.IsDBNull(dr("HS_05")), Nothing, dr("HS_05"))
                    NewItem.HS_06 = IIf(Convert.IsDBNull(dr("HS_06")), Nothing, dr("HS_06"))
                    NewItem.HS_07 = IIf(Convert.IsDBNull(dr("HS_07")), Nothing, dr("HS_07"))
                    NewItem.HS_SH = IIf(Convert.IsDBNull(dr("HS_SH")), Nothing, dr("HS_SH"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "FARMACIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "FARMACIA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.FARMACIA) As Boolean

            Try
                _commandText = "_Farmacia_REMOVE"
                Dim Vfarmacia_id As New SqlParameter("@farmacia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FARMACIA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vfarmacia_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_Farmacia_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.FARMACIA) As Boolean

            Try
                _commandText = "_Farmacia_UPDATE"

                Dim Vfarmacia_id As New SqlParameter("@farmacia_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FARMACIA_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vmedicamento_id As New SqlParameter("@medicamento_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MEDICAMENTO_ID)
                Dim Vdosis As New SqlParameter("@dosis", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DOSIS)
                Dim VHS_08 As New SqlParameter("@HS_08", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_08)
                Dim VHS_09 As New SqlParameter("@HS_09", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_09)
                Dim VHS_10 As New SqlParameter("@HS_10", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_10)
                Dim VHS_11 As New SqlParameter("@HS_11", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_11)
                Dim VHS_12 As New SqlParameter("@HS_12", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_12)
                Dim VHS_13 As New SqlParameter("@HS_13", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_13)
                Dim VHS_14 As New SqlParameter("@HS_14", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_14)
                Dim VHS_15 As New SqlParameter("@HS_15", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_15)
                Dim VHS_16 As New SqlParameter("@HS_16", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_16)
                Dim VHS_17 As New SqlParameter("@HS_17", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_17)
                Dim VHS_18 As New SqlParameter("@HS_18", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_18)
                Dim VHS_19 As New SqlParameter("@HS_19", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_19)
                Dim VHS_20 As New SqlParameter("@HS_20", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_20)
                Dim VHS_21 As New SqlParameter("@HS_21", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_21)
                Dim VHS_22 As New SqlParameter("@HS_22", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_22)
                Dim VHS_23 As New SqlParameter("@HS_23", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_23)
                Dim VHS_24 As New SqlParameter("@HS_24", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_24)
                Dim VHS_01 As New SqlParameter("@HS_01", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_01)
                Dim VHS_02 As New SqlParameter("@HS_02", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_02)
                Dim VHS_03 As New SqlParameter("@HS_03", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_03)
                Dim VHS_04 As New SqlParameter("@HS_04", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_04)
                Dim VHS_05 As New SqlParameter("@HS_05", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_05)
                Dim VHS_06 As New SqlParameter("@HS_06", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_06)
                Dim VHS_07 As New SqlParameter("@HS_07", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_07)
                Dim VHS_SH As New SqlParameter("@HS_SH", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.HS_SH)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vfarmacia_id, Vpaciente_id, Vmedicamento_id, Vdosis, VHS_08, VHS_09, VHS_10, VHS_11, VHS_12, VHS_13, VHS_14, VHS_15, VHS_16, VHS_17, VHS_18, VHS_19, VHS_20, VHS_21, VHS_22, VHS_23, VHS_24, VHS_01, VHS_02, VHS_03, VHS_04, VHS_05, VHS_06, VHS_07, VHS_SH, Vobservacion, Vusuario_id, VfechaAltaSistema, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.FARMACIA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.FARMACIA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla FARMACIA
        ''' Fecha de Creación  : jueves, 8 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla FARMACIA. </remarks>
        Public Class ColumnNames
            Public Const FARMACIA_ID As String = "FARMACIA_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const MEDICAMENTO_ID As String = "MEDICAMENTO_ID"
            Public Const DOSIS As String = "DOSIS"
            Public Const HS_08 As String = "HS_08"
            Public Const HS_09 As String = "HS_09"
            Public Const HS_10 As String = "HS_10"
            Public Const HS_11 As String = "HS_11"
            Public Const HS_12 As String = "HS_12"
            Public Const HS_13 As String = "HS_13"
            Public Const HS_14 As String = "HS_14"
            Public Const HS_15 As String = "HS_15"
            Public Const HS_16 As String = "HS_16"
            Public Const HS_17 As String = "HS_17"
            Public Const HS_18 As String = "HS_18"
            Public Const HS_19 As String = "HS_19"
            Public Const HS_20 As String = "HS_20"
            Public Const HS_21 As String = "HS_21"
            Public Const HS_22 As String = "HS_22"
            Public Const HS_23 As String = "HS_23"
            Public Const HS_24 As String = "HS_24"
            Public Const HS_01 As String = "HS_01"
            Public Const HS_02 As String = "HS_02"
            Public Const HS_03 As String = "HS_03"
            Public Const HS_04 As String = "HS_04"
            Public Const HS_05 As String = "HS_05"
            Public Const HS_06 As String = "HS_06"
            Public Const HS_07 As String = "HS_07"
            Public Const HS_SH As String = "HS_SH"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
        End Class ' ColumnNames
    End Class ' FARMACIA
    Public Class PRO_PROCEDIMIENTODESCARTABLE
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            procedimiento_id
            descartable_id
            imprimible
            cantidad
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE) As Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE
            Dim result As Boolean

            Try
                _commandText = "_PRO_PROCEDIMIENTODESCARTABLE_ADD"
                Dim vPKprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim vPKdescartable_id As New SqlParameter("@descartable_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCARTABLE_ID)
                Dim Vimprimible As New SqlParameter("@imprimible", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IMPRIMIBLE)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKprocedimiento_id, vPKdescartable_id, Vimprimible, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PROCEDIMIENTO_ID = vPKprocedimiento_id.Value
                    Item.DESCARTABLE_ID = vPKdescartable_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_ProcedimientoDescartable_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.DESCARTABLE_ID = IIf(Convert.IsDBNull(dr("descartable_id")), Nothing, dr("descartable_id"))
                    NewItem.IMPRIMIBLE = IIf(Convert.IsDBNull(dr("imprimible")), Nothing, dr("imprimible"))
                    NewItem.CANTIDAD = IIf(Convert.IsDBNull(dr("cantidad")), Nothing, dr("cantidad"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PROCEDIMIENTODESCARTABLE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PROCEDIMIENTODESCARTABLE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE) As Boolean

            Try
                _commandText = "_PRO_ProcedimientoDescartable_REMOVE"
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vdescartable_id As New SqlParameter("@descartable_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCARTABLE_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vprocedimiento_id, Vdescartable_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_ProcedimientoDescartable_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE) As Boolean

            Try
                _commandText = "_PRO_ProcedimientoDescartable_UPDATE"

                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vdescartable_id As New SqlParameter("@descartable_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCARTABLE_ID)
                Dim Vimprimible As New SqlParameter("@imprimible", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.IMPRIMIBLE)
                Dim Vcantidad As New SqlParameter("@cantidad", SqlDbType.Decimal, 18, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.CANTIDAD)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vprocedimiento_id, Vdescartable_id, Vimprimible, Vcantidad, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_PROCEDIMIENTODESCARTABLE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_PROCEDIMIENTODESCARTABLE
        ''' Fecha de Creación  : jueves, 8 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_PROCEDIMIENTODESCARTABLE. </remarks>
        Public Class ColumnNames
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const DESCARTABLE_ID As String = "DESCARTABLE_ID"
            Public Const IMPRIMIBLE As String = "IMPRIMIBLE"
            Public Const CANTIDAD As String = "CANTIDAD"
        End Class ' ColumnNames
    End Class ' PRO_PROCEDIMIENTODESCARTABLE
    Public Class PRO_PROCEDIMIENTO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            procedimiento_id
            descripcion
            tipoProcedimiento_id
            inactivo
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_PROCEDIMIENTO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_PROCEDIMIENTO) As Entities.Tables.PRO_PROCEDIMIENTO
            Dim result As Boolean

            Try
                _commandText = "_PRO_PROCEDIMIENTO_ADD"
                Dim vPKprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VtipoProcedimiento_id As New SqlParameter("@tipoProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMIENTO_ID)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKprocedimiento_id, Vdescripcion, VtipoProcedimiento_id, Vinactivo, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PROCEDIMIENTO_ID = vPKprocedimiento_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_PROCEDIMIENTO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Procedimiento_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_PROCEDIMIENTO
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    NewItem.TIPOPROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("tipoProcedimiento_id")), Nothing, dr("tipoProcedimiento_id"))
                    NewItem.INACTIVO = IIf(Convert.IsDBNull(dr("inactivo")), Nothing, dr("inactivo"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PROCEDIMIENTO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_PROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_Procedimiento_REMOVE"
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vprocedimiento_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Procedimiento_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_PROCEDIMIENTO) As Boolean

            Try
                _commandText = "_PRO_Procedimiento_UPDATE"

                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim VtipoProcedimiento_id As New SqlParameter("@tipoProcedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPOPROCEDIMIENTO_ID)
                Dim Vinactivo As New SqlParameter("@inactivo", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.INACTIVO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vprocedimiento_id, Vdescripcion, VtipoProcedimiento_id, Vinactivo, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_PROCEDIMIENTO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_PROCEDIMIENTO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_PROCEDIMIENTO
        ''' Fecha de Creación  : viernes, 9 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_PROCEDIMIENTO. </remarks>
        Public Class ColumnNames
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
            Public Const TIPOPROCEDIMIENTO_ID As String = "TIPOPROCEDIMIENTO_ID"
            Public Const INACTIVO As String = "INACTIVO"
        End Class ' ColumnNames
    End Class ' PRO_PROCEDIMIENTO
    Public Class PRO_FRASCO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            frasco_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_FRASCO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_FRASCO) As Entities.Tables.PRO_FRASCO
            Dim result As Boolean

            Try
                _commandText = "_PRO_FRASCO_ADD"
                Dim vPKfrasco_id As New SqlParameter("@frasco_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKfrasco_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.FRASCO_ID = vPKfrasco_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_FRASCO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Frasco_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_FRASCO
                    NewItem.FRASCO_ID = IIf(Convert.IsDBNull(dr("frasco_id")), Nothing, dr("frasco_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_FRASCO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_FRASCO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_FRASCO) As Boolean

            Try
                _commandText = "_PRO_Frasco_REMOVE"
                Dim Vfrasco_id As New SqlParameter("@frasco_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vfrasco_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Frasco_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_FRASCO) As Boolean

            Try
                _commandText = "_PRO_Frasco_UPDATE"

                Dim Vfrasco_id As New SqlParameter("@frasco_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCO_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vfrasco_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_FRASCO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_FRASCO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_FRASCO
        ''' Fecha de Creación  : jueves, 15 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_FRASCO. </remarks>
        Public Class ColumnNames
            Public Const FRASCO_ID As String = "FRASCO_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' PRO_FRASCO
    Public Class PRO_GOTA_HORA
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            gotaHora_id
            descripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_GOTA_HORA)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_GOTA_HORA) As Entities.Tables.PRO_GOTA_HORA
            Dim result As Boolean

            Try
                _commandText = "_PRO_GOTA_HORA_ADD"
                Dim vPKgotaHora_id As New SqlParameter("@gotaHora_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKgotaHora_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.GOTAHORA_ID = vPKgotaHora_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_GOTA_HORA)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Gota_Hora_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_GOTA_HORA
                    NewItem.GOTAHORA_ID = IIf(Convert.IsDBNull(dr("gotaHora_id")), Nothing, dr("gotaHora_id"))
                    NewItem.DESCRIPCION = IIf(Convert.IsDBNull(dr("descripcion")), Nothing, dr("descripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_GOTA_HORA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_GOTA_HORA")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_GOTA_HORA) As Boolean

            Try
                _commandText = "_PRO_Gota_Hora_REMOVE"
                Dim VgotaHora_id As New SqlParameter("@gotaHora_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOTAHORA_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VgotaHora_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Gota_Hora_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_GOTA_HORA) As Boolean

            Try
                _commandText = "_PRO_Gota_Hora_UPDATE"

                Dim VgotaHora_id As New SqlParameter("@gotaHora_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOTAHORA_ID)
                Dim Vdescripcion As New SqlParameter("@descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCION)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VgotaHora_id, Vdescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_GOTA_HORA)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_GOTA_HORA
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_GOTA_HORA
        ''' Fecha de Creación  : jueves, 15 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_GOTA_HORA. </remarks>
        Public Class ColumnNames
            Public Const GOTAHORA_ID As String = "GOTAHORA_ID"
            Public Const DESCRIPCION As String = "DESCRIPCION"
        End Class ' ColumnNames
    End Class ' PRO_GOTA_HORA
    Public Class PRO_HISTORIAL_PHP
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            php_id
            paciente_id
            procedimiento_id
            ml_100
            ml_250
            ml_500
            ml_1000
            bic
            gotaHora_id
            mlHora
            mlDia
            frascoUno_id
            aditivoUno_id
            frascoDos_id
            aditivoDos_id
            frascoTres_id
            aditivoTres_id
            frascoCuatro_id
            aditivoCuatro_id
            frascoCinco_id
            aditivoCinco_id
            frascoSeis_id
            aditivoSeis_id
            frascoSiete_id
            aditivoSiete_id
            frascoOcho_id
            aditivoOcho_id
            frascoNueve_id
            aditivoNueve_id
            frascoDiez_id
            aditivoDiez_id
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_HISTORIAL_PHP)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_HISTORIAL_PHP) As Entities.Tables.PRO_HISTORIAL_PHP
            Dim result As Boolean

            Try
                _commandText = "_PRO_HISTORIAL_PHP_ADD"
                Dim vPKphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vml_100 As New SqlParameter("@ml_100", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_100)
                Dim Vml_250 As New SqlParameter("@ml_250", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_250)
                Dim Vml_500 As New SqlParameter("@ml_500", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_500)
                Dim Vml_1000 As New SqlParameter("@ml_1000", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_1000)
                Dim Vbic As New SqlParameter("@bic", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BIC)
                Dim VgotaHora_id As New SqlParameter("@gotaHora_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOTAHORA_ID)
                Dim VmlHora As New SqlParameter("@mlHora", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLHORA)
                Dim VmlDia As New SqlParameter("@mlDia", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLDIA)
                Dim VfrascoUno_id As New SqlParameter("@frascoUno_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOUNO_ID)
                Dim VaditivoUno_id As New SqlParameter("@aditivoUno_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOUNO_ID)
                Dim VfrascoDos_id As New SqlParameter("@frascoDos_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODOS_ID)
                Dim VaditivoDos_id As New SqlParameter("@aditivoDos_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODOS_ID)
                Dim VfrascoTres_id As New SqlParameter("@frascoTres_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOTRES_ID)
                Dim VaditivoTres_id As New SqlParameter("@aditivoTres_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOTRES_ID)
                Dim VfrascoCuatro_id As New SqlParameter("@frascoCuatro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCUATRO_ID)
                Dim VaditivoCuatro_id As New SqlParameter("@aditivoCuatro_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCUATRO_ID)
                Dim VfrascoCinco_id As New SqlParameter("@frascoCinco_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCINCO_ID)
                Dim VaditivoCinco_id As New SqlParameter("@aditivoCinco_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCINCO_ID)
                Dim VfrascoSeis_id As New SqlParameter("@frascoSeis_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSEIS_ID)
                Dim VaditivoSeis_id As New SqlParameter("@aditivoSeis_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSEIS_ID)
                Dim VfrascoSiete_id As New SqlParameter("@frascoSiete_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSIETE_ID)
                Dim VaditivoSiete_id As New SqlParameter("@aditivoSiete_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSIETE_ID)
                Dim VfrascoOcho_id As New SqlParameter("@frascoOcho_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOOCHO_ID)
                Dim VaditivoOcho_id As New SqlParameter("@aditivoOcho_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOOCHO_ID)
                Dim VfrascoNueve_id As New SqlParameter("@frascoNueve_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCONUEVE_ID)
                Dim VaditivoNueve_id As New SqlParameter("@aditivoNueve_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVONUEVE_ID)
                Dim VfrascoDiez_id As New SqlParameter("@frascoDiez_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODIEZ_ID)
                Dim VaditivoDiez_id As New SqlParameter("@aditivoDiez_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODIEZ_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKphp_id, Vpaciente_id, Vprocedimiento_id, Vml_100, Vml_250, Vml_500, Vml_1000, Vbic, VgotaHora_id, VmlHora, VmlDia, VfrascoUno_id, VaditivoUno_id, VfrascoDos_id, VaditivoDos_id, VfrascoTres_id, VaditivoTres_id, VfrascoCuatro_id, VaditivoCuatro_id, VfrascoCinco_id, VaditivoCinco_id, VfrascoSeis_id, VaditivoSeis_id, VfrascoSiete_id, VaditivoSiete_id, VfrascoOcho_id, VaditivoOcho_id, VfrascoNueve_id, VaditivoNueve_id, VfrascoDiez_id, VaditivoDiez_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PHP_ID = vPKphp_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_HISTORIAL_PHP)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Historial_Php_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_HISTORIAL_PHP
                    NewItem.PHP_ID = IIf(Convert.IsDBNull(dr("php_id")), Nothing, dr("php_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.ML_100 = IIf(Convert.IsDBNull(dr("ml_100")), Nothing, dr("ml_100"))
                    NewItem.ML_250 = IIf(Convert.IsDBNull(dr("ml_250")), Nothing, dr("ml_250"))
                    NewItem.ML_500 = IIf(Convert.IsDBNull(dr("ml_500")), Nothing, dr("ml_500"))
                    NewItem.ML_1000 = IIf(Convert.IsDBNull(dr("ml_1000")), Nothing, dr("ml_1000"))
                    NewItem.BIC = IIf(Convert.IsDBNull(dr("bic")), Nothing, dr("bic"))
                    NewItem.GOTAHORA_ID = IIf(Convert.IsDBNull(dr("gotaHora_id")), Nothing, dr("gotaHora_id"))
                    NewItem.MLHORA = IIf(Convert.IsDBNull(dr("mlHora")), Nothing, dr("mlHora"))
                    NewItem.MLDIA = IIf(Convert.IsDBNull(dr("mlDia")), Nothing, dr("mlDia"))
                    NewItem.FRASCOUNO_ID = IIf(Convert.IsDBNull(dr("frascoUno_id")), Nothing, dr("frascoUno_id"))
                    NewItem.ADITIVOUNO_ID = IIf(Convert.IsDBNull(dr("aditivoUno_id")), Nothing, dr("aditivoUno_id"))
                    NewItem.FRASCODOS_ID = IIf(Convert.IsDBNull(dr("frascoDos_id")), Nothing, dr("frascoDos_id"))
                    NewItem.ADITIVODOS_ID = IIf(Convert.IsDBNull(dr("aditivoDos_id")), Nothing, dr("aditivoDos_id"))
                    NewItem.FRASCOTRES_ID = IIf(Convert.IsDBNull(dr("frascoTres_id")), Nothing, dr("frascoTres_id"))
                    NewItem.ADITIVOTRES_ID = IIf(Convert.IsDBNull(dr("aditivoTres_id")), Nothing, dr("aditivoTres_id"))
                    NewItem.FRASCOCUATRO_ID = IIf(Convert.IsDBNull(dr("frascoCuatro_id")), Nothing, dr("frascoCuatro_id"))
                    NewItem.ADITIVOCUATRO_ID = IIf(Convert.IsDBNull(dr("aditivoCuatro_id")), Nothing, dr("aditivoCuatro_id"))
                    NewItem.FRASCOCINCO_ID = IIf(Convert.IsDBNull(dr("frascoCinco_id")), Nothing, dr("frascoCinco_id"))
                    NewItem.ADITIVOCINCO_ID = IIf(Convert.IsDBNull(dr("aditivoCinco_id")), Nothing, dr("aditivoCinco_id"))
                    NewItem.FRASCOSEIS_ID = IIf(Convert.IsDBNull(dr("frascoSeis_id")), Nothing, dr("frascoSeis_id"))
                    NewItem.ADITIVOSEIS_ID = IIf(Convert.IsDBNull(dr("aditivoSeis_id")), Nothing, dr("aditivoSeis_id"))
                    NewItem.FRASCOSIETE_ID = IIf(Convert.IsDBNull(dr("frascoSiete_id")), Nothing, dr("frascoSiete_id"))
                    NewItem.ADITIVOSIETE_ID = IIf(Convert.IsDBNull(dr("aditivoSiete_id")), Nothing, dr("aditivoSiete_id"))
                    NewItem.FRASCOOCHO_ID = IIf(Convert.IsDBNull(dr("frascoOcho_id")), Nothing, dr("frascoOcho_id"))
                    NewItem.ADITIVOOCHO_ID = IIf(Convert.IsDBNull(dr("aditivoOcho_id")), Nothing, dr("aditivoOcho_id"))
                    NewItem.FRASCONUEVE_ID = IIf(Convert.IsDBNull(dr("frascoNueve_id")), Nothing, dr("frascoNueve_id"))
                    NewItem.ADITIVONUEVE_ID = IIf(Convert.IsDBNull(dr("aditivoNueve_id")), Nothing, dr("aditivoNueve_id"))
                    NewItem.FRASCODIEZ_ID = IIf(Convert.IsDBNull(dr("frascoDiez_id")), Nothing, dr("frascoDiez_id"))
                    NewItem.ADITIVODIEZ_ID = IIf(Convert.IsDBNull(dr("aditivoDiez_id")), Nothing, dr("aditivoDiez_id"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_PHP")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_HISTORIAL_PHP")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_HISTORIAL_PHP) As Boolean

            Try
                _commandText = "_PRO_Historial_Php_REMOVE"
                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vphp_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Historial_Php_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_HISTORIAL_PHP) As Boolean

            Try
                _commandText = "_PRO_Historial_Php_UPDATE"

                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vml_100 As New SqlParameter("@ml_100", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_100)
                Dim Vml_250 As New SqlParameter("@ml_250", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_250)
                Dim Vml_500 As New SqlParameter("@ml_500", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_500)
                Dim Vml_1000 As New SqlParameter("@ml_1000", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_1000)
                Dim Vbic As New SqlParameter("@bic", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BIC)
                Dim VgotaHora_id As New SqlParameter("@gotaHora_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOTAHORA_ID)
                Dim VmlHora As New SqlParameter("@mlHora", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLHORA)
                Dim VmlDia As New SqlParameter("@mlDia", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLDIA)
                Dim VfrascoUno_id As New SqlParameter("@frascoUno_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOUNO_ID)
                Dim VaditivoUno_id As New SqlParameter("@aditivoUno_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOUNO_ID)
                Dim VfrascoDos_id As New SqlParameter("@frascoDos_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODOS_ID)
                Dim VaditivoDos_id As New SqlParameter("@aditivoDos_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODOS_ID)
                Dim VfrascoTres_id As New SqlParameter("@frascoTres_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOTRES_ID)
                Dim VaditivoTres_id As New SqlParameter("@aditivoTres_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOTRES_ID)
                Dim VfrascoCuatro_id As New SqlParameter("@frascoCuatro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCUATRO_ID)
                Dim VaditivoCuatro_id As New SqlParameter("@aditivoCuatro_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCUATRO_ID)
                Dim VfrascoCinco_id As New SqlParameter("@frascoCinco_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCINCO_ID)
                Dim VaditivoCinco_id As New SqlParameter("@aditivoCinco_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCINCO_ID)
                Dim VfrascoSeis_id As New SqlParameter("@frascoSeis_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSEIS_ID)
                Dim VaditivoSeis_id As New SqlParameter("@aditivoSeis_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSEIS_ID)
                Dim VfrascoSiete_id As New SqlParameter("@frascoSiete_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSIETE_ID)
                Dim VaditivoSiete_id As New SqlParameter("@aditivoSiete_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSIETE_ID)
                Dim VfrascoOcho_id As New SqlParameter("@frascoOcho_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOOCHO_ID)
                Dim VaditivoOcho_id As New SqlParameter("@aditivoOcho_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOOCHO_ID)
                Dim VfrascoNueve_id As New SqlParameter("@frascoNueve_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCONUEVE_ID)
                Dim VaditivoNueve_id As New SqlParameter("@aditivoNueve_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVONUEVE_ID)
                Dim VfrascoDiez_id As New SqlParameter("@frascoDiez_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODIEZ_ID)
                Dim VaditivoDiez_id As New SqlParameter("@aditivoDiez_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODIEZ_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vphp_id, Vpaciente_id, Vprocedimiento_id, Vml_100, Vml_250, Vml_500, Vml_1000, Vbic, VgotaHora_id, VmlHora, VmlDia, VfrascoUno_id, VaditivoUno_id, VfrascoDos_id, VaditivoDos_id, VfrascoTres_id, VaditivoTres_id, VfrascoCuatro_id, VaditivoCuatro_id, VfrascoCinco_id, VaditivoCinco_id, VfrascoSeis_id, VaditivoSeis_id, VfrascoSiete_id, VaditivoSiete_id, VfrascoOcho_id, VaditivoOcho_id, VfrascoNueve_id, VaditivoNueve_id, VfrascoDiez_id, VaditivoDiez_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_HISTORIAL_PHP)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_HISTORIAL_PHP
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_HISTORIAL_PHP
        ''' Fecha de Creación  : viernes, 16 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_HISTORIAL_PHP. </remarks>
        Public Class ColumnNames
            Public Const PHP_ID As String = "PHP_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const ML_100 As String = "ML_100"
            Public Const ML_250 As String = "ML_250"
            Public Const ML_500 As String = "ML_500"
            Public Const ML_1000 As String = "ML_1000"
            Public Const BIC As String = "BIC"
            Public Const GOTAHORA_ID As String = "GOTAHORA_ID"
            Public Const MLHORA As String = "MLHORA"
            Public Const MLDIA As String = "MLDIA"
            Public Const FRASCOUNO_ID As String = "FRASCOUNO_ID"
            Public Const ADITIVOUNO_ID As String = "ADITIVOUNO_ID"
            Public Const FRASCODOS_ID As String = "FRASCODOS_ID"
            Public Const ADITIVODOS_ID As String = "ADITIVODOS_ID"
            Public Const FRASCOTRES_ID As String = "FRASCOTRES_ID"
            Public Const ADITIVOTRES_ID As String = "ADITIVOTRES_ID"
            Public Const FRASCOCUATRO_ID As String = "FRASCOCUATRO_ID"
            Public Const ADITIVOCUATRO_ID As String = "ADITIVOCUATRO_ID"
            Public Const FRASCOCINCO_ID As String = "FRASCOCINCO_ID"
            Public Const ADITIVOCINCO_ID As String = "ADITIVOCINCO_ID"
            Public Const FRASCOSEIS_ID As String = "FRASCOSEIS_ID"
            Public Const ADITIVOSEIS_ID As String = "ADITIVOSEIS_ID"
            Public Const FRASCOSIETE_ID As String = "FRASCOSIETE_ID"
            Public Const ADITIVOSIETE_ID As String = "ADITIVOSIETE_ID"
            Public Const FRASCOOCHO_ID As String = "FRASCOOCHO_ID"
            Public Const ADITIVOOCHO_ID As String = "ADITIVOOCHO_ID"
            Public Const FRASCONUEVE_ID As String = "FRASCONUEVE_ID"
            Public Const ADITIVONUEVE_ID As String = "ADITIVONUEVE_ID"
            Public Const FRASCODIEZ_ID As String = "FRASCODIEZ_ID"
            Public Const ADITIVODIEZ_ID As String = "ADITIVODIEZ_ID"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_HISTORIAL_PHP
    Public Class PRO_PHP
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            php_id
            paciente_id
            procedimiento_id
            ml_100
            ml_250
            ml_500
            ml_1000
            bic
            gotaHora_id
            mlHora
            mlDia
            frascoUno_id
            aditivoUno_id
            frascoDos_id
            aditivoDos_id
            frascoTres_id
            aditivoTres_id
            frascoCuatro_id
            aditivoCuatro_id
            frascoCinco_id
            aditivoCinco_id
            frascoSeis_id
            aditivoSeis_id
            frascoSiete_id
            aditivoSiete_id
            frascoOcho_id
            aditivoOcho_id
            frascoNueve_id
            aditivoNueve_id
            frascoDiez_id
            aditivoDiez_id
            observacion
            usuario_id
            fechaAltaSistema
            fechaModificacion
            fechaBaja
            motivoBaja
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.PRO_PHP)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.PRO_PHP) As Entities.Tables.PRO_PHP
            Dim result As Boolean

            Try
                _commandText = "_PRO_PHP_ADD"
                Dim vPKphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vml_100 As New SqlParameter("@ml_100", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_100)
                Dim Vml_250 As New SqlParameter("@ml_250", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_250)
                Dim Vml_500 As New SqlParameter("@ml_500", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_500)
                Dim Vml_1000 As New SqlParameter("@ml_1000", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_1000)
                Dim Vbic As New SqlParameter("@bic", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BIC)
                Dim VgotaHora_id As New SqlParameter("@gotaHora_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOTAHORA_ID)
                Dim VmlHora As New SqlParameter("@mlHora", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLHORA)
                Dim VmlDia As New SqlParameter("@mlDia", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLDIA)
                Dim VfrascoUno_id As New SqlParameter("@frascoUno_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOUNO_ID)
                Dim VaditivoUno_id As New SqlParameter("@aditivoUno_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOUNO_ID)
                Dim VfrascoDos_id As New SqlParameter("@frascoDos_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODOS_ID)
                Dim VaditivoDos_id As New SqlParameter("@aditivoDos_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODOS_ID)
                Dim VfrascoTres_id As New SqlParameter("@frascoTres_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOTRES_ID)
                Dim VaditivoTres_id As New SqlParameter("@aditivoTres_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOTRES_ID)
                Dim VfrascoCuatro_id As New SqlParameter("@frascoCuatro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCUATRO_ID)
                Dim VaditivoCuatro_id As New SqlParameter("@aditivoCuatro_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCUATRO_ID)
                Dim VfrascoCinco_id As New SqlParameter("@frascoCinco_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCINCO_ID)
                Dim VaditivoCinco_id As New SqlParameter("@aditivoCinco_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCINCO_ID)
                Dim VfrascoSeis_id As New SqlParameter("@frascoSeis_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSEIS_ID)
                Dim VaditivoSeis_id As New SqlParameter("@aditivoSeis_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSEIS_ID)
                Dim VfrascoSiete_id As New SqlParameter("@frascoSiete_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSIETE_ID)
                Dim VaditivoSiete_id As New SqlParameter("@aditivoSiete_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSIETE_ID)
                Dim VfrascoOcho_id As New SqlParameter("@frascoOcho_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOOCHO_ID)
                Dim VaditivoOcho_id As New SqlParameter("@aditivoOcho_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOOCHO_ID)
                Dim VfrascoNueve_id As New SqlParameter("@frascoNueve_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCONUEVE_ID)
                Dim VaditivoNueve_id As New SqlParameter("@aditivoNueve_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVONUEVE_ID)
                Dim VfrascoDiez_id As New SqlParameter("@frascoDiez_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODIEZ_ID)
                Dim VaditivoDiez_id As New SqlParameter("@aditivoDiez_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODIEZ_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKphp_id, Vpaciente_id, Vprocedimiento_id, Vml_100, Vml_250, Vml_500, Vml_1000, Vbic, VgotaHora_id, VmlHora, VmlDia, VfrascoUno_id, VaditivoUno_id, VfrascoDos_id, VaditivoDos_id, VfrascoTres_id, VaditivoTres_id, VfrascoCuatro_id, VaditivoCuatro_id, VfrascoCinco_id, VaditivoCinco_id, VfrascoSeis_id, VaditivoSeis_id, VfrascoSiete_id, VaditivoSiete_id, VfrascoOcho_id, VaditivoOcho_id, VfrascoNueve_id, VaditivoNueve_id, VfrascoDiez_id, VaditivoDiez_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.PHP_ID = vPKphp_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.PRO_PHP)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_PRO_Php_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.PRO_PHP
                    NewItem.PHP_ID = IIf(Convert.IsDBNull(dr("php_id")), Nothing, dr("php_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PROCEDIMIENTO_ID = IIf(Convert.IsDBNull(dr("procedimiento_id")), Nothing, dr("procedimiento_id"))
                    NewItem.ML_100 = IIf(Convert.IsDBNull(dr("ml_100")), Nothing, dr("ml_100"))
                    NewItem.ML_250 = IIf(Convert.IsDBNull(dr("ml_250")), Nothing, dr("ml_250"))
                    NewItem.ML_500 = IIf(Convert.IsDBNull(dr("ml_500")), Nothing, dr("ml_500"))
                    NewItem.ML_1000 = IIf(Convert.IsDBNull(dr("ml_1000")), Nothing, dr("ml_1000"))
                    NewItem.BIC = IIf(Convert.IsDBNull(dr("bic")), Nothing, dr("bic"))
                    NewItem.GOTAHORA_ID = IIf(Convert.IsDBNull(dr("gotaHora_id")), Nothing, dr("gotaHora_id"))
                    NewItem.MLHORA = IIf(Convert.IsDBNull(dr("mlHora")), Nothing, dr("mlHora"))
                    NewItem.MLDIA = IIf(Convert.IsDBNull(dr("mlDia")), Nothing, dr("mlDia"))
                    NewItem.FRASCOUNO_ID = IIf(Convert.IsDBNull(dr("frascoUno_id")), Nothing, dr("frascoUno_id"))
                    NewItem.ADITIVOUNO_ID = IIf(Convert.IsDBNull(dr("aditivoUno_id")), Nothing, dr("aditivoUno_id"))
                    NewItem.FRASCODOS_ID = IIf(Convert.IsDBNull(dr("frascoDos_id")), Nothing, dr("frascoDos_id"))
                    NewItem.ADITIVODOS_ID = IIf(Convert.IsDBNull(dr("aditivoDos_id")), Nothing, dr("aditivoDos_id"))
                    NewItem.FRASCOTRES_ID = IIf(Convert.IsDBNull(dr("frascoTres_id")), Nothing, dr("frascoTres_id"))
                    NewItem.ADITIVOTRES_ID = IIf(Convert.IsDBNull(dr("aditivoTres_id")), Nothing, dr("aditivoTres_id"))
                    NewItem.FRASCOCUATRO_ID = IIf(Convert.IsDBNull(dr("frascoCuatro_id")), Nothing, dr("frascoCuatro_id"))
                    NewItem.ADITIVOCUATRO_ID = IIf(Convert.IsDBNull(dr("aditivoCuatro_id")), Nothing, dr("aditivoCuatro_id"))
                    NewItem.FRASCOCINCO_ID = IIf(Convert.IsDBNull(dr("frascoCinco_id")), Nothing, dr("frascoCinco_id"))
                    NewItem.ADITIVOCINCO_ID = IIf(Convert.IsDBNull(dr("aditivoCinco_id")), Nothing, dr("aditivoCinco_id"))
                    NewItem.FRASCOSEIS_ID = IIf(Convert.IsDBNull(dr("frascoSeis_id")), Nothing, dr("frascoSeis_id"))
                    NewItem.ADITIVOSEIS_ID = IIf(Convert.IsDBNull(dr("aditivoSeis_id")), Nothing, dr("aditivoSeis_id"))
                    NewItem.FRASCOSIETE_ID = IIf(Convert.IsDBNull(dr("frascoSiete_id")), Nothing, dr("frascoSiete_id"))
                    NewItem.ADITIVOSIETE_ID = IIf(Convert.IsDBNull(dr("aditivoSiete_id")), Nothing, dr("aditivoSiete_id"))
                    NewItem.FRASCOOCHO_ID = IIf(Convert.IsDBNull(dr("frascoOcho_id")), Nothing, dr("frascoOcho_id"))
                    NewItem.ADITIVOOCHO_ID = IIf(Convert.IsDBNull(dr("aditivoOcho_id")), Nothing, dr("aditivoOcho_id"))
                    NewItem.FRASCONUEVE_ID = IIf(Convert.IsDBNull(dr("frascoNueve_id")), Nothing, dr("frascoNueve_id"))
                    NewItem.ADITIVONUEVE_ID = IIf(Convert.IsDBNull(dr("aditivoNueve_id")), Nothing, dr("aditivoNueve_id"))
                    NewItem.FRASCODIEZ_ID = IIf(Convert.IsDBNull(dr("frascoDiez_id")), Nothing, dr("frascoDiez_id"))
                    NewItem.ADITIVODIEZ_ID = IIf(Convert.IsDBNull(dr("aditivoDiez_id")), Nothing, dr("aditivoDiez_id"))
                    NewItem.OBSERVACION = IIf(Convert.IsDBNull(dr("observacion")), Nothing, dr("observacion"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTASISTEMA = IIf(Convert.IsDBNull(dr("fechaAltaSistema")), Nothing, dr("fechaAltaSistema"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    NewItem.FECHABAJA = IIf(Convert.IsDBNull(dr("fechaBaja")), Nothing, dr("fechaBaja"))
                    NewItem.MOTIVOBAJA = IIf(Convert.IsDBNull(dr("motivoBaja")), Nothing, dr("motivoBaja"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PHP")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "PRO_PHP")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.PRO_PHP) As Boolean

            Try
                _commandText = "_PRO_Php_REMOVE"
                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vphp_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_PRO_Php_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.PRO_PHP) As Boolean

            Try
                _commandText = "_PRO_Php_UPDATE"

                Dim Vphp_id As New SqlParameter("@php_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PHP_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim Vprocedimiento_id As New SqlParameter("@procedimiento_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PROCEDIMIENTO_ID)
                Dim Vml_100 As New SqlParameter("@ml_100", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_100)
                Dim Vml_250 As New SqlParameter("@ml_250", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_250)
                Dim Vml_500 As New SqlParameter("@ml_500", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_500)
                Dim Vml_1000 As New SqlParameter("@ml_1000", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ML_1000)
                Dim Vbic As New SqlParameter("@bic", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.BIC)
                Dim VgotaHora_id As New SqlParameter("@gotaHora_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GOTAHORA_ID)
                Dim VmlHora As New SqlParameter("@mlHora", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLHORA)
                Dim VmlDia As New SqlParameter("@mlDia", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MLDIA)
                Dim VfrascoUno_id As New SqlParameter("@frascoUno_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOUNO_ID)
                Dim VaditivoUno_id As New SqlParameter("@aditivoUno_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOUNO_ID)
                Dim VfrascoDos_id As New SqlParameter("@frascoDos_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODOS_ID)
                Dim VaditivoDos_id As New SqlParameter("@aditivoDos_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODOS_ID)
                Dim VfrascoTres_id As New SqlParameter("@frascoTres_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOTRES_ID)
                Dim VaditivoTres_id As New SqlParameter("@aditivoTres_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOTRES_ID)
                Dim VfrascoCuatro_id As New SqlParameter("@frascoCuatro_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCUATRO_ID)
                Dim VaditivoCuatro_id As New SqlParameter("@aditivoCuatro_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCUATRO_ID)
                Dim VfrascoCinco_id As New SqlParameter("@frascoCinco_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOCINCO_ID)
                Dim VaditivoCinco_id As New SqlParameter("@aditivoCinco_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOCINCO_ID)
                Dim VfrascoSeis_id As New SqlParameter("@frascoSeis_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSEIS_ID)
                Dim VaditivoSeis_id As New SqlParameter("@aditivoSeis_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSEIS_ID)
                Dim VfrascoSiete_id As New SqlParameter("@frascoSiete_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOSIETE_ID)
                Dim VaditivoSiete_id As New SqlParameter("@aditivoSiete_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOSIETE_ID)
                Dim VfrascoOcho_id As New SqlParameter("@frascoOcho_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCOOCHO_ID)
                Dim VaditivoOcho_id As New SqlParameter("@aditivoOcho_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVOOCHO_ID)
                Dim VfrascoNueve_id As New SqlParameter("@frascoNueve_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCONUEVE_ID)
                Dim VaditivoNueve_id As New SqlParameter("@aditivoNueve_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVONUEVE_ID)
                Dim VfrascoDiez_id As New SqlParameter("@frascoDiez_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.FRASCODIEZ_ID)
                Dim VaditivoDiez_id As New SqlParameter("@aditivoDiez_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ADITIVODIEZ_ID)
                Dim Vobservacion As New SqlParameter("@observacion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACION)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAltaSistema As New SqlParameter("@fechaAltaSistema", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTASISTEMA = Date.MinValue, Nothing, Item.FECHAALTASISTEMA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim VfechaBaja As New SqlParameter("@fechaBaja", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHABAJA = Date.MinValue, Nothing, Item.FECHABAJA))
                Dim VmotivoBaja As New SqlParameter("@motivoBaja", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.MOTIVOBAJA)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vphp_id, Vpaciente_id, Vprocedimiento_id, Vml_100, Vml_250, Vml_500, Vml_1000, Vbic, VgotaHora_id, VmlHora, VmlDia, VfrascoUno_id, VaditivoUno_id, VfrascoDos_id, VaditivoDos_id, VfrascoTres_id, VaditivoTres_id, VfrascoCuatro_id, VaditivoCuatro_id, VfrascoCinco_id, VaditivoCinco_id, VfrascoSeis_id, VaditivoSeis_id, VfrascoSiete_id, VaditivoSiete_id, VfrascoOcho_id, VaditivoOcho_id, VfrascoNueve_id, VaditivoNueve_id, VfrascoDiez_id, VaditivoDiez_id, Vobservacion, Vusuario_id, VfechaAltaSistema, VfechaModificacion, VfechaBaja, VmotivoBaja, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.PRO_PHP)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.PRO_PHP
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla PRO_PHP
        ''' Fecha de Creación  : viernes, 16 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla PRO_PHP. </remarks>
        Public Class ColumnNames
            Public Const PHP_ID As String = "PHP_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PROCEDIMIENTO_ID As String = "PROCEDIMIENTO_ID"
            Public Const ML_100 As String = "ML_100"
            Public Const ML_250 As String = "ML_250"
            Public Const ML_500 As String = "ML_500"
            Public Const ML_1000 As String = "ML_1000"
            Public Const BIC As String = "BIC"
            Public Const GOTAHORA_ID As String = "GOTAHORA_ID"
            Public Const MLHORA As String = "MLHORA"
            Public Const MLDIA As String = "MLDIA"
            Public Const FRASCOUNO_ID As String = "FRASCOUNO_ID"
            Public Const ADITIVOUNO_ID As String = "ADITIVOUNO_ID"
            Public Const FRASCODOS_ID As String = "FRASCODOS_ID"
            Public Const ADITIVODOS_ID As String = "ADITIVODOS_ID"
            Public Const FRASCOTRES_ID As String = "FRASCOTRES_ID"
            Public Const ADITIVOTRES_ID As String = "ADITIVOTRES_ID"
            Public Const FRASCOCUATRO_ID As String = "FRASCOCUATRO_ID"
            Public Const ADITIVOCUATRO_ID As String = "ADITIVOCUATRO_ID"
            Public Const FRASCOCINCO_ID As String = "FRASCOCINCO_ID"
            Public Const ADITIVOCINCO_ID As String = "ADITIVOCINCO_ID"
            Public Const FRASCOSEIS_ID As String = "FRASCOSEIS_ID"
            Public Const ADITIVOSEIS_ID As String = "ADITIVOSEIS_ID"
            Public Const FRASCOSIETE_ID As String = "FRASCOSIETE_ID"
            Public Const ADITIVOSIETE_ID As String = "ADITIVOSIETE_ID"
            Public Const FRASCOOCHO_ID As String = "FRASCOOCHO_ID"
            Public Const ADITIVOOCHO_ID As String = "ADITIVOOCHO_ID"
            Public Const FRASCONUEVE_ID As String = "FRASCONUEVE_ID"
            Public Const ADITIVONUEVE_ID As String = "ADITIVONUEVE_ID"
            Public Const FRASCODIEZ_ID As String = "FRASCODIEZ_ID"
            Public Const ADITIVODIEZ_ID As String = "ADITIVODIEZ_ID"
            Public Const OBSERVACION As String = "OBSERVACION"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTASISTEMA As String = "FECHAALTASISTEMA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
            Public Const FECHABAJA As String = "FECHABAJA"
            Public Const MOTIVOBAJA As String = "MOTIVOBAJA"
        End Class ' ColumnNames
    End Class ' PRO_PHP
    Public Class MED_DIAGNOSTICO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            id10
            dec10
            grp10
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_DIAGNOSTICO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_DIAGNOSTICO) As Entities.Tables.MED_DIAGNOSTICO
            Dim result As Boolean

            Try
                _commandText = "_MED_DIAGNOSTICO_ADD"
                Dim vPKid10 As New SqlParameter("@id10", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID10)
                Dim Vdec10 As New SqlParameter("@dec10", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEC10)
                Dim Vgrp10 As New SqlParameter("@grp10", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GRP10)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKid10, Vdec10, Vgrp10, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID10 = vPKid10.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_DIAGNOSTICO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Diagnostico_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_DIAGNOSTICO
                    NewItem.ID10 = IIf(Convert.IsDBNull(dr("id10")), Nothing, dr("id10"))
                    NewItem.DEC10 = IIf(Convert.IsDBNull(dr("dec10")), Nothing, dr("dec10"))
                    NewItem.GRP10 = IIf(Convert.IsDBNull(dr("grp10")), Nothing, dr("grp10"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_DIAGNOSTICO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_DIAGNOSTICO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_DIAGNOSTICO) As Boolean

            Try
                _commandText = "_MED_Diagnostico_REMOVE"
                Dim Vid10 As New SqlParameter("@id10", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID10)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vid10, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Diagnostico_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_DIAGNOSTICO) As Boolean

            Try
                _commandText = "_MED_Diagnostico_UPDATE"

                Dim Vid10 As New SqlParameter("@id10", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID10)
                Dim Vdec10 As New SqlParameter("@dec10", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DEC10)
                Dim Vgrp10 As New SqlParameter("@grp10", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.GRP10)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vid10, Vdec10, Vgrp10, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_DIAGNOSTICO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_DIAGNOSTICO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_DIAGNOSTICO
        ''' Fecha de Creación  : martes, 20 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_DIAGNOSTICO. </remarks>
        Public Class ColumnNames
            Public Const ID10 As String = "ID10"
            Public Const DEC10 As String = "DEC10"
            Public Const GRP10 As String = "GRP10"
        End Class ' ColumnNames
    End Class ' MED_DIAGNOSTICO
    Public Class MED_DIAGNOSTICO_PACIENTE
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            diagnostico_id
            paciente_id
            principalCapituloIngreso_id
            principalRubroIngreso_id
            principalSubRubroIngreso_id
            principalItemIngreso_id
            secundarioCapituloIngreso_id
            secundarioRubroIngreso_id
            secundarioSubRubroIngreso_id
            secundarioItemIngreso_id
            terciarioCapituloIngreso_id
            terciarioRubroIngreso_id
            terciarioSubRubroIngreso_id
            terciarioItemIngreso_id
            principalCapituloEgreso_id
            principalRubroEgreso_id
            principalSubRubroEgreso_id
            principalItemEgreso_id
            secundarioCapituloEgreso_id
            secundarioRubroEgreso_id
            secundarioSubRubroEgreso_id
            secundarioItemEgreso_id
            terciarioCapituloEgreso_id
            terciarioRubroEgreso_id
            terciarioSubRubroEgreso_id
            terciarioItemEgreso_id
            usuario_id
            fechaAlta
            fechaModificacion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.MED_DIAGNOSTICO_PACIENTE)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.MED_DIAGNOSTICO_PACIENTE) As Entities.Tables.MED_DIAGNOSTICO_PACIENTE
            Dim result As Boolean

            Try
                _commandText = "_MED_DIAGNOSTICO_PACIENTE_ADD"
                Dim vPKdiagnostico_id As New SqlParameter("@diagnostico_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VprincipalCapituloIngreso_id As New SqlParameter("@principalCapituloIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALCAPITULOINGRESO_ID)
                Dim VprincipalRubroIngreso_id As New SqlParameter("@principalRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALRUBROINGRESO_ID)
                Dim VprincipalSubRubroIngreso_id As New SqlParameter("@principalSubRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALSUBRUBROINGRESO_ID)
                Dim VprincipalItemIngreso_id As New SqlParameter("@principalItemIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALITEMINGRESO_ID)
                Dim VsecundarioCapituloIngreso_id As New SqlParameter("@secundarioCapituloIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOCAPITULOINGRESO_ID)
                Dim VsecundarioRubroIngreso_id As New SqlParameter("@secundarioRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIORUBROINGRESO_ID)
                Dim VsecundarioSubRubroIngreso_id As New SqlParameter("@secundarioSubRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOSUBRUBROINGRESO_ID)
                Dim VsecundarioItemIngreso_id As New SqlParameter("@secundarioItemIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOITEMINGRESO_ID)
                Dim VterciarioCapituloIngreso_id As New SqlParameter("@terciarioCapituloIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOCAPITULOINGRESO_ID)
                Dim VterciarioRubroIngreso_id As New SqlParameter("@terciarioRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIORUBROINGRESO_ID)
                Dim VterciarioSubRubroIngreso_id As New SqlParameter("@terciarioSubRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOSUBRUBROINGRESO_ID)
                Dim VterciarioItemIngreso_id As New SqlParameter("@terciarioItemIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOITEMINGRESO_ID)
                Dim VprincipalCapituloEgreso_id As New SqlParameter("@principalCapituloEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALCAPITULOEGRESO_ID)
                Dim VprincipalRubroEgreso_id As New SqlParameter("@principalRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALRUBROEGRESO_ID)
                Dim VprincipalSubRubroEgreso_id As New SqlParameter("@principalSubRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALSUBRUBROEGRESO_ID)
                Dim VprincipalItemEgreso_id As New SqlParameter("@principalItemEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALITEMEGRESO_ID)
                Dim VsecundarioCapituloEgreso_id As New SqlParameter("@secundarioCapituloEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOCAPITULOEGRESO_ID)
                Dim VsecundarioRubroEgreso_id As New SqlParameter("@secundarioRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIORUBROEGRESO_ID)
                Dim VsecundarioSubRubroEgreso_id As New SqlParameter("@secundarioSubRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOSUBRUBROEGRESO_ID)
                Dim VsecundarioItemEgreso_id As New SqlParameter("@secundarioItemEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOITEMEGRESO_ID)
                Dim VterciarioCapituloEgreso_id As New SqlParameter("@terciarioCapituloEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOCAPITULOEGRESO_ID)
                Dim VterciarioRubroEgreso_id As New SqlParameter("@terciarioRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIORUBROEGRESO_ID)
                Dim VterciarioSubRubroEgreso_id As New SqlParameter("@terciarioSubRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOSUBRUBROEGRESO_ID)
                Dim VterciarioItemEgreso_id As New SqlParameter("@terciarioItemEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOITEMEGRESO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAlta As New SqlParameter("@fechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTA = Date.MinValue, Nothing, Item.FECHAALTA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKdiagnostico_id, Vpaciente_id, VprincipalCapituloIngreso_id, VprincipalRubroIngreso_id, VprincipalSubRubroIngreso_id, VprincipalItemIngreso_id, VsecundarioCapituloIngreso_id, VsecundarioRubroIngreso_id, VsecundarioSubRubroIngreso_id, VsecundarioItemIngreso_id, VterciarioCapituloIngreso_id, VterciarioRubroIngreso_id, VterciarioSubRubroIngreso_id, VterciarioItemIngreso_id, VprincipalCapituloEgreso_id, VprincipalRubroEgreso_id, VprincipalSubRubroEgreso_id, VprincipalItemEgreso_id, VsecundarioCapituloEgreso_id, VsecundarioRubroEgreso_id, VsecundarioSubRubroEgreso_id, VsecundarioItemEgreso_id, VterciarioCapituloEgreso_id, VterciarioRubroEgreso_id, VterciarioSubRubroEgreso_id, VterciarioItemEgreso_id, Vusuario_id, VfechaAlta, VfechaModificacion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.DIAGNOSTICO_ID = vPKdiagnostico_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.MED_DIAGNOSTICO_PACIENTE)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_MED_Diagnostico_Paciente_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.MED_DIAGNOSTICO_PACIENTE
                    NewItem.DIAGNOSTICO_ID = IIf(Convert.IsDBNull(dr("diagnostico_id")), Nothing, dr("diagnostico_id"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.PRINCIPALCAPITULOINGRESO_ID = IIf(Convert.IsDBNull(dr("principalCapituloIngreso_id")), Nothing, dr("principalCapituloIngreso_id"))
                    NewItem.PRINCIPALRUBROINGRESO_ID = IIf(Convert.IsDBNull(dr("principalRubroIngreso_id")), Nothing, dr("principalRubroIngreso_id"))
                    NewItem.PRINCIPALSUBRUBROINGRESO_ID = IIf(Convert.IsDBNull(dr("principalSubRubroIngreso_id")), Nothing, dr("principalSubRubroIngreso_id"))
                    NewItem.PRINCIPALITEMINGRESO_ID = IIf(Convert.IsDBNull(dr("principalItemIngreso_id")), Nothing, dr("principalItemIngreso_id"))
                    NewItem.SECUNDARIOCAPITULOINGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioCapituloIngreso_id")), Nothing, dr("secundarioCapituloIngreso_id"))
                    NewItem.SECUNDARIORUBROINGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioRubroIngreso_id")), Nothing, dr("secundarioRubroIngreso_id"))
                    NewItem.SECUNDARIOSUBRUBROINGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioSubRubroIngreso_id")), Nothing, dr("secundarioSubRubroIngreso_id"))
                    NewItem.SECUNDARIOITEMINGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioItemIngreso_id")), Nothing, dr("secundarioItemIngreso_id"))
                    NewItem.TERCIARIOCAPITULOINGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioCapituloIngreso_id")), Nothing, dr("terciarioCapituloIngreso_id"))
                    NewItem.TERCIARIORUBROINGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioRubroIngreso_id")), Nothing, dr("terciarioRubroIngreso_id"))
                    NewItem.TERCIARIOSUBRUBROINGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioSubRubroIngreso_id")), Nothing, dr("terciarioSubRubroIngreso_id"))
                    NewItem.TERCIARIOITEMINGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioItemIngreso_id")), Nothing, dr("terciarioItemIngreso_id"))
                    NewItem.PRINCIPALCAPITULOEGRESO_ID = IIf(Convert.IsDBNull(dr("principalCapituloEgreso_id")), Nothing, dr("principalCapituloEgreso_id"))
                    NewItem.PRINCIPALRUBROEGRESO_ID = IIf(Convert.IsDBNull(dr("principalRubroEgreso_id")), Nothing, dr("principalRubroEgreso_id"))
                    NewItem.PRINCIPALSUBRUBROEGRESO_ID = IIf(Convert.IsDBNull(dr("principalSubRubroEgreso_id")), Nothing, dr("principalSubRubroEgreso_id"))
                    NewItem.PRINCIPALITEMEGRESO_ID = IIf(Convert.IsDBNull(dr("principalItemEgreso_id")), Nothing, dr("principalItemEgreso_id"))
                    NewItem.SECUNDARIOCAPITULOEGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioCapituloEgreso_id")), Nothing, dr("secundarioCapituloEgreso_id"))
                    NewItem.SECUNDARIORUBROEGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioRubroEgreso_id")), Nothing, dr("secundarioRubroEgreso_id"))
                    NewItem.SECUNDARIOSUBRUBROEGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioSubRubroEgreso_id")), Nothing, dr("secundarioSubRubroEgreso_id"))
                    NewItem.SECUNDARIOITEMEGRESO_ID = IIf(Convert.IsDBNull(dr("secundarioItemEgreso_id")), Nothing, dr("secundarioItemEgreso_id"))
                    NewItem.TERCIARIOCAPITULOEGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioCapituloEgreso_id")), Nothing, dr("terciarioCapituloEgreso_id"))
                    NewItem.TERCIARIORUBROEGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioRubroEgreso_id")), Nothing, dr("terciarioRubroEgreso_id"))
                    NewItem.TERCIARIOSUBRUBROEGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioSubRubroEgreso_id")), Nothing, dr("terciarioSubRubroEgreso_id"))
                    NewItem.TERCIARIOITEMEGRESO_ID = IIf(Convert.IsDBNull(dr("terciarioItemEgreso_id")), Nothing, dr("terciarioItemEgreso_id"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    NewItem.FECHAALTA = IIf(Convert.IsDBNull(dr("fechaAlta")), Nothing, dr("fechaAlta"))
                    NewItem.FECHAMODIFICACION = IIf(Convert.IsDBNull(dr("fechaModificacion")), Nothing, dr("fechaModificacion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_DIAGNOSTICO_PACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "MED_DIAGNOSTICO_PACIENTE")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.MED_DIAGNOSTICO_PACIENTE) As Boolean

            Try
                _commandText = "_MED_Diagnostico_Paciente_REMOVE"
                Dim Vdiagnostico_id As New SqlParameter("@diagnostico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIAGNOSTICO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vdiagnostico_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_MED_Diagnostico_Paciente_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.MED_DIAGNOSTICO_PACIENTE) As Boolean

            Try
                _commandText = "_MED_Diagnostico_Paciente_UPDATE"

                Dim Vdiagnostico_id As New SqlParameter("@diagnostico_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DIAGNOSTICO_ID)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VprincipalCapituloIngreso_id As New SqlParameter("@principalCapituloIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALCAPITULOINGRESO_ID)
                Dim VprincipalRubroIngreso_id As New SqlParameter("@principalRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALRUBROINGRESO_ID)
                Dim VprincipalSubRubroIngreso_id As New SqlParameter("@principalSubRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALSUBRUBROINGRESO_ID)
                Dim VprincipalItemIngreso_id As New SqlParameter("@principalItemIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALITEMINGRESO_ID)
                Dim VsecundarioCapituloIngreso_id As New SqlParameter("@secundarioCapituloIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOCAPITULOINGRESO_ID)
                Dim VsecundarioRubroIngreso_id As New SqlParameter("@secundarioRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIORUBROINGRESO_ID)
                Dim VsecundarioSubRubroIngreso_id As New SqlParameter("@secundarioSubRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOSUBRUBROINGRESO_ID)
                Dim VsecundarioItemIngreso_id As New SqlParameter("@secundarioItemIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOITEMINGRESO_ID)
                Dim VterciarioCapituloIngreso_id As New SqlParameter("@terciarioCapituloIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOCAPITULOINGRESO_ID)
                Dim VterciarioRubroIngreso_id As New SqlParameter("@terciarioRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIORUBROINGRESO_ID)
                Dim VterciarioSubRubroIngreso_id As New SqlParameter("@terciarioSubRubroIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOSUBRUBROINGRESO_ID)
                Dim VterciarioItemIngreso_id As New SqlParameter("@terciarioItemIngreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOITEMINGRESO_ID)
                Dim VprincipalCapituloEgreso_id As New SqlParameter("@principalCapituloEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALCAPITULOEGRESO_ID)
                Dim VprincipalRubroEgreso_id As New SqlParameter("@principalRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALRUBROEGRESO_ID)
                Dim VprincipalSubRubroEgreso_id As New SqlParameter("@principalSubRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALSUBRUBROEGRESO_ID)
                Dim VprincipalItemEgreso_id As New SqlParameter("@principalItemEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PRINCIPALITEMEGRESO_ID)
                Dim VsecundarioCapituloEgreso_id As New SqlParameter("@secundarioCapituloEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOCAPITULOEGRESO_ID)
                Dim VsecundarioRubroEgreso_id As New SqlParameter("@secundarioRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIORUBROEGRESO_ID)
                Dim VsecundarioSubRubroEgreso_id As New SqlParameter("@secundarioSubRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOSUBRUBROEGRESO_ID)
                Dim VsecundarioItemEgreso_id As New SqlParameter("@secundarioItemEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.SECUNDARIOITEMEGRESO_ID)
                Dim VterciarioCapituloEgreso_id As New SqlParameter("@terciarioCapituloEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOCAPITULOEGRESO_ID)
                Dim VterciarioRubroEgreso_id As New SqlParameter("@terciarioRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIORUBROEGRESO_ID)
                Dim VterciarioSubRubroEgreso_id As New SqlParameter("@terciarioSubRubroEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOSUBRUBROEGRESO_ID)
                Dim VterciarioItemEgreso_id As New SqlParameter("@terciarioItemEgreso_id", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TERCIARIOITEMEGRESO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim VfechaAlta As New SqlParameter("@fechaAlta", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAALTA = Date.MinValue, Nothing, Item.FECHAALTA))
                Dim VfechaModificacion As New SqlParameter("@fechaModificacion", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHAMODIFICACION = Date.MinValue, Nothing, Item.FECHAMODIFICACION))
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vdiagnostico_id, Vpaciente_id, VprincipalCapituloIngreso_id, VprincipalRubroIngreso_id, VprincipalSubRubroIngreso_id, VprincipalItemIngreso_id, VsecundarioCapituloIngreso_id, VsecundarioRubroIngreso_id, VsecundarioSubRubroIngreso_id, VsecundarioItemIngreso_id, VterciarioCapituloIngreso_id, VterciarioRubroIngreso_id, VterciarioSubRubroIngreso_id, VterciarioItemIngreso_id, VprincipalCapituloEgreso_id, VprincipalRubroEgreso_id, VprincipalSubRubroEgreso_id, VprincipalItemEgreso_id, VsecundarioCapituloEgreso_id, VsecundarioRubroEgreso_id, VsecundarioSubRubroEgreso_id, VsecundarioItemEgreso_id, VterciarioCapituloEgreso_id, VterciarioRubroEgreso_id, VterciarioSubRubroEgreso_id, VterciarioItemEgreso_id, Vusuario_id, VfechaAlta, VfechaModificacion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.MED_DIAGNOSTICO_PACIENTE)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.MED_DIAGNOSTICO_PACIENTE
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla MED_DIAGNOSTICO_PACIENTE
        ''' Fecha de Creación  : miércoles, 21 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla MED_DIAGNOSTICO_PACIENTE. </remarks>
        Public Class ColumnNames
            Public Const DIAGNOSTICO_ID As String = "DIAGNOSTICO_ID"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const PRINCIPALCAPITULOINGRESO_ID As String = "PRINCIPALCAPITULOINGRESO_ID"
            Public Const PRINCIPALRUBROINGRESO_ID As String = "PRINCIPALRUBROINGRESO_ID"
            Public Const PRINCIPALSUBRUBROINGRESO_ID As String = "PRINCIPALSUBRUBROINGRESO_ID"
            Public Const PRINCIPALITEMINGRESO_ID As String = "PRINCIPALITEMINGRESO_ID"
            Public Const SECUNDARIOCAPITULOINGRESO_ID As String = "SECUNDARIOCAPITULOINGRESO_ID"
            Public Const SECUNDARIORUBROINGRESO_ID As String = "SECUNDARIORUBROINGRESO_ID"
            Public Const SECUNDARIOSUBRUBROINGRESO_ID As String = "SECUNDARIOSUBRUBROINGRESO_ID"
            Public Const SECUNDARIOITEMINGRESO_ID As String = "SECUNDARIOITEMINGRESO_ID"
            Public Const TERCIARIOCAPITULOINGRESO_ID As String = "TERCIARIOCAPITULOINGRESO_ID"
            Public Const TERCIARIORUBROINGRESO_ID As String = "TERCIARIORUBROINGRESO_ID"
            Public Const TERCIARIOSUBRUBROINGRESO_ID As String = "TERCIARIOSUBRUBROINGRESO_ID"
            Public Const TERCIARIOITEMINGRESO_ID As String = "TERCIARIOITEMINGRESO_ID"
            Public Const PRINCIPALCAPITULOEGRESO_ID As String = "PRINCIPALCAPITULOEGRESO_ID"
            Public Const PRINCIPALRUBROEGRESO_ID As String = "PRINCIPALRUBROEGRESO_ID"
            Public Const PRINCIPALSUBRUBROEGRESO_ID As String = "PRINCIPALSUBRUBROEGRESO_ID"
            Public Const PRINCIPALITEMEGRESO_ID As String = "PRINCIPALITEMEGRESO_ID"
            Public Const SECUNDARIOCAPITULOEGRESO_ID As String = "SECUNDARIOCAPITULOEGRESO_ID"
            Public Const SECUNDARIORUBROEGRESO_ID As String = "SECUNDARIORUBROEGRESO_ID"
            Public Const SECUNDARIOSUBRUBROEGRESO_ID As String = "SECUNDARIOSUBRUBROEGRESO_ID"
            Public Const SECUNDARIOITEMEGRESO_ID As String = "SECUNDARIOITEMEGRESO_ID"
            Public Const TERCIARIOCAPITULOEGRESO_ID As String = "TERCIARIOCAPITULOEGRESO_ID"
            Public Const TERCIARIORUBROEGRESO_ID As String = "TERCIARIORUBROEGRESO_ID"
            Public Const TERCIARIOSUBRUBROEGRESO_ID As String = "TERCIARIOSUBRUBROEGRESO_ID"
            Public Const TERCIARIOITEMEGRESO_ID As String = "TERCIARIOITEMEGRESO_ID"
            Public Const USUARIO_ID As String = "USUARIO_ID"
            Public Const FECHAALTA As String = "FECHAALTA"
            Public Const FECHAMODIFICACION As String = "FECHAMODIFICACION"
        End Class ' ColumnNames
    End Class ' MED_DIAGNOSTICO_PACIENTE

    Public Class EST_LABORATORIOCAB
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            id_solicitud
            paciente_id
            fechaSolicitud
            tipo
            otrosEstudios
            observacionesMed
            observacionesBioq
            estado_id
            usuario_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EST_LABORATORIOCAB)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EST_LABORATORIOCAB) As Entities.Tables.EST_LABORATORIOCAB
            Dim result As Boolean

            Try
                _commandText = "_EST_LABORATORIOCAB_ADD"
                Dim vPKid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VfechaSolicitud As New SqlParameter("@fechaSolicitud", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHASOLICITUD = Date.MinValue, Nothing, Item.FECHASOLICITUD))
                Dim Vtipo As New SqlParameter("@tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim VotrosEstudios As New SqlParameter("@otrosEstudios", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OTROSESTUDIOS)
                Dim VobservacionesMed As New SqlParameter("@observacionesMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESMED)
                Dim VobservacionesBioq As New SqlParameter("@observacionesBioq", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESBIOQ)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKid_solicitud, Vpaciente_id, VfechaSolicitud, Vtipo, VotrosEstudios, VobservacionesMed, VobservacionesBioq, Vestado_id, Vusuario_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_SOLICITUD = vPKid_solicitud.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EST_LABORATORIOCAB)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioCab_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EST_LABORATORIOCAB
                    NewItem.ID_SOLICITUD = IIf(Convert.IsDBNull(dr("id_solicitud")), Nothing, dr("id_solicitud"))
                    NewItem.PACIENTE_ID = IIf(Convert.IsDBNull(dr("paciente_id")), Nothing, dr("paciente_id"))
                    NewItem.FECHASOLICITUD = IIf(Convert.IsDBNull(dr("fechaSolicitud")), Nothing, dr("fechaSolicitud"))
                    NewItem.TIPO = IIf(Convert.IsDBNull(dr("tipo")), Nothing, dr("tipo"))
                    NewItem.OTROSESTUDIOS = IIf(Convert.IsDBNull(dr("otrosEstudios")), Nothing, dr("otrosEstudios"))
                    NewItem.OBSERVACIONESMED = IIf(Convert.IsDBNull(dr("observacionesMed")), Nothing, dr("observacionesMed"))
                    NewItem.OBSERVACIONESBIOQ = IIf(Convert.IsDBNull(dr("observacionesBioq")), Nothing, dr("observacionesBioq"))
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.USUARIO_ID = IIf(Convert.IsDBNull(dr("usuario_id")), Nothing, dr("usuario_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOCAB")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOCAB")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EST_LABORATORIOCAB) As Boolean

            Try
                _commandText = "_EST_LaboratorioCab_REMOVE"
                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vid_solicitud, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioCab_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EST_LABORATORIOCAB) As Boolean

            Try
                _commandText = "_EST_LaboratorioCab_UPDATE"

                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim Vpaciente_id As New SqlParameter("@paciente_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.PACIENTE_ID)
                Dim VfechaSolicitud As New SqlParameter("@fechaSolicitud", SqlDbType.DateTime, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, IIf(Item.FECHASOLICITUD = Date.MinValue, Nothing, Item.FECHASOLICITUD))
                Dim Vtipo As New SqlParameter("@tipo", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.TIPO)
                Dim VotrosEstudios As New SqlParameter("@otrosEstudios", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OTROSESTUDIOS)
                Dim VobservacionesMed As New SqlParameter("@observacionesMed", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESMED)
                Dim VobservacionesBioq As New SqlParameter("@observacionesBioq", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.OBSERVACIONESBIOQ)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim Vusuario_id As New SqlParameter("@usuario_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.USUARIO_ID)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vid_solicitud, Vpaciente_id, VfechaSolicitud, Vtipo, VotrosEstudios, VobservacionesMed, VobservacionesBioq, Vestado_id, Vusuario_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EST_LABORATORIOCAB)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EST_LABORATORIOCAB
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIOCAB
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIOCAB. </remarks>
        Public Class ColumnNames
            Public Const ID_SOLICITUD As String = "ID_SOLICITUD"
            Public Const PACIENTE_ID As String = "PACIENTE_ID"
            Public Const FECHASOLICITUD As String = "FECHASOLICITUD"
            Public Const TIPO As String = "TIPO"
            Public Const OTROSESTUDIOS As String = "OTROSESTUDIOS"
            Public Const OBSERVACIONESMED As String = "OBSERVACIONESMED"
            Public Const OBSERVACIONESBIOQ As String = "OBSERVACIONESBIOQ"
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const USUARIO_ID As String = "USUARIO_ID"
        End Class ' ColumnNames
    End Class ' EST_LABORATORIOCAB

    Public Class EST_LABORATORIODETERMINACIONES
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            estudio_id
            descEstudio
            tipoEstudio_id
            inHabilitado
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EST_LABORATORIODETERMINACIONES)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EST_LABORATORIODETERMINACIONES) As Entities.Tables.EST_LABORATORIODETERMINACIONES
            Dim result As Boolean

            Try
                _commandText = "_EST_LABORATORIODETERMINACIONES_ADD"
                Dim vPKestudio_id As New SqlParameter("@estudio_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VdescEstudio As New SqlParameter("@descEstudio", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.descEstudio)
                Dim VtipoEstudio_id As New SqlParameter("@tipoEstudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoEstudio_id)
                Dim VinHabilitado As New SqlParameter("@inHabilitado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.inHabilitado)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKestudio_id, VdescEstudio, VtipoEstudio_id, VinHabilitado, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.estudio_id = vPKestudio_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EST_LABORATORIODETERMINACIONES)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioDeterminaciones_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EST_LABORATORIODETERMINACIONES
                    NewItem.estudio_id = IIf(Convert.IsDBNull(dr("estudio_id")), Nothing, dr("estudio_id"))
                    NewItem.descEstudio = IIf(Convert.IsDBNull(dr("descEstudio")), Nothing, dr("descEstudio"))
                    NewItem.tipoEstudio_id = IIf(Convert.IsDBNull(dr("tipoEstudio_id")), Nothing, dr("tipoEstudio_id"))
                    NewItem.inHabilitado = IIf(Convert.IsDBNull(dr("inHabilitado")), Nothing, dr("inHabilitado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIODETERMINACIONES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIODETERMINACIONES")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EST_LABORATORIODETERMINACIONES) As Boolean

            Try
                _commandText = "_EST_LaboratorioDeterminaciones_REMOVE"
                Dim Vestudio_id As New SqlParameter("@estudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.estudio_id)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vestudio_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioDeterminaciones_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EST_LABORATORIODETERMINACIONES) As Boolean

            Try
                _commandText = "_EST_LaboratorioDeterminaciones_UPDATE"

                Dim Vestudio_id As New SqlParameter("@estudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.estudio_id)
                Dim VdescEstudio As New SqlParameter("@descEstudio", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.descEstudio)
                Dim VtipoEstudio_id As New SqlParameter("@tipoEstudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoEstudio_id)
                Dim VinHabilitado As New SqlParameter("@inHabilitado", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.inHabilitado)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vestudio_id, VdescEstudio, VtipoEstudio_id, VinHabilitado, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EST_LABORATORIODETERMINACIONES)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EST_LABORATORIODETERMINACIONES
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIODETERMINACIONES
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIODETERMINACIONES. </remarks>
        Public Class ColumnNames
            Public Const ESTUDIO_ID As String = "ESTUDIO_ID"
            Public Const DESCESTUDIO As String = "DESCESTUDIO"
            Public Const TIPOESTUDIO_ID As String = "TIPOESTUDIO_ID"
            Public Const INHABILITADO As String = "INHABILITADO"
        End Class ' ColumnNames
    End Class

    Public Class EST_LABORATORIOESTADOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            estado_id
            descripcionEstado
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EST_LABORATORIOESTADOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EST_LABORATORIOESTADOS) As Entities.Tables.EST_LABORATORIOESTADOS
            Dim result As Boolean

            Try
                _commandText = "_EST_LABORATORIOESTADOS_ADD"
                Dim vPKestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VdescripcionEstado As New SqlParameter("@descripcionEstado", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONESTADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKestado_id, VdescripcionEstado, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ESTADO_ID = vPKestado_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EST_LABORATORIOESTADOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioEstados_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EST_LABORATORIOESTADOS
                    NewItem.ESTADO_ID = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    NewItem.DESCRIPCIONESTADO = IIf(Convert.IsDBNull(dr("descripcionEstado")), Nothing, dr("descripcionEstado"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOESTADOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOESTADOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EST_LABORATORIOESTADOS) As Boolean

            Try
                _commandText = "_EST_LaboratorioEstados_REMOVE"
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vestado_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioEstados_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EST_LABORATORIOESTADOS) As Boolean

            Try
                _commandText = "_EST_LaboratorioEstados_UPDATE"

                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ESTADO_ID)
                Dim VdescripcionEstado As New SqlParameter("@descripcionEstado", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.DESCRIPCIONESTADO)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vestado_id, VdescripcionEstado, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EST_LABORATORIOESTADOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EST_LABORATORIOESTADOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIOESTADOS
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIOESTADOS. </remarks>
        Public Class ColumnNames
            Public Const ESTADO_ID As String = "ESTADO_ID"
            Public Const DESCRIPCIONESTADO As String = "DESCRIPCIONESTADO"
        End Class ' ColumnNames
    End Class

    Public Class EST_LABORATORIOITEMS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            id_solicitud
            nroItem
            estudio_id
            estado_id
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EST_LABORATORIOITEMS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EST_LABORATORIOITEMS) As Entities.Tables.EST_LABORATORIOITEMS
            Dim result As Boolean

            Try
                _commandText = "_EST_LABORATORIOITEMS_ADD"
                Dim vPKid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim vPKnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Vestudio_id As New SqlParameter("@estudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.estudio_id)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.estado_id)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKid_solicitud, vPKnroItem, Vestudio_id, Vestado_id, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.ID_SOLICITUD = vPKid_solicitud.Value
                    Item.NROITEM = vPKnroItem.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EST_LABORATORIOITEMS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioItems_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EST_LABORATORIOITEMS
                    NewItem.ID_SOLICITUD = IIf(Convert.IsDBNull(dr("id_solicitud")), Nothing, dr("id_solicitud"))
                    NewItem.NROITEM = IIf(Convert.IsDBNull(dr("nroItem")), Nothing, dr("nroItem"))
                    NewItem.estudio_id = IIf(Convert.IsDBNull(dr("estudio_id")), Nothing, dr("estudio_id"))
                    NewItem.estado_id = IIf(Convert.IsDBNull(dr("estado_id")), Nothing, dr("estado_id"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOITEMS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOITEMS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EST_LABORATORIOITEMS) As Boolean

            Try
                _commandText = "_EST_LaboratorioItems_REMOVE"
                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vid_solicitud, VnroItem, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioItems_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EST_LABORATORIOITEMS) As Boolean

            Try
                _commandText = "_EST_LaboratorioItems_UPDATE"

                Dim Vid_solicitud As New SqlParameter("@id_solicitud", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.ID_SOLICITUD)
                Dim VnroItem As New SqlParameter("@nroItem", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.NROITEM)
                Dim Vestudio_id As New SqlParameter("@estudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.estudio_id)
                Dim Vestado_id As New SqlParameter("@estado_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.estado_id)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vid_solicitud, VnroItem, Vestudio_id, Vestado_id, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EST_LABORATORIOITEMS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EST_LABORATORIOITEMS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIOITEMS
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIOITEMS. </remarks>
        Public Class ColumnNames
            Public Const ID_SOLICITUD As String = "ID_SOLICITUD"
            Public Const NROITEM As String = "NROITEM"
            Public Const ESTUDIO_ID As String = "ESTUDIO_ID"
            Public Const ESTADO_ID As String = "ESTADO_ID"
        End Class ' ColumnNames
    End Class

    Public Class EST_LABORATORIOTIPOESTUDIO
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            tipoEstudio_id
            descripcionTipoEst
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EST_LABORATORIOTIPOESTUDIO)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EST_LABORATORIOTIPOESTUDIO) As Entities.Tables.EST_LABORATORIOTIPOESTUDIO
            Dim result As Boolean

            Try
                _commandText = "_EST_LABORATORIOTIPOESTUDIO_ADD"
                Dim vPKtipoEstudio_id As New SqlParameter("@tipoEstudio_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VdescripcionTipoEst As New SqlParameter("@descripcionTipoEst", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.descripcionTipoEst)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKtipoEstudio_id, VdescripcionTipoEst, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.tipoEstudio_id = vPKtipoEstudio_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EST_LABORATORIOTIPOESTUDIO)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioTipoEstudio_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EST_LABORATORIOTIPOESTUDIO
                    NewItem.tipoEstudio_id = IIf(Convert.IsDBNull(dr("tipoEstudio_id")), Nothing, dr("tipoEstudio_id"))
                    NewItem.descripcionTipoEst = IIf(Convert.IsDBNull(dr("descripcionTipoEst")), Nothing, dr("descripcionTipoEst"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOTIPOESTUDIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOTIPOESTUDIO")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EST_LABORATORIOTIPOESTUDIO) As Boolean

            Try
                _commandText = "_EST_LaboratorioTipoEstudio_REMOVE"
                Dim VtipoEstudio_id As New SqlParameter("@tipoEstudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoEstudio_id)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VtipoEstudio_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioTipoEstudio_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EST_LABORATORIOTIPOESTUDIO) As Boolean

            Try
                _commandText = "_EST_LaboratorioTipoEstudio_UPDATE"

                Dim VtipoEstudio_id As New SqlParameter("@tipoEstudio_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoEstudio_id)
                Dim VdescripcionTipoEst As New SqlParameter("@descripcionTipoEst", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.descripcionTipoEst)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VtipoEstudio_id, VdescripcionTipoEst, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EST_LABORATORIOTIPOESTUDIO)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EST_LABORATORIOTIPOESTUDIO
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIOTIPOESTUDIO
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIOTIPOESTUDIO. </remarks>
        Public Class ColumnNames
            Public Const TIPOESTUDIO_ID As String = "TIPOESTUDIO_ID"
            Public Const DESCRIPCIONTIPOEST As String = "DESCRIPCIONTIPOEST"
        End Class ' ColumnNames
    End Class

    Public Class EST_LABORATORIOTIPOS
        Public Enum ExceptionHandlingEnum
            ThrowExceptionHandling
            RaiseExceptionHandling
        End Enum
        Public Enum ColumnEnum
            tipo_id
            tipoDescripcion
        End Enum

        Private _commandText As String = Nothing
        Private _sqlErr As String = Nothing
        Private _sql As String = Nothing
        Private _exceptionHandling As ExceptionHandlingEnum = ExceptionHandlingEnum.ThrowExceptionHandling
        Private _connectionstring As String = Nothing
        Private _commandTimeout As Int32 = 30
        Protected _connection As System.Data.SqlClient.SqlConnection
        Private _transaction As Data.SqlClient.SqlTransaction
        Protected _whereParameterObject As New WhereParameterObject
        Protected _orderByParameterObject As New OrderByParameterObject
        Protected _aggregateParameterObject As New AggregateParameterObject
        Protected _itemList As New List(Of Entities.Tables.EST_LABORATORIOTIPOS)
        Protected _aggregateItemList As New ArrayList

        Public Property Transaction() As Data.SqlClient.SqlTransaction
            Get
                Return _transaction
            End Get
            Set(ByVal value As Data.SqlClient.SqlTransaction)
                _transaction = value
            End Set
        End Property
        Public Sub New()
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _commandTimeout = ConfigurationManager.AppSettings.Item("SISTMEDCommandTimeout")
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub

        ''' <summary>
        ''' Constructor para manipular la Transaction
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal Transaction As System.Data.SqlClient.SqlTransaction)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                _transaction = Transaction
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        Public Event OnError(ByVal ex As Exception)
        Public Property ExceptionHandling() As ExceptionHandlingEnum
            Get
                Return _exceptionHandling
            End Get
            Set(ByVal value As ExceptionHandlingEnum)
                _exceptionHandling = value
            End Set
        End Property


        ''' <summary>
        ''' Constructor para manipular la Transaction por Reflexión
        ''' </summary>
        ''' <remarks></remarks>
        Sub New(ByVal TransactionOwner As Object)
            MyBase.New()
            Try
                _connectionstring = ConfigurationManager.ConnectionStrings("SISTMED").ConnectionString
                Try
                    Transaction = TransactionOwner.GetType.GetProperty("Transaction").GetValue(TransactionOwner, Nothing)
                Catch ex As Exception
                    RaiseEvent OnError(New Exception("Error al asignar transacción"))
                End Try
            Catch ex As Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
        End Sub
        ''' <summary>
        ''' Agrega un Registro a la base.
        ''' </summary>
        ''' <param name="ITEM"></param>
        ''' <remarks> </remarks>
        Public Overridable Function Add(ByVal Item As Entities.Tables.EST_LABORATORIOTIPOS) As Entities.Tables.EST_LABORATORIOTIPOS
            Dim result As Boolean

            Try
                _commandText = "_EST_LABORATORIOTIPOS_ADD"
                Dim vPKtipo_id As New SqlParameter("@tipo_id", SqlDbType.Int, 10, ParameterDirection.Output, False, 0, 0, Nothing, DataRowVersion.Default, Nothing)
                Dim VtipoDescripcion As New SqlParameter("@tipoDescripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoDescripcion)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)

                Dim params() As SqlParameter = {vPKtipo_id, VtipoDescripcion, Verr}
                If _transaction Is Nothing Then
                    result = SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    result = SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                If result Then
                    Item.tipo_id = vPKtipo_id.Value
                    Return Item
                Else
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function


        ''' <summary>
        ''' Retorna una consulta.
        ''' </summary>
        ''' <remarks> </remarks>
        Public Overridable Function Items() As List(Of Entities.Tables.EST_LABORATORIOTIPOS)
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try
                _commandText = "_EST_LaboratorioTipos_ITEMS"
                _itemList.Clear()
                _sql = GetSQL()

                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

                While dr.Read
                    Dim NewItem As New Entities.Tables.EST_LABORATORIOTIPOS
                    NewItem.tipo_id = IIf(Convert.IsDBNull(dr("tipo_id")), Nothing, dr("tipo_id"))
                    NewItem.tipoDescripcion = IIf(Convert.IsDBNull(dr("tipoDescripcion")), Nothing, dr("tipoDescripcion"))
                    _itemList.Add(NewItem)
                End While
                Return _itemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        Public Overridable Function AggregateItems() As ArrayList
            Dim dr As System.Data.SqlClient.SqlDataReader = Nothing
            Try

                _commandText = "_AGGREGATE_ITEMS"
                _sql = GetSQL()
                Dim VAggregate As New SqlParameter("@VAggregate ", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, GetAggregateSQL())
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOTIPOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VAggregate, VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    dr = SqlHelper.ExecuteReader(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    dr = SqlHelper.ExecuteReader(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If
                While dr.Read
                    Dim _rowsItemList As New ArrayList
                    For count As Int32 = 0 To dr.FieldCount - 1
                        _rowsItemList.Add(New DataField(dr.GetName(count), dr.GetValue(count)))

                    Next
                    _aggregateItemList.Add(_rowsItemList)

                End While
                Return _aggregateItemList
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            Finally
                _sqlErr = Nothing
                If dr IsNot Nothing Then dr.Close()
            End Try
        End Function

        ''' <summary>
        ''' Elimina registros de la base de datos.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Delete() As Boolean

            Try

                _commandText = "_DELETE_ITEMS"
                _sql = GetSQL()
                Dim VTable As New SqlParameter("@VTable", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, "EST_LABORATORIOTIPOS")
                Dim Vsql As New SqlParameter("@Vsql", SqlDbType.NVarChar, 1000, ParameterDirection.Input, False, 0, 0, "", DataRowVersion.Proposed, _sql)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {VTable, Vsql, Verr}

                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            Finally
                _sqlErr = Nothing
            End Try
        End Function

        ''' <summary>
        ''' Elimina una instancia de tipo ITEM de la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Remove(ByVal Item As Entities.Tables.EST_LABORATORIOTIPOS) As Boolean

            Try
                _commandText = "_EST_LaboratorioTipos_REMOVE"
                Dim Vtipo_id As New SqlParameter("@tipo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipo_id)

                Dim VSqlErr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sqlErr)
                Dim params() As SqlParameter = {Vtipo_id, VSqlErr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function

        ''' <summary>
        ''' Elimina todos los registros de la base, con opcion a ejecutar un 'Truncate'.
        ''' </summary>
        ''' <param name="Truncate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Clear(ByVal Truncate As Boolean) As Boolean

            Try
                _commandText = "_EST_LaboratorioTipos_CLEAR"
                Dim VTRUNCATE As New SqlParameter("@TRUNCATE", SqlDbType.Bit, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Truncate)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {VTRUNCATE, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Actualiza una instancia de tipo ITEM en la base.
        ''' </summary>
        ''' <param name="Item"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function Update(ByVal Item As Entities.Tables.EST_LABORATORIOTIPOS) As Boolean

            Try
                _commandText = "_EST_LaboratorioTipos_UPDATE"

                Dim Vtipo_id As New SqlParameter("@tipo_id", SqlDbType.Int, 10, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipo_id)
                Dim VtipoDescripcion As New SqlParameter("@tipoDescripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, False, 0, 0, Nothing, DataRowVersion.Default, Item.tipoDescripcion)
                Dim Verr As New SqlParameter("@Err", SqlDbType.NVarChar, 100, ParameterDirection.Output, True, 0, 0, "", DataRowVersion.Proposed, _sql)

                Dim params() As SqlParameter = {Vtipo_id, VtipoDescripcion, Verr}
                If _transaction Is Nothing Then
                    Return SqlHelper.ExecuteNonQuery(_connectionstring, CommandType.StoredProcedure, _commandText, params)
                Else
                    Return SqlHelper.ExecuteNonQuery(_transaction, CommandType.StoredProcedure, _commandText, params)
                End If

            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return False
            End Try
        End Function


        ''' <summary>
        ''' Inicia una Transaccion.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function BeginTransaction() As System.Data.SqlClient.SqlTransaction
            Try
                If _connection Is Nothing Then
                    _connection = New SqlConnection(_connectionstring)
                    _connection.Open()
                    _transaction = _connection.BeginTransaction()
                    Return _transaction
                Else
                    RaiseEvent OnError(New Exception("Transaction already opened"))
                    Return Nothing
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' Finaliza una Transaccion,indicandole si se efectúa el 'commit' o no.
        ''' </summary>
        ''' <param name="Commit"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function EndTransaction(ByVal Commit As Boolean) As Boolean
            Try
                If _connection Is Nothing Then
                    RaiseEvent OnError(New Exception("Transaction not opened yet"))
                Else
                    If Commit Then
                        _transaction.Commit()
                    Else
                        _transaction.Rollback()
                    End If
                    _connection.Close()
                    _connection = Nothing
                    _transaction = Nothing
                    Return True
                End If
            Catch ex As System.Exception
                Select Case Me.ExceptionHandling
                    Case ExceptionHandlingEnum.RaiseExceptionHandling
                        RaiseEvent OnError(ex)
                    Case ExceptionHandlingEnum.ThrowExceptionHandling
                        Throw (ex)
                End Select
            End Try
            Return True
        End Function

        ''' <summary>
        ''' Conserva el resultado de la última consulta.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property Resultset() As List(Of Entities.Tables.EST_LABORATORIOTIPOS)
            Get
                Return _itemList
            End Get

        End Property

        Private Function GetSQL() As String
            Try
                Dim _buff As String = String.Empty
                _buff &= Me.WhereParameter.GetSQL()
                _buff &= Me.OrderByParameter.GetSQL()
                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Private Function GetAggregateSQL() As String
            Try
                Dim _buff As String = Nothing

                _buff &= Me.AggregateParameter.GetSQL()

                Return _buff
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        Public Property WhereParameter() As WhereParameterObject
            Get
                Return _whereParameterObject

            End Get
            Set(ByVal value As WhereParameterObject)
                _whereParameterObject = value
            End Set
        End Property
        Public Property OrderByParameter() As OrderByParameterObject
            Get
                Return _orderByParameterObject
            End Get
            Set(ByVal value As OrderByParameterObject)
                _orderByParameterObject = value
            End Set
        End Property
        Public Property AggregateParameter() As AggregateParameterObject
            Get
                Return _aggregateParameterObject
            End Get
            Set(ByVal value As AggregateParameterObject)
                _aggregateParameterObject = value
            End Set
        End Property

        Public Class OrderByParameterObject
            Inherits OrderByParameter

            Public Sub Add(ByVal Column As ColumnEnum, Optional ByVal Direction As SqlEnums.DirEnum = SqlEnums.DirEnum.ASC)
                Try
                    _orderByParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & [Enum].GetName(GetType(SqlEnums.DirEnum), Direction))

                Catch ex As Exception

                End Try

            End Sub
        End Class

        Public Class WhereParameterObject
            Inherits WhereParameter

            Public Overloads Sub Add(ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())
                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & MyBase.GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal Column As ColumnEnum, ByVal Operand As SqlEnums.OperandEnum, ByVal ParamArray Value As Object())

                Try
                    Select Case Operand
                        Case SqlEnums.OperandEnum.In, SqlEnums.OperandEnum.NotIn
                            Dim _buff As String = Nothing
                            For Each obj As Object In Value
                                _buff &= obj.ToString & ","
                            Next
                            MyBase._whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " (" & _buff.Substring(0, _buff.Length - 1) & ")")
                        Case Else
                            If Value.Length > 1 Then
                                Throw New Exception("Demasiados argumentos para la consulta.")
                            Else
                                _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), Column) & " " & GetOperand(Operand) & " " & FormatValue(Value(0)))
                            End If
                    End Select


                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)
                Try
                    _whereParams.Add([Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Catch ex As Exception
                    Throw ex
                End Try
            End Sub
            Public Overloads Sub Add(ByVal Conjunction As SqlEnums.ConjunctionEnum, ByVal BetweenColumn As ColumnEnum, ByVal FromValue As Object, ByVal ToValue As Object)

                If _whereParams.Count Then
                    _whereParams.Add([Enum].GetName(GetType(SqlEnums.ConjunctionEnum), Conjunction) & " " & [Enum].GetName(GetType(ColumnEnum), BetweenColumn) & " BETWEEN " & FormatValue(FromValue) & " AND " & FormatValue(ToValue))
                Else
                    Throw New Exception("Error de sobrecarga")
                End If

            End Sub
            Private Function FormatValue(ByVal Value As Object) As String
                Try
                    Select Case Value.GetType.FullName
                        Case "System.String", "System.DateTime"
                            Return "'" & Value & "'"
                        Case Else
                            Return Value
                    End Select
                Catch ex As Exception
                    Throw New Exception("Error Convirtiendo valor")
                End Try
            End Function
        End Class


        Public Class AggregateParameterObject
            Inherits AggregateParameter

            Public Sub Add(ByVal AggregateFunction As SqlEnums.FunctionEnum, ByVal Column As ColumnEnum)
                Try
                    _aggregateParams.Add(GetOperand(AggregateFunction) & "( " & [Enum].GetName(GetType(ColumnEnum), Column) & " )")

                Catch ex As Exception

                End Try

            End Sub
        End Class
        ''' <summary>
        ''' </summary>
        ''' <remarks></remarks>
        Public Class ITEM
            Inherits Entities.Tables.EST_LABORATORIOTIPOS
        End Class 'ITEM

        ''' Clase         : ColumnNames 
        ''' Descripción   : Nombres de Columnas de la tabla EST_LABORATORIOTIPOS
        ''' Fecha de Creación  : jueves, 29 de septiembre de 2016
        ''' <remarks> Representa los Nombres de Columnas de la tabla EST_LABORATORIOTIPOS. </remarks>
        Public Class ColumnNames
            Public Const TIPO_ID As String = "TIPO_ID"
            Public Const TIPODESCRIPCION As String = "TIPODESCRIPCION"
        End Class ' ColumnNames
    End Class
End Namespace 'Tables 
